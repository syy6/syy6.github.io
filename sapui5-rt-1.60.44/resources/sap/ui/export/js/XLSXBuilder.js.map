{"version":3,"sources":["webpack:///XLSXBuilder.js","webpack:///webpack/bootstrap 23665558697295235e9f","webpack:///./core/xlsx/src/xml/XMLNode.js","webpack:///./core/xlsx/src/xml/XMLFile.js","webpack:///./core/xlsx/src/binding/type/Type.js","webpack:///./core/xlsx/src/data/Cell.js","webpack:///./core/xlsx/src/binding/type/Currency.js","webpack:///./core/xlsx/src/binding/type/Numeric.js","webpack:///./core/xlsx/src/style/Alignment.js","webpack:///./core/xlsx/src/xml/XMLElement.js","webpack:///./core/xlsx/src/objects/Relationships.js","webpack:///./core/xlsx/src/data/Sheet.js","webpack:///./core/xlsx/src/data/Row.js","webpack:///./core/xlsx/src/binding/type/BigNumber.js","webpack:///./core/xlsx/src/binding/type/CurrencySettings.js","webpack:///./core/xlsx/src/binding/type/CalendarDate.js","webpack:///./core/xlsx/src/binding/type/BooleanType.js","webpack:///./core/xlsx/src/binding/type/Text.js","webpack:///./core/xlsx/src/XLSXBuilder.js","webpack:///./core/xlsx/src/objects/App.js","webpack:///./core/xlsx/src/xml/XMLAttribute.js","webpack:///./core/xlsx/src/objects/ContentTypes.js","webpack:///./core/xlsx/src/objects/Core.js","webpack:///./core/xlsx/src/objects/Workbook.js","webpack:///./core/xlsx/src/binding/ColumnConfiguration.js","webpack:///./core/xlsx/src/binding/Column.js","webpack:///./core/xlsx/src/binding/type/Enumeration.js","webpack:///./core/xlsx/src/objects/ReferenceNode.js","webpack:///./core/xlsx/src/data/SharedStrings.js","webpack:///./core/xlsx/src/data/SharedString.js","webpack:///./core/xlsx/src/style/Styles.js","webpack:///./core/xlsx/src/style/Style.js","webpack:///./core/xlsx/src/style/Font.js","webpack:///./core/xlsx/src/style/Fill.js","webpack:///./core/xlsx/src/style/Border.js","webpack:///./core/xlsx/src/style/NumberFormat.js"],"names":["XLSXBuilder","modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","XMLNode","oConfig","j","config","XMLElement","this","tag","value","root","writable","attributes","childs","length","addAttribute","properties","addChild","XMLAttribute","create","constructor","processingInformation","attribute","push","id","node","remove","sProperty","index","referencedElement","aAggregation","indexOf","splice","serialize","sSerialized","substr","xmlEncode","XMLFile","_filename","filename","_path","path","getFileName","setFileName","sFileName","match","Error","getPath","getAbsolutePath","setPath","sPath","lastIndexOf","bFinalize","sSerializedString","getPrototypeOf","cleanup","Type","styleId","alignment","textAlign","_createConfiguration","oData","align","horizontal","getStyleId","styles","addStyle","registerAt","oStyles","getValue","Cell","oType","oSharedStrings","metadata","DataType","SharedString","_shared","_oFallbackType","_applyType","BigNumber","CalendarDate","Numeric","BooleanType","Currency","Boolean","Date","InlineString","Number","FormularString","_cellTypeProperty","bindingType","type","isCustomFormatted","setStyle","nStyle","style","setReference","sReference","reference","setValue","oBusinessObject","_isValuePresent","text","toLowerCase","isIEEE754Compliant","insert","data","displayUnit","CurrencySettings","getCurrencyScale","sCurrency","iScale","DIGITS","DEFAULT","scale","template","unit","unitProperty","DEFAULT_SCALE","numberFormat","format","delimiter","styleIds","builtin","1","2","3","4","9","10","11","12","13","37","38","39","40","48","scientificRegEx","key","parseInt","aSegments","iExponent","sValue","test","split","toFixed","Math","max","bCompliant","replace","reduce","acc","Alignment","_contains","sAlign","oAggregation","contained","LEFT","CENTER","RIGHT","contains","vertical","TOP","MIDDLE","BOTTOM","isDefault","setIndent","nIndent","_setAlignmentAttribute","setHorizontalAlignment","setWrapText","bWrap","setVerticalAlignment","sId","_getAlignmentAttribute","equals","oAlignment","_replace","Relationships","oReferenceNode","addRelationship","sTarget","sType","Sheet","oColumnConfiguration","_hierarchyProperty","_hierarchyLevel","_rowCount","_createCols","_createHeader","Row","suffix","MAX_ROWS","col","minWidth","width","_columns","size","columns","_calculateColumnWidth","label","nWidth","factor","step","ceil","nCharacters","_setHierarchyDepth","nHierarchyDepth","hierarchyDepth","headerRow","getHeader","views","defaultView","_appendRow","oRow","dimension","sSerializedRow","pop","getColumnReferenceByIndex","filter","createGroup","sName","nLevel","groupHeaderRow","getGroupHeader","nHierarchyLevel","hierarchyLevelProperty","bind","getRowCount","nIndex","String","fromCharCode","floor","_updateSpans","spans","addCell","oCell","count","sResult","sUnit","toString","_parseValue","bDelimiter","aSplitted","aInteger","sDecimal","sInteger","sSign","shift","reduceRight","accumulator","currentValue","substring","update","defaultScale","customCurrencies","digits","ADP","AFN","ALL","BHD","BIF","BYR","CLF","CLP","DJF","ESP","GNF","HUF","IQD","IRR","ISK","ITL","JOD","JPY","KMF","KPW","KRW","KWD","LAK","LBP","LUF","LYD","MGA","MGF","MMK","MRO","OMR","PYG","RSD","RWF","SLL","SOS","STD","SYP","TMM","TND","TRL","TWD","UGX","UYI","UYW","VND","VUV","XAF","XOF","XPF","YER","ZMK","ZWD","calendar","inputFormat","toUpperCase","14","15","16","17","18","19","20","21","22","45","46","47","oSymbols","Y","apply","oDate","setUTCFullYear","M","setUTCMonth","D","setUTCDate","nTimestamp","valueOf","_parseStringValue","_JsDateToExcel","bTimeOnly","timeOfDayRegex","_parseTimeOfDay","odataDurationRegex","_parseODataDuration","_parseStringDate","odataDateRegex","_parseOdataDate","odataDateTimeOffsetRegex","parse","isFinite","vValue","parts","days","hours","minutes","seconds","ms","exec","parseFloat","date","setUTCHours","getTime","matchArray","offset","setUTCMinutes","getUTCMinutes","dateStringRegex","nExcelValue","sPattern","slice","charAt","trueValue","falseValue","Text","font","fill","hierarchyLevel","wrap","_mStyleIds","formulaRegex","convertLineBreaks","compliantLineBreak","indent","bRequiresPrefix","sIdentifier","quotePrefix","aMatch","reRegEx","aValues","aInputMatch","RegExp","Array","isArray","every","aBinding","oContext","oCustomConfig","aMetadataConfig","oMetainfoGroup","sSheetName","sMetadataSheetName","app","objects","App","core","Core","workbook","Workbook","currencySettings","sheetName","metaSheetName","sheet","addSheet","selectSheet","metainfo","hideHeader","_insertIntoSheet","items","ContentTypes","build","files","zip","fileConfig","FileType","xmlObject","relation","zipConfig","relationships","target","JSZip3","file","getRelationships","getRelatedFiles","forEach","compression","support","nodebuffer","generateAsync","append","aData","oSheet","array","application","version","prefix","FILENAME","title","modifiedBy","toISOString","modified","ReferenceNode","_styles","Styles","addRelatedFile","_sharedStrings","SharedStrings","RELATIONS","_relationships","_registeredSheets","ColumnConfiguration","sharedStrings","nCount","sSheetFileName","sheets","sheetElement","createDefinedName","sDefinedName","sDimension","that","iIndex","aArray","definedNames","aColumns","oColumn","_row","Column","_initBinding","getCell","normalizedHierarchyLevel","min","outline","cell","row","bold","color","column","sGroupName","oColumnData","_initType","Enumeration","_valueMap","valueMap","Map","_relatedFiles","oXMLFile","instance","getInstance","map","has","set","uniqueCount","clear","controlCharacterTestRegex","controlCharacterReplaceRegex","_escapeControlCharacters","sCharHex","sMatch","codePointAt","addFill","Style","Font","Fill","Border","NumberFormat","fontId","fillId","borderId","numberFormatId","addFont","addBorder","border","_isBuiltin","addNumberFormat","setFontId","setFillId","getBorderId","setNumberFormatId","setAlignment","setQuotePrefix","_addToAggregation","cellXfs","oNewItem","existingItem","addColor","sHexColor","alreadyPresent","colors","mru","some","rgb","oFont","fonts","oFill","fills","getFill","oBorder","borders","numberFormats","setId","ID_OFFSET","getId","family","getAlignment","getFontId","getFillId","getNumberFormatId","hasQuotePrefix","oAlign","alignProperty","_apply","nFontId","nFillId","setBorderId","sBorderId","nNumFmtId","bQuotePrefix","nId","applyProperty","oStyle","setName","setSize","setFamily","setBold","DEFAULT_SIZE","DEFAULT_NAME","getName","getSize","isBold","getColor","getFamily","valueAttribute","bBold","nFamily","nSize","isNaN","setFill","setType","DEFAULT_TYPE","getType","sColor","reset","BUILTIN_IDS","formatId","getFormat","iId","setFormat","sFormat","oNumberFormat"],"mappings":"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","file":"XLSXBuilder.js","sourcesContent":["var XLSXBuilder =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 18);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLElement = __webpack_require__(7);\r\nvar XMLAttribute = __webpack_require__(20);\r\n\r\n/**\r\n * JSON representation of XML nodes. Each node has a tag an can have multiple {@link XMLAttribute} entries assigned.\r\n * It can also have multiple child {@link XMLNode} elements assigned. The node can contain a value.\r\n *\r\n * @param {object|string} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.tag - String representation of the XML tag.\r\n * @param {object[]} [oConfig.attributes] - Aggregation for adding {@link XMLAttributes} to the current node.\r\n * @param {object[]} [oConfig.properties] - Aggregation for adding {@link XMLNode} objects as child objects to this node\r\n * @param {string} [oConfig.value] - String value inside the XML tag.\r\n * @class\r\n * @module xml/XMLNode\r\n */\r\nfunction XMLNode(oConfig) {\r\n\tvar i, j, config;\r\n\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\t/* Shorthand functionality to simply assign the XMLNode tag name instead of a configuration object */\r\n\tconfig = typeof oConfig === 'string' ? {tag: oConfig} : oConfig;\r\n\r\n\tObject.defineProperty(this, 'root', {value: !!config.root, writable: false});\r\n\tthis.tag = typeof config.tag == 'string' ? config.tag : '';\r\n\tthis.attributes = [];\r\n\tthis.childs = [];\r\n\r\n\t/* Initialize the XML node by filling the aggregations if present */\r\n\tif (config.attributes) {\r\n\t\tfor (i = 0; i < config.attributes.length; i++) {\r\n\t\t\tthis.addAttribute(config.attributes[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tif (config.properties) {\r\n\t\tfor (j = 0; j < config.properties.length; j++) {\r\n\t\t\tthis.addChild(config.properties[j]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXMLNode.prototype = Object.create(XMLElement.prototype);\r\nXMLNode.prototype.constructor = XMLNode;\r\n\r\nXMLNode.processingInformation = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>';\r\n\r\n\r\n/**\r\n * Adds the provided XMLAttribute object to the XMLNode.\r\n * If no XMLAttribute is provided it will create one instead.\r\n * The method returns the XMLAttribute for chaining.\r\n *\r\n * @function addAttribute\r\n * @param {Object} oConfig - XMLAttribute or configuration object that represents a XMLAttribute\r\n * @returns {Object} - An instance of XMLAttribute that was added to this node\r\n */\r\nXMLNode.prototype.addAttribute = function(oConfig) {\r\n\tvar attribute = oConfig instanceof XMLAttribute ? oConfig : new XMLAttribute(oConfig);\r\n\r\n\tthis.attributes.push(attribute);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: attribute, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn attribute;\r\n};\r\n\r\n\r\n/**\r\n * Adds the provided XMLNode object as child to the current XMLNode.\r\n * If no XMLNode is provided it will create one instead.\r\n * The method returns the XMLNode for chaining.\r\n *\r\n * @function addChild\r\n * @param {Object} oConfig - XMLNode or configuration object that represents a XMLNode\r\n * @returns {object} - An instance of XMLNode that was added to this node\r\n */\r\nXMLNode.prototype.addChild = function(oConfig) {\r\n\r\n\t/* Additional Attributes of the child node will be added in the Constructor */\r\n\tvar node = oConfig instanceof XMLNode ? oConfig : new XMLNode(oConfig);\r\n\r\n\tthis.childs.push(node);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: node, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\n\r\n/**\r\n * Removes the property from this object and also deletes the\r\n * referenced item within the child nodes or attributes\r\n * aggregation.\r\n *\r\n * The method returns the previously referenced object or null if\r\n * the property name is not present on this particular XMLNode or\r\n * if no item is referenced.\r\n *\r\n * Builtin properties of XMLNode cannot be removed with this\r\n * function. These are \"root\", \"tag\", \"attributes\", \"childs\",\r\n * \"value\".\r\n *\r\n * @param {string} sProperty - Name of the property that should be removed\r\n * @returns {XMLNode|XMLAttribute|null} - The referenced object that gets removed as well\r\n */\r\nXMLNode.prototype.remove = function(sProperty) {\r\n\tvar index, referencedElement, aAggregation;\r\n\r\n\t/* Only proceed if property is present */\r\n\tif (!(sProperty in this)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treferencedElement = this[sProperty];\r\n\r\n\t/* Check if referenced element is a XMLAttribute */\r\n\tif (referencedElement instanceof XMLAttribute) {\r\n\t\taAggregation = this.attributes;\r\n\t} else if (referencedElement instanceof XMLNode && !(sProperty in new XMLNode(''))) {\r\n\t\taAggregation = this.childs;\r\n\t} else {\r\n\r\n\t\t/* Early return if referenced element is neither an XMLAttribute nor XMLNode */\r\n\t\treturn null;\r\n\t}\r\n\r\n\tindex = aAggregation.indexOf(referencedElement);\r\n\taAggregation.splice(index, 1); // It is ensured that index > -1 otherwise #addChild or #addAttribute fail\r\n\tdelete this[sProperty];\r\n\r\n\treturn referencedElement;\r\n};\r\n\r\n/**\r\n * Allows recursive serialization of the object and its descendants. If the XMLNode is marked as root node,\r\n * it will automatically add the XML processing information in front of the serialized representation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLNode.\r\n */\r\nXMLNode.prototype.serialize = function() {\r\n\tvar sSerialized, i, j;\r\n\r\n\tsSerialized = (this.root ? XMLNode.processingInformation : '') + '<' + this.tag;\r\n\r\n\t/* Insert attributes including namespace information */\r\n\tfor (i = 0; i < this.attributes.length; i++) {\r\n\t\tsSerialized += this.attributes[i].serialize();\r\n\t}\r\n\r\n\t/* Insert child nodes and value */\r\n\tif (this.childs.length || this.value || typeof this.value === 'number') {\r\n\t\tsSerialized += '>';\r\n\t\tsSerialized = (' ' + sSerialized).substr(1);\r\n\r\n\t\tfor (j = 0; j < this.childs.length; j++) {\r\n\t\t\tsSerialized += typeof this.childs[j] === 'string' ? this.childs[j] : this.childs[j].serialize();\r\n\t\t}\r\n\t\tsSerialized += this.xmlEncode(this.value);\r\n\r\n\t\tsSerialized += '</' + this.tag + '>';\r\n\t} else {\r\n\r\n\t\t/* Shorthand tag support */\r\n\t\tsSerialized += '/>';\r\n\t\tsSerialized = (' ' + sSerialized).substr(1);\r\n\t}\r\n\r\n\treturn sSerialized;\r\n};\r\n\r\nmodule.exports = XMLNode;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode\t\t = __webpack_require__(0);\r\n\r\n/**\r\n * The XMLFile class is a subclass of XMLNode that enriches the\r\n * object by path and file name information.\r\n *\r\n * @param {Object} oConfig - The configuration object for this XMLFile\r\n * @param {string} oConfig.path - The relative path of this XMLFile\r\n * @param {string} oConfig.filename - The file name of this XMLFile\r\n * @class\r\n */\r\nfunction XMLFile(oConfig) {\r\n\tXMLNode.call(this, oConfig);\r\n\r\n\tthis._filename = oConfig.filename;\r\n\tthis._path = oConfig.path;\r\n}\r\n\r\nXMLFile.prototype = Object.create(XMLNode.prototype);\r\nXMLFile.prototype.constructor = XMLFile;\r\n\r\n/**\r\n * Returns the name of this particular file including its file extension.\r\n *\r\n * @returns {string} Name of the file\r\n */\r\nXMLFile.prototype.getFileName = function() {\r\n\treturn this._filename;\r\n};\r\n\r\n/**\r\n * Assigns the given string as name of the file. The name must contain a file extension.\r\n *\r\n * @param {string} sFileName - Name of the file\r\n */\r\nXMLFile.prototype.setFileName = function(sFileName) {\r\n\r\n\tif (!sFileName.match(/^\\S+\\.\\S{3,4}$/)) {\r\n\t\tthrow new Error('Invalid file name: ' + sFileName);\r\n\t}\r\n\r\n\tthis._filename = sFileName;\r\n};\r\n\r\n/**\r\n * Returns the path of the file without any filename.\r\n *\r\n * @returns {string} - Path of the file\r\n */\r\nXMLFile.prototype.getPath = function() {\r\n\treturn this._path;\r\n};\r\n\r\n/**\r\n * Returns the absolute Path to the file.\r\n *\r\n * @returns {string} - Absolute path including the filename\r\n */\r\nXMLFile.prototype.getAbsolutePath = function() {\r\n\treturn this.getPath() + this.getFileName();\r\n};\r\n\r\n/**\r\n * Assigns the given path to this XMLFile. The path needs to end with\r\n * a slash to match the criteria.\r\n *\r\n * @param {string} sPath - Relative path of this XMLFile\r\n */\r\nXMLFile.prototype.setPath = function(sPath) {\r\n\r\n\t/* IE compatible endsWith */\r\n\tif (!sPath || sPath.lastIndexOf('/') !== (sPath.length - 1)) {\r\n\t\tthrow new Error('Invalid file path: ' + sPath);\r\n\t}\r\n\r\n\tthis._path = sPath;\r\n};\r\n\r\n/**\r\n * Performs a serialization of this XMLFile based on the XMLNode#serialize\r\n * implementation. The optional parameter allows to finalize this XMLFile\r\n * so that all aggregations will be cleared and the cleanup hook\r\n * XMLFile#cleanup will be executed. The aggregations will be cleared\r\n * outside of the cleanup function. This will ensure proper cleanup\r\n * even is the subclass is not calling the super class function.\r\n *\r\n * @param {boolean} [bFinalize]\r\n * Forces the XMLFile to destroy its aggregations. It will call the\r\n * cleanup function of the instance. This can be used as a hook for\r\n * subclasses that inherit from XMLFile. This frees additional memory\r\n * but should be used with caution because after serialization all\r\n * content will be lost.\r\n *\r\n * @returns {string} The serialized XMLFile\r\n *\r\n * @Overrides XMLNode#serialize\r\n */\r\nXMLFile.prototype.serialize = function(bFinalize) {\r\n\tvar sSerializedString;\r\n\r\n\tsSerializedString = Object.getPrototypeOf(XMLFile.prototype).serialize.call(this);\r\n\r\n\tif (bFinalize) {\r\n\t\tthis.childs.length = 0;\r\n\r\n\t\tthis.cleanup();\r\n\t}\r\n\r\n\treturn sSerializedString;\r\n};\r\n\r\n/**\r\n * Abstract function that can be overridden as a cleanup hook.\r\n * @abstract\r\n */\r\nXMLFile.prototype.cleanup = function() {\r\n\r\n\t/* Do nothing */\r\n};\r\n\r\nmodule.exports = XMLFile;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\r\n * The Type class defines a supported data type, like strings,\r\n * numeric values, decimals, dates, currencies and so on. It is NOT\r\n * part of the XML representation of the generated Excel document.\r\n *\r\n * This class is marked as abstract therefore only its sub-classes\r\n * should be used.\r\n *\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction Type(oConfig) {\r\n\tthis.styleId = null;\r\n\tthis.alignment = oConfig && oConfig.textAlign ? oConfig.textAlign : null;\r\n}\r\n\r\n/**\r\n * Creates the type specific configuration that is used to register\r\n * its corresponding style in the Styles class.\r\n *\r\n * All subclass implementations have to call the superclass method to\r\n * ensure that alignment information will not be lost.\r\n *\r\n * @param {Object} oData - Line item that will be used to evaluate the cell content\r\n * @returns {Object} - Configuration object that may contain alignment information\r\n * @protected\r\n */\r\nType.prototype._createConfiguration = function(oData) {\r\n\treturn this.alignment ? { align : {\thorizontal: this.alignment }} : {};\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} [oData] - Business object that contains the actual data\r\n * @param {string|number} [value] - Explicit cell value that might be used for semantic formatting\r\n * @returns {number} - ID of the registered Style\r\n */\r\nType.prototype.getStyleId = function(oData, value) {\r\n\tif (this.styleId === null) {\r\n\t\tthis.styleId = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleId;\r\n};\r\n\r\n/**\r\n * Registers the Style configuration of this Type in the given Styles\r\n * class.\r\n *\r\n * @param {Styles} oStyles - Styles instance where the Type specific styling will be registered\r\n */\r\nType.prototype.registerAt = function(oStyles) {\r\n\tthis.styles = oStyles;\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type.\r\n *\r\n * @param {string} property - Name of the property that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean|null} - The value of the given property after type specific processing.\r\n */\r\nType.prototype.getValue = function(property, oData) {\r\n\treturn oData[property];\r\n};\r\n\r\nmodule.exports = Type;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode\t\t \t= __webpack_require__(0),\r\n\tBigNumber\t\t= __webpack_require__(11),\r\n\tCalendarDate \t= __webpack_require__(13),\r\n\tNumeric \t\t= __webpack_require__(5),\r\n\tBooleanType \t= __webpack_require__(14),\r\n\tCurrency \t\t= __webpack_require__(4);\r\n\r\n/**\r\n * The Cell class represents a single cell within the spreadsheet\r\n * that has to be assigned to a particular row. A Cell stores\r\n * information supporting several types of data.\r\n *\r\n * @param {Type} oType - The data type of the cell\r\n * @param {SharedStrings} oSharedStrings - SharedStrings instance that will be used by all Cells\r\n * @class\r\n */\r\nfunction Cell(oType, oSharedStrings) {\r\n\tXMLNode.call(this, Cell.metadata);\r\n\r\n\tObject.defineProperty(this, 'type', { value: Cell.DataType.SharedString, writable: true });\r\n\r\n\tthis._shared = oSharedStrings;\r\n\tthis._oFallbackType = null;\r\n\tthis._applyType(oType);\r\n}\r\n\r\nCell.prototype = Object.create(XMLNode.prototype);\r\nCell.prototype.constructor = Cell;\r\n\r\nCell.DataType = {\r\n\tBoolean: 'b',\r\n\tDate: 'd',\r\n\tInlineString: 'inlineStr', // We do not support inline strings\r\n\tNumber: 'n',\r\n\tSharedString: 's',\r\n\tFormularString: 'str'\r\n};\r\n\r\nCell._cellTypeProperty = 'cellType';\r\n\r\nCell.metadata = {\r\n\ttag: 'c',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'style',\r\n\t\t\tname: 's',\r\n\t\t\tvalue: '0' // Default style id\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 'v'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Applies the given type to the current Cell and maps to the\r\n * corresponding Office Open XML type definition.\r\n *\r\n * @param {Type} oType - Value of type {@link Type}\r\n * @private\r\n */\r\nCell.prototype._applyType = function(oType) {\r\n\r\n\tthis.bindingType = oType;\r\n\r\n\tswitch (oType.constructor) {\r\n\t\tcase BooleanType:\r\n\t\t\tthis.type = Cell.DataType.Boolean;\r\n\r\n\t\t\tif (!oType.isCustomFormatted()) {\r\n\t\t\t\tthis.addAttribute({\r\n\t\t\t\t\tid: Cell._cellTypeProperty,\r\n\t\t\t\t\tname: 't',\r\n\t\t\t\t\tvalue: Cell.DataType.Boolean\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase CalendarDate:\r\n\t\t\tthis.type = Cell.DataType.Date;\r\n\t\t\tbreak;\r\n\r\n\t\tcase Numeric:\r\n\t\tcase Currency:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\r\n\t\t\t/*\r\n\t\t\t * As long as _applyType is only called once during\r\n\t\t\t * initialization, the fallbackType can be registered\r\n\t\t\t * without any additional check.\r\n\t\t\t */\r\n\t\t\tthis._oFallbackType = new BigNumber(oType);\r\n\t\t\tthis._oFallbackType.registerAt(oType.styles);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault: // Text is the default case\r\n\t\t\tthis.addAttribute({\r\n\t\t\t\tid: Cell._cellTypeProperty,\r\n\t\t\t\tname: 't',\r\n\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\r\n\t\t\t});\r\n\t\t\tthis.type = Cell.DataType.SharedString;\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the specified Style to the cell.\r\n *\r\n * @param {number|string} nStyle - Instance of Excel.objects.Style\r\n */\r\nCell.prototype.setStyle = function(nStyle) {\r\n\tthis.style.value = nStyle;\r\n};\r\n\r\n/**\r\n * Applies the specified cell location as reference. The reference\r\n * must match the regular expression of Open Document SpreadsheetML\r\n * sheet format. Starting with at least one uppercase letter for the\r\n * column followed by a number without leading zeros for the row.\r\n * [A-Z]+[1-9]+[0-9]*\r\n *\r\n * @param {string} sReference - Reference of the cells' location\r\n */\r\nCell.prototype.setReference = function(sReference) {\r\n\tif (typeof sReference != 'string'\r\n\t\t|| !sReference.match(/^[A-Z]+[1-9]+[0-9]*$/g)) {\r\n\t\tthrow new Error('The given Cell reference \"' + sReference + '\" does not match the reference pattern.');\r\n\t}\r\n\r\n\tthis.reference.value = sReference;\r\n};\r\n\r\n/**\r\n * Assigns the value to the current Cell. The method requires a\r\n * property reference and a business object that gets bound depending\r\n * on the property. It is also possible to provide an array of\r\n * properties in case of aggregated columns.\r\n *\r\n * @param {(string|Array)} sProperty - single property or Array of properties\r\n * @param {Object} oBusinessObject - BusinessObject that gets bound to this Cell\r\n */\r\nCell.prototype.setValue = function(sProperty, oBusinessObject) {\r\n\tvar value, bindingType;\r\n\r\n\tbindingType = this.bindingType;\r\n\tvalue = bindingType.getValue(sProperty, oBusinessObject);\r\n\r\n\tif (!this._isValuePresent(value)) {\r\n\r\n\t\t/*\r\n\t\t * We need to clear the value due to the fact\r\n\t\t * that we are re-using the Cell for each row\r\n\t\t */\r\n\t\tthis.text.value = '';\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tswitch (this.type) {\r\n\t\tcase Cell.DataType.Boolean:\r\n\r\n\t\t\t/* String representations other than \"true\" will result in the boolean value false */\r\n\t\t\tif (typeof value === 'string') {\r\n\t\t\t\tvalue = value.toLowerCase() === 'true';\r\n\t\t\t}\r\n\t\t\tthis.text.value = value ? '1' : '0';\r\n\r\n\t\t\tbreak;\r\n\t\tcase Cell.DataType.Date:\r\n\t\t\tthis.text.value = value;\r\n\r\n\t\t\tbreak;\r\n\t\tcase Cell.DataType.Number:\r\n\t\t\tif (bindingType.isIEEE754Compliant(value)) {\r\n\t\t\t\tthis.text.value = value;\r\n\r\n\t\t\t\tif (this[Cell._cellTypeProperty]) {\r\n\t\t\t\t\tthis.remove(Cell._cellTypeProperty);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t/* Handle fallback case and insert value as SharedString */\r\n\t\t\tbindingType = this._oFallbackType;\r\n\t\t\tvalue = bindingType.getValue(sProperty, oBusinessObject);\r\n\r\n\t\t\tif (!this[Cell._cellTypeProperty]) {\r\n\t\t\t\tthis.addAttribute({\r\n\t\t\t\t\tid: Cell._cellTypeProperty,\r\n\t\t\t\t\tname: 't',\r\n\t\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// CAUTION: break is omitted intentionally\r\n\r\n\t\tdefault: // SharedString is the default case\r\n\t\t\tthis.text.value = this._shared.insert(value);\r\n\t}\r\n\r\n\t/*\r\n\t * Forces a style update once the value changed. This allows cell\r\n\t * specific styles for currency types. Due to the fact that the\r\n\t * Style ID gets cached within the Type, there is no performance\r\n\t * impact even on large data sets.\r\n\t */\r\n\tthis.setStyle(bindingType.getStyleId(oBusinessObject, value));\r\n};\r\n\r\n/**\r\n * Checks whether there is a value provided or not. Allowed values\r\n * are Stringsas well as numeric and boolean values. Empty Strings\r\n * will be evaluated as no value, but the numeric value 0 is a value.\r\n *\r\n * @param {(string|number|boolean|Array)} data - The value that gets checked\r\n * @returns {boolean} - true if a value is present, false if not\r\n * @private\r\n */\r\nCell.prototype._isValuePresent = function(data) {\r\n\treturn ((typeof data === 'string' && !!data)\r\n\t\t|| typeof data === 'number'\r\n\t\t|| typeof data === 'boolean'\r\n\t\t|| data instanceof Date);\r\n};\r\n\r\nmodule.exports = Cell;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Numeric = __webpack_require__(5),\r\n\tCurrencySettings = __webpack_require__(12);\r\n\r\n/**\r\n * The Currency class represents a currency data type. It handles the\r\n * formatting and accepts several options like second property for\r\n * the unit of measurement or if the unit of measurement should be\r\n * displayed.\r\n *\r\n * It styles currencies with its particular amount of decimals.\r\n *\r\n * @param {Object} oConfig - A configuration object that is used to specify the formatting\r\n * @param {string} oConfig.unitProperty - A custom format string that will be used as template\r\n * @param {boolean} [oConfig.displayUnit] - Indicating whether the unit of measurement will be shown (default: true)\r\n * @param {number} [oConfig.scale] - A fixed scale that will be applied to all cells within this column,\r\n * regardless of its particular unit of measurement\r\n * @constructor\r\n */\r\nfunction Currency(oConfig) {\r\n\tNumeric.call(this, oConfig);\r\n\r\n\tthis.displayUnit = oConfig && typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\r\n}\r\n\r\nCurrency.prototype = Object.create(Numeric.prototype);\r\nCurrency.prototype.constructor = Currency;\r\n\r\n/**\r\n * Returns the currency specific scale.\r\n *\r\n * @param {string} sCurrency - ISO currency code like USD for $ and EUR for € etc.\r\n * @returns {number} A number between 2 and 3 depending on the scale of the given currency\r\n * @public\r\n * @static\r\n */\r\nCurrency.getCurrencyScale = function(sCurrency) {\r\n\tvar iScale;\r\n\r\n\tiScale = CurrencySettings.DIGITS[sCurrency];\r\n\r\n\t/* If the currency uses the default scale */\r\n\tif (typeof iScale !== 'number') {\r\n\t\tiScale = CurrencySettings.DIGITS.DEFAULT;\r\n\t}\r\n\r\n\treturn iScale;\r\n};\r\n\r\n/**\r\n * Creates the Style configuration needed for registering the Type\r\n * specific styling in the Styles class.\r\n *\r\n * @param {Object} oData - Business object that gets bound to the styling template\r\n * @returns {Object} - Styling configuration object\r\n * @protected\r\n */\r\nCurrency.prototype._createConfiguration = function(oData) {\r\n\tvar i, j, scale, template, unit;\r\n\r\n\t// TODO implement inheritance with Numeric class\r\n\r\n\ttemplate = '#,##0';\r\n\r\n\t/* Apply fixed scale, only if no unitProperty is provided */\r\n\tif (!this.unitProperty && typeof this.scale === 'number') {\r\n\t\tscale = this.scale;\r\n\t} else {\r\n\t\tscale = Currency.getCurrencyScale(oData[this.unitProperty]);\r\n\t}\r\n\r\n\t/* Apply separator or placeholder */\r\n\ttemplate += (scale > 0) ? '.' : '_.';\r\n\r\n\tfor (i = 0; i < scale; i++) {\r\n\t\ttemplate += '0';\r\n\t}\r\n\r\n\tfor (j = CurrencySettings.DEFAULT_SCALE - scale; j > 0; j--) {\r\n\t\ttemplate += '_0';\r\n\t}\r\n\r\n\t/* Add unit of measurement if required */\r\n\tif (this.displayUnit) {\r\n\t\tunit = oData[this.unitProperty] ? '\"' + oData[this.unitProperty] + '\"' : '_E_U_R';\r\n\r\n\t\t// Applies unit of measurement or a placeholder if unit is empty\r\n\t\ttemplate = template + '\\\\ ' + unit;\r\n\t}\r\n\r\n\t// Add formatting for negative values as well\r\n\ttemplate = '* ' + template + ';* \\\\-\\\\ ' + template;\r\n\r\n\treturn { numberFormat: { format: template } };\r\n};\r\n\r\nmodule.exports = Currency;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\n\r\n/**\r\n * The Numeric class represents a numeric data type. Numeric data can\r\n * handle several options like thousands delimiter, decimal (scale)\r\n * and different types like 'percent' and 'exponential'.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {boolean} [oConfig.delimiter] - Indicates if a thousands delimiter should be used\r\n * @param {number} [oConfig.scale] - Defines the amount of decimals\r\n * @param {string} [oConfig.unit] - Specifies a particular unit of measurement\r\n * @param {string} [oConfig.unitProperty] - Specifies a property that contains the unit of measurement\r\n * @constructor\r\n */\r\nfunction Numeric(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.unit = oConfig ? oConfig.unit : null;\r\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\r\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\r\n\tthis.scale = oConfig ? oConfig.scale : null;\r\n\r\n\tthis.styleIds = {};\r\n}\r\n\r\nNumeric.prototype = Object.create(Type.prototype);\r\nNumeric.prototype.constructor = Numeric;\r\n\r\nNumeric.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\nNumeric.builtin = {\r\n\t1: '0',\r\n\t2: '0.00',\r\n\t3: '#,##0',\r\n\t4: '#,##0.00',\r\n\t9: '0%',\r\n\t10: '0.00%',\r\n\t11: '0.00E+00',\r\n\t12: '# ?/?',\r\n\t13: '# ??/??',\r\n\t37: '#,##0;(#,##0)',\r\n\t38: '#,##0;[Red](#,##0)',\r\n\t39: '#,##0.00;(#,##0.00)',\r\n\t40: '#,##0.00;[Red](#,##0.00)',\r\n\t48: '##0.0E+0'\r\n};\r\n\r\nNumeric.scientificRegEx = /^-?\\d?(\\.\\d)?\\d*[eE][+-]?\\d{1,3}$/;\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @param {Object} oData - Business object that contains additional data that is used for the formatting\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @protected\r\n */\r\nNumeric.prototype._createConfiguration = function(oData) {\r\n\tvar config, i, key,\ttemplate, unit;\r\n\r\n\tconfig = Object.getPrototypeOf(Numeric.prototype)._createConfiguration.call(this);\r\n\r\n\t/*\r\n\t * Evaluate unit of measurement first because a plain built-in\r\n\t * format is used as template but we need to be able to return\r\n\t * to the DEFAULT value in case the unit is empty or invalid.\r\n\t */\r\n\r\n\t/* Obtain unit of measurement if available */\r\n\tif (typeof this.unitProperty === 'string' && oData) {\r\n\t\tunit = oData[this.unitProperty];\r\n\t} else if (typeof this.unit === 'string') {\r\n\t\tunit = this.unit;\r\n\t}\r\n\r\n\tif (typeof unit !== 'string' || unit === '\"') {\r\n\t\tunit = '';\r\n\t}\r\n\r\n\tif (!this.delimiter && typeof this.scale !== 'number' && !unit) {\r\n\t\tconfig.numberFormat = Numeric.DEFAULT.numberFormat;\r\n\r\n\t\treturn config;\r\n\t}\r\n\r\n\t// Use built-in template as base\r\n\ttemplate = Numeric.builtin[1];\r\n\r\n\tif (this.delimiter) {\r\n\t\ttemplate = '#,##' + template;\r\n\t}\r\n\r\n\t/* Add decimal*/\r\n\tif (typeof this.scale === 'number' && this.scale > 0) {\r\n\t\ttemplate += '.';\r\n\r\n\t\tfor (i = 0; i < this.scale; i++) {\r\n\t\t\ttemplate += '0';\r\n\t\t}\r\n\t}\r\n\r\n\t/* Apply unit if present */\r\n\tif (unit) {\r\n\t\ttemplate += '\\\\ \"' + unit + '\"';\r\n\t}\r\n\r\n\tconfig.numberFormat = {\r\n\t\tformat: template\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in Numeric.builtin) {\r\n\t\tif (Numeric.builtin[key] === template) {\r\n\t\t\tconfig.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for the UoM\r\n * @param {string|number} [value] - Explicit cell value that might be used for semantic formatting\r\n * @returns {number} - ID of the registered Style\r\n */\r\nNumeric.prototype.getStyleId = function(oData, value) {\r\n\tvar styleId, unit;\r\n\r\n\t/* Handle simple numeric without unitProperty */\r\n\tif (!this.unitProperty) {\r\n\t\treturn Object.getPrototypeOf(Numeric.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tunit = oData[this.unitProperty];\r\n\tstyleId = this.styleIds[unit];\r\n\r\n\tif (typeof styleId === 'undefined') {\r\n\t\tthis.styleIds[unit] = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleIds[unit];\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. The value is normalized so that different input\r\n * representations will result in the same format.\r\n *\r\n * @param {string} sProperty - Name of the property that shall be accessed\r\n * @param {Object} oData - Business object that contains the data\r\n *\r\n * @returns {string|number|boolean|null} - The value of the given property after type specific processing.\r\n */\r\nNumeric.prototype.getValue = function(sProperty, oData) {\r\n\tvar aSegments, iScale, iExponent, sValue = oData[sProperty];\r\n\r\n\tif (typeof sValue == 'string' && Numeric.scientificRegEx.test(sValue)) {\r\n\r\n\t\taSegments = sValue.split(/\\.|[eE]/g);\r\n\t\tiScale = aSegments.length === 3 ? aSegments[1].length : 0;\r\n\t\tiExponent = Number(aSegments[aSegments.length - 1]);\r\n\r\n\t\t/* According to OData V4 Edm.Double is an IEEE 754 binary64 floating-point number (15-17 decimal digits) */\r\n\t\tsValue = Number(sValue).toFixed(Math.max(iScale - iExponent, 0));\r\n\r\n\t\t/* Write back the transformed value to avoid subsequent transformations */\r\n\t\toData[sProperty] = sValue;\r\n\t}\r\n\r\n\treturn sValue;\r\n};\r\n\r\n/**\r\n * Checks if the given value can be displayed in the IEEE 754\r\n * specification format. The function ignores leading and trailing\r\n * zeros and compares the length of the actual value does not exceed\r\n * 15 digits plus an optional decimal separator.\r\n *\r\n * The number might exceed 15 digits if it contains leading or\r\n * trailing zeros.\r\n *\r\n * @param {string} sValue - Numeric value that needs to be checked\r\n * @returns {boolean} - Whether the number needs to be formatted as BigNumber or not\r\n */\r\nNumeric.prototype.isIEEE754Compliant = function(sValue) {\r\n\tvar bCompliant = false;\r\n\r\n\tif (typeof sValue == 'number') {\r\n\t\tsValue = '' + sValue;\r\n\t}\r\n\r\n\tif (typeof sValue == 'string') {\r\n\r\n\t\tbCompliant = sValue\r\n\t\t\t.replace(/^-*0*|0+$/g, '')\r\n\t\t\t.split('.')\r\n\t\t\t.reduce(function(acc, value) {\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * Returns 1 if the value left of the separator is\r\n\t\t\t\t * zero and was cut of by removing leading and trailing zeros\r\n\t\t\t\t */\r\n\t\t\t\treturn (acc + value.length) || 1;\r\n\t\t\t}, 0) <= 15;\r\n\t}\r\n\r\n\treturn bCompliant;\r\n};\r\n\r\nmodule.exports = Numeric;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The Alignment class defines the alignment of content within the\r\n * sheet cells. The Alignment is assigned to a particular Style that\r\n * is registered in the Styles class.\r\n *\r\n * @constructor\r\n */\r\nfunction Alignment() {\r\n\tXMLNode.call(this, Alignment.metadata);\r\n}\r\n\r\nAlignment.prototype = Object.create(XMLNode.prototype);\r\nAlignment.prototype.constructor = Alignment;\r\n\r\nAlignment.metadata = {\r\n\ttag: 'alignment'\r\n};\r\n\r\nAlignment.horizontal = {\r\n\tLEFT: 'left',\r\n\tCENTER: 'center',\r\n\tRIGHT: 'right',\r\n\tcontains: function(sAlign) {\r\n\r\n\t\treturn _contains(sAlign, Alignment.horizontal);\r\n\t}\r\n};\r\n\r\nAlignment.vertical = {\r\n\tTOP: 'top',\r\n\tMIDDLE: 'middle',\r\n\tBOTTOM: 'bottom',\r\n\tcontains: function(sAlign) {\r\n\r\n\t\treturn _contains(sAlign, Alignment.vertical);\r\n\t}\r\n};\r\n\r\n/**\r\n * Checks whether the requested alignment is contained or not. An\r\n * alignment that is contained can be assigned within styles. Other\r\n * alignments that are not contained are not supported and thus not\r\n * assignable. It differentiates between horizontal and vertical\r\n * alignments, depending on the aggregation that was provided.\r\n *\r\n * @param {string} sAlign - The alignment that should be checked\r\n * @param {Array} oAggregation - The aggregation the alignment might be in\r\n * @returns {boolean} - Returns true if the alignment is supported\r\n * @private\r\n */\r\nfunction _contains(sAlign, oAggregation) {\r\n\tvar key, contained = false;\r\n\r\n\tfor (key in oAggregation) {\r\n\t\tcontained = contained ? contained : oAggregation[key] === sAlign && typeof oAggregation[key] !== 'function';\r\n\t}\r\n\r\n\treturn contained;\r\n}\r\n\r\nAlignment.prototype.isDefault = function() {\r\n\treturn this.attributes.length == 0;\r\n};\r\n\r\n/**\r\n * Assigns the given indent to this Alignment object.\r\n *\r\n * @param {number} nIndent - Numerical value used as indentation\r\n */\r\nAlignment.prototype.setIndent = function(nIndent) {\r\n\r\n\t/* Remove indent */\r\n\tif (typeof nIndent != 'number' || nIndent <= 0) {\r\n\t\tthis.remove('indent');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('indent', nIndent);\r\n\r\n\t/* A correct indent requires an explicit horizontal alignment */\r\n\tif (!this.horizontal) {\r\n\t\tthis.setHorizontalAlignment(Alignment.horizontal.LEFT);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Configures the wrapText attribute of the alignment which is used\r\n * for multiline text support.\r\n *\r\n * @param {boolean} bWrap - Defines if wrapping is enabled or disabled\r\n */\r\nAlignment.prototype.setWrapText = function(bWrap) {\r\n\tvar wrappingAttribute = 'wrapText';\r\n\r\n\r\n\tif (bWrap) {\r\n\t\tthis._setAlignmentAttribute(wrappingAttribute, '1');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (this[wrappingAttribute]) {\r\n\t\tthis.remove(wrappingAttribute);\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given alignment as horizontal alignment.\r\n *\r\n * @param {string} sAlign - Horizontal alignment that gets applied\r\n */\r\nAlignment.prototype.setHorizontalAlignment = function(sAlign) {\r\n\r\n\t/* Ignore invalid values */\r\n\tif (!Alignment.horizontal.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('horizontal', sAlign);\r\n};\r\n\r\n/**\r\n * Applies the given alignment as vertical alignment.\r\n *\r\n * @param {string} sAlign - Vertical alignment that gets applied\r\n */\r\nAlignment.prototype.setVerticalAlignment = function(sAlign) {\r\n\r\n\t/* Ignore invalid values */\r\n\tif (!Alignment.vertical.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('vertical', sAlign);\r\n};\r\n\r\n/**\r\n * Assigns the given value as a named property on this Alignment object.\r\n *\r\n * @param {string} sId - The named property id\r\n * @param {number|string} value - Textual or numerical value\r\n * @private\r\n */\r\nAlignment.prototype._setAlignmentAttribute = function(sId, value) {\r\n\r\n\t/* Create attribute if not present */\r\n\tif (!this[sId]) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: sId,\r\n\t\t\tname: sId\r\n\t\t});\r\n\t}\r\n\r\n\tthis[sId].value = value;\r\n};\r\n\r\n/**\r\n * Access the given alignment attribute and return its value. This is a shorthand\r\n * function to access the value without having to check for the existence of the\r\n * attribute itself.\r\n *\r\n * @param {string} sId - Alignment attribute that will be returned\r\n * @return {string|number} - value of the given alignment attribute\r\n * @private\r\n */\r\nAlignment.prototype._getAlignmentAttribute = function(sId) {\r\n\treturn this[sId] && this[sId].value;\r\n};\r\n\r\nAlignment.prototype.equals = function(oAlignment) {\r\n\treturn typeof oAlignment !== 'undefined' && oAlignment !== null\r\n\t\t&& this._getAlignmentAttribute('vertical') == oAlignment._getAlignmentAttribute('vertical')\r\n\t\t&& this._getAlignmentAttribute('horizontal') == oAlignment._getAlignmentAttribute('horizontal')\r\n\t\t&& this._getAlignmentAttribute('indent') == oAlignment._getAlignmentAttribute('indent')\r\n\t\t&& this._getAlignmentAttribute('wrapText') == oAlignment._getAlignmentAttribute('wrapText');\r\n};\r\n\r\nmodule.exports = Alignment;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n/**\r\n * The XMLElement is an abstract base class that can store a\r\n * particular value and escape XML specific characters.\r\n *\r\n * @param {Object} oConfig - Configuration object that contains the value of this XML Element\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction XMLElement(oConfig) {\r\n\tthis.value = oConfig && (oConfig.value || typeof oConfig.value === 'number') ? oConfig.value : '';\r\n}\r\n\r\n/**\r\n * Escapes the given String value to fulfill the requirements of\r\n * XML encoded characters. If the String does not contain any\r\n * character that needs to be encoded, the original String will\r\n * be returned.\r\n *\r\n * This significantly increases the performance because the\r\n * initial regular expression match is much faster than the\r\n * String replace function. We assume that only a few Strings\r\n * need to be encoded.\r\n *\r\n * The following characters need to be encoded:\r\n * < (lower than)\r\n * > (greater than)\r\n * \" (quotes)\r\n * & (ampersand)\r\n *\r\n * @param {string} sValue - The value that needs to be XML encoded\r\n * @returns {string} - XML encoded String\r\n */\r\nXMLElement.prototype.xmlEncode = function(sValue) {\r\n\treturn typeof sValue === 'string' && sValue.match(/[><\"&]+/) !== null ? this._replace(sValue) : sValue;\r\n};\r\n\r\n/**\r\n * @see _xmlEncode\r\n * @param {string} sValue - The string that contains characters that needs to be replaced\r\n * @returns {string} - XML encoded String\r\n * @private\r\n */\r\nXMLElement.prototype._replace = function(sValue) {\r\n\r\n\t/**\r\n\t * Perform ampersand replacement first to avoid encoding the\r\n\t * control ampersand of other encoded characters.\r\n\t *\r\n\t * i.E. >& should be encoded as &gt;&amp; instead of &amp;gt;&amp;\r\n\t */\r\n\treturn sValue\r\n\t\t.replace(/&/g, '&amp;')\r\n\t\t.replace(/</g, '&lt;')\r\n\t\t.replace(/>/g, '&gt;')\r\n\t\t.replace(/\"/g, '&quot;');\r\n};\r\n\r\nmodule.exports = XMLElement;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar\tXMLFile = __webpack_require__(1),\r\n\tXMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * @param {ReferenceNode} oReferenceNode - ReferenceNode object that is the root of this Relationships XMLFile\r\n * @constructor\r\n */\r\nfunction Relationships(oReferenceNode) {\r\n\tXMLFile.call(this, Relationships.metadata);\r\n\r\n\tif (oReferenceNode instanceof XMLFile) {\r\n\t\tthis.setFileName(oReferenceNode.getFileName() + '.rels');\r\n\t\tthis.setPath(oReferenceNode.getPath() + '_rels/');\r\n\t}\r\n}\r\n\r\nRelationships.prototype = Object.create(XMLFile.prototype);\r\nRelationships.prototype.constructor = Relationships;\r\n\r\nRelationships.metadata = {\r\n\tfilename: '.rels',\r\n\tpath: '_rels/',\r\n\ttag: 'Relationships',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: []\r\n};\r\n\r\n/**\r\n * Creates a new Relationship entry for the current collection.\r\n * The Relationship references are defined by the ISO/IEC 29500-1:2016 standard.\r\n *\r\n * @param {string} sTarget - Target file within the generated Excel\r\n * @param {string} sType - XMLNS reference of the targets file type\r\n * @returns {string} The newly created relationship id that can be referenced i.E. \"rId4\"\r\n */\r\nRelationships.prototype.addRelationship = function(sTarget, sType) {\r\n\tvar id = 'rId' + (this.childs.length + 1);\r\n\r\n\tthis.childs.push(new XMLNode({\r\n\t\ttag: 'Relationship',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Id',\r\n\t\t\t\tvalue: id\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Type',\r\n\t\t\t\tvalue: sType\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Target',\r\n\t\t\t\tvalue: sTarget\r\n\t\t\t}\r\n\t\t]\r\n\t}));\r\n\r\n\treturn id;\r\n};\r\n\r\nmodule.exports = Relationships;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t = __webpack_require__(1),\r\n\tRow\t\t\t = __webpack_require__(10);\r\n\r\n/**\r\n * This class represents a Sheet within an Office Open XML Spreadsheet.\r\n * @param {Object} oColumnConfiguration - ColumnConfiguration object that provides information about the columns\r\n * @constructor\r\n */\r\nfunction Sheet(oColumnConfiguration) {\r\n\tXMLFile.call(this, Sheet.metadata);\r\n\r\n\tObject.defineProperty(this, '_columns', {value: oColumnConfiguration, writable: false});\r\n\r\n\tthis._hierarchyProperty = oColumnConfiguration._hierarchyProperty;\r\n\tthis._hierarchyLevel = 0;\r\n\tthis._rowCount = 0;\r\n\tthis._createCols();\r\n\tthis._createHeader();\r\n}\r\n\r\nSheet.prototype = Object.create(XMLFile.prototype);\r\nSheet.prototype.constructor = Sheet;\r\n\r\nSheet.metadata = {\r\n\ttag: 'worksheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'sheetPr',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'outlinePr',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'summaryBelow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'dimension',\r\n\t\t\ttag: 'dimension',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'views',\r\n\t\t\ttag: 'sheetViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'defaultView',\r\n\t\t\t\t\ttag: 'sheetView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'workbookViewId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tproperties: [\r\n\r\n\t\t\t\t\t\t/* Freezes the header row */\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tid: 'pane',\r\n\t\t\t\t\t\t\ttag: 'pane',\r\n\t\t\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'ySplit',\r\n\t\t\t\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'topLeftCell',\r\n\t\t\t\t\t\t\t\t\tvalue: 'A2'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'activePane',\r\n\t\t\t\t\t\t\t\t\tvalue: 'bottomLeft'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'state',\r\n\t\t\t\t\t\t\t\t\tvalue: 'frozen'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\ttag: 'sheetFormatPr',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultRowHeight',\r\n\t\t\t\t\tvalue: '15'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'columns',\r\n\t\t\ttag: 'cols'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'data',\r\n\t\t\ttag: 'sheetData'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'filter',\r\n\t\t\ttag: 'autoFilter',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'pageMargins',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'left',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'right',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'top',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bottom',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'header',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'footer',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nSheet.MAX_ROWS = 1048576;\r\n\r\n/**\r\n * Creates the column specific information within the worksheet.\r\n * Column specific information is i.E. the width or the use of the\r\n * bestFit functionality.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createCols = function() {\r\n\tvar col, i, minWidth, width,\r\n\t\tautoFitButtonOffset = 2.4;\r\n\r\n\t/**\r\n\t * Inner function for calculating the column width. The function\r\n\t * will ceil the width to the next step of 0.25 so that the\r\n\t * result mod step is 0.\r\n\t * @param {number} nWidth - The width that needs to be adjusted\r\n\t * @returns {number}  A width rounded to the accuracy of 0.25\r\n\t */\r\n\tfunction roundWidth(nWidth) {\r\n\t\tvar factor, step;\r\n\r\n\t\tstep = 0.25;\r\n\t\tfactor = 1 / step;\r\n\r\n\t\treturn Math.ceil(nWidth * factor) / factor;\r\n\t}\r\n\r\n\tfor (i = 0; i < this._columns.size(); i++) {\r\n\t\tcol = this._columns.columns[i];\r\n\t\tminWidth = this._calculateColumnWidth(col.label.length) + autoFitButtonOffset;\r\n\t\twidth = roundWidth(Math.max(this._calculateColumnWidth(col.width), minWidth));\r\n\r\n\t\tthis.columns.addChild({\r\n\t\t\ttag: 'col',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'min',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'max',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bestFit',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'width',\r\n\t\t\t\t\tvalue: Math.max(width, minWidth)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'customWidth',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * This method calculates the optimal column width for the given\r\n * amount of characters. It removes the dependency on font size or\r\n * pixel width.\r\n *\r\n * @param {number} nCharacters - Amount of characters that should fit into the column\r\n * @return {number} Excel internal width value corresponding to the used font size\r\n * @private\r\n */\r\nSheet.prototype._calculateColumnWidth = function(nCharacters) {\r\n\tvar defaultFontSize = 11, // Needs to be adjusted once we support different font sizes\r\n\t\tdefaultPaddingAndBorder = 5,\r\n\t\tscaleFactor = 7.33;\r\n\r\n\tif (typeof nCharacters !== 'number') {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\treturn (((nCharacters * 2 / 3) * defaultFontSize) + defaultPaddingAndBorder) / scaleFactor;\r\n};\r\n\r\n/**\r\n * Sets the maximal hierarchy depth of this Sheet. The value will\r\n * only be changed if the given depth is higher than the previous\r\n * depth.\r\n *\r\n * @param {number} nHierarchyDepth - Numerical hierarchy depth\r\n * @private\r\n */\r\nSheet.prototype._setHierarchyDepth = function(nHierarchyDepth) {\r\n\r\n\t/* The maximum supported hierarchy depth is 7 */\r\n\tif (typeof nHierarchyDepth !== 'number' || nHierarchyDepth < 1 || nHierarchyDepth > 7) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!this.format.hierarchyDepth) {\r\n\t\tthis.format.addAttribute({\r\n\t\t\tid: 'hierarchyDepth',\r\n\t\t\tname: 'outlineLevelRow',\r\n\t\t\tvalue: nHierarchyDepth || 0\r\n\t\t});\r\n\t}\r\n\r\n\tthis.format.hierarchyDepth.value = Math.max(this.format.hierarchyDepth.value, nHierarchyDepth);\r\n};\r\n\r\n/**\r\n * Requests the header Row from the ColumnConfiguration and adds it to the\r\n * sheet.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createHeader = function() {\r\n\tvar headerRow = this._columns.getHeader();\r\n\r\n\tif (headerRow === null) {\r\n\t\tthis.remove('filter');\r\n\t\tthis.views.defaultView.remove('pane');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._appendRow(headerRow);\r\n};\r\n\r\n/**\r\n * Adds the specified Row to the sheetData element of this Sheet and\r\n * automatically propagates its row index to the row and its cells.\r\n *\r\n * @param {Object} oRow - The Row object that should be appended to the current Sheet\r\n * @private\r\n */\r\nSheet.prototype._appendRow = function(oRow) {\r\n\tvar dimension, sSerializedRow;\r\n\r\n\tthis._rowCount++;\r\n\toRow.setReference('' + (this._rowCount));\r\n\r\n\tsSerializedRow = oRow.serialize();\r\n\r\n\t/* Bundle two rows into one string */\r\n\tif (this._rowCount % 2 === 0) {\r\n\t\tsSerializedRow = this.data.childs.pop() + sSerializedRow;\r\n\t}\r\n\r\n\t/*\r\n\t * Serializing the rows would create concatenated strings that are represented by a binary\r\n\t * tree that references all substrings as leaves. This increases the memory usage massively.\r\n\t *\r\n\t * To avoid this string representation we need to convert the concatenated string to a\r\n\t * sequential string by using String#split and Array#join. This reduces memory consumption\r\n\t * and due to less Garbage Collection runs, also the runtime, although there is additional\r\n\t * effort to convert the strings.\r\n\t *\r\n\t * Additional information can be found here:\r\n\t * https://bugs.chromium.org/p/v8/issues/detail?id=2869\r\n\t */\r\n\tthis.data.childs.push((' ' + sSerializedRow).substr(1));\r\n\r\n\t/* Update sheet dimension */\r\n\tdimension = 'A1:' + Row.getColumnReferenceByIndex(this._columns.size() - 1) + this._rowCount;\r\n\r\n\tthis.dimension.reference.value = dimension;\r\n\r\n\tif (this.filter) {\r\n\t\tthis.filter.reference.value = dimension;\r\n\t}\r\n\r\n\r\n};\r\n\r\n/**\r\n * Creates a new group inside the sheet with the given hierarchy\r\n * level. All subsequent data rows will be assigned to this group.\r\n *\r\n * @function createGroup\r\n * @param {string} sName - Name of the group that will be displayed in the group header\r\n * @param {number} nLevel - Hierarchy level that will be used for outlining\r\n */\r\nSheet.prototype.createGroup = function(sName, nLevel) {\r\n\tvar groupHeaderRow;\r\n\r\n\tthis._hierarchyLevel = nLevel;\r\n\tgroupHeaderRow = this._columns.getGroupHeader(sName);\r\n\r\n\tthis._appendRow(groupHeaderRow);\r\n};\r\n\r\n/**\r\n * Requests a row from the ColumnConfiguration containing the given data\r\n * and adds it to the sheetData element of this Sheet.\r\n *\r\n * The maximum row limit is 1,048,576 but the user rather runs out of\r\n * memory than reaching this limit.\r\n *\r\n * @function insert\r\n * @param {Object} oData - Data object to be inserted\r\n */\r\nSheet.prototype.insert = function(oData) {\r\n\tvar nHierarchyLevel;\r\n\r\n\tif (this._rowCount >= Sheet.MAX_ROWS) {\r\n\t\tthrow new Error('Row limit reached.');\r\n\t}\r\n\r\n\tnHierarchyLevel =\r\n\t\tthis._columns.hierarchyLevelProperty ? oData[this._columns.hierarchyLevelProperty] : this._hierarchyLevel;\r\n\r\n\t/* Create row and apply binding */\r\n\tthis._appendRow(this._columns.bind(oData, nHierarchyLevel));\r\n\tthis._setHierarchyDepth(nHierarchyLevel);\r\n};\r\n\r\n/**\r\n * Cleanup hook that gets executed when the XMLFil#serialize function\r\n * is called with the finalize flag.\r\n *\r\n * @private\r\n */\r\nSheet.prototype.cleanup = function() {\r\n\tthis.remove('data');\r\n};\r\n\r\n/**\r\n * Returns the current row count of the Worksheet.\r\n *\r\n * @returns {number} - The amount of rows that are contained in this Worksheet\r\n *\r\n * @public\r\n */\r\nSheet.prototype.getRowCount = function() {\r\n\treturn this._rowCount;\r\n};\r\n\r\nmodule.exports = Sheet;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n * Created by Sebastian Bender on 16.03.2017.\r\n */\r\nvar XMLNode = __webpack_require__(0);\r\nvar Cell\t= __webpack_require__(3);\r\n\r\n/**\r\n * The Row is representing a single row according to the Office Open\r\n * XML standard. A Row provides information about its index (line\r\n * number) and can contain several Cell objects.\r\n *\r\n * @class\r\n */\r\nfunction Row() {\r\n\tXMLNode.call(this, Row.metadata);\r\n}\r\n\r\nRow.prototype = Object.create(XMLNode.prototype);\r\nRow.prototype.constructor = Row;\r\n\r\nRow.metadata = {\r\n\ttag: 'row',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'spans',\r\n\t\t\tname: 'spans',\r\n\t\t\tvalue: '1:1'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Calculates the Office Open XML Spreadsheet column reference for a\r\n * numeric value. Referring to the standard, the column is described\r\n * as a alphabetical value consisting of at least one uppercase character.\r\n * This function maps these alphabetical representation to numerical\r\n * zero-based indices.\r\n *\r\n * i.E. the column index 27 (which is the 28th column) results in 'AB'\r\n *\r\n * @param {number} nIndex - Numerical index for the requested column\r\n * @returns {string} - The alphabetical column reference for the given index.\r\n */\r\nRow.getColumnReferenceByIndex = function(nIndex) {\r\n\treturn nIndex < 26 ?\r\n\t\tString.fromCharCode(65 + nIndex) :\r\n\t\tRow.getColumnReferenceByIndex(Math.floor(nIndex / 26) - 1) + String.fromCharCode(65 + (nIndex % 26));\r\n};\r\n\r\n\r\n/**\r\n * Update the 'spans' attribute on this particular {@link Row} for\r\n * optimization purposes. This property optimizes the loading and\r\n * rendering in Microsoft Excel.\r\n *\r\n * @private\r\n */\r\nRow.prototype._updateSpans = function() {\r\n\tthis.spans.value = '1:' + this.childs.length;\r\n};\r\n\r\n/**\r\n * Adds the specified {@link Cell} to the current {@link Row}. If the\r\n * current row already has a reference or style, it will propagate\r\n * this information to the newly added Cell.\r\n *\r\n * @param {object} oCell - Instance of Excel.objects.Cell\r\n */\r\nRow.prototype.addCell = function(oCell) {\r\n\tvar count;\r\n\r\n\tif (!oCell || !(oCell instanceof Cell)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tcount = this.childs.push(oCell);\r\n\tthis._updateSpans();\r\n\r\n\t/* Applies the cell reference if row reference is already present */\r\n\tif (this.reference.value) {\r\n\t\toCell.setReference(Row.getColumnReferenceByIndex(count - 1) + this.reference.value);\r\n\t}\r\n\r\n\tif (this.style) {\r\n\t\toCell.setStyle(this.style.value);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Updates the reference of the current {@link Row}. The Row reference\r\n * represents the line number within the Sheet. It will\r\n * automatically update all assigned Cell references.\r\n *\r\n * @param {string} sReference - Row number within the sheet\r\n */\r\nRow.prototype.setReference = function(sReference) {\r\n\tvar i, reference;\r\n\r\n\treference = typeof sReference == 'number' ? String(sReference) : sReference;\r\n\tif (!reference || !reference.match(/^[1-9]+[0-9]*$/g)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/* Only update if necessary */\r\n\tif (this.reference.value != reference) {\r\n\t\tthis.reference.value = reference;\r\n\t\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\t\tthis.childs[i].setReference(Row.getColumnReferenceByIndex(i) + reference);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given {@link Style} to the current {@link Row}.\r\n *\r\n * @param {(number|string)} nStyle - A number or string representing the Style id\r\n */\r\nRow.prototype.setStyle = function(nStyle) {\r\n\tvar i, style;\r\n\r\n\tif (!this.style) {\r\n\t\tstyle = this.addAttribute({name: 's'});\r\n\t\tObject.defineProperty(this, 'style', {value: style});\r\n\t}\r\n\r\n\tthis.style.value = nStyle;\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tthis.childs[i].setStyle(nStyle);\r\n\t}\r\n};\r\n\r\nmodule.exports = Row;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\nvar Currency = __webpack_require__(4);\r\nvar Alignment = __webpack_require__(6);\r\n\r\n/**\r\n * The BigNumber class represents string formatted number with\r\n * specific formatting. It provides font and sizing details that\r\n * can be used by the Styles class.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this BigNumber type\r\n * @constructor\r\n */\r\nfunction BigNumber(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.displayUnit = oConfig && typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\r\n\tthis.unit = oConfig ? oConfig.unit : null;\r\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\r\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\r\n\tthis.scale = oConfig ? oConfig.scale : null;\r\n\r\n\t/**\r\n\t * Due to default text alignment LTR, we need to invert the\r\n\t * alignment so that it reflects the default number alignment\r\n\t */\r\n\tthis.alignment = this.alignment === null ? Alignment.horizontal.RIGHT : Alignment.horizontal.LEFT;\r\n}\r\n\r\nBigNumber.prototype = Object.create(Type.prototype);\r\nBigNumber.prototype.constructor = BigNumber;\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. If a template is configured, it will automatically fill\r\n * the template with the values from the business object and returns\r\n * the processed string.\r\n *\r\n * @param {string} property - Name of the property that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean|null} - The value of the given property after type specific processing.\r\n * Returns null if no value is present or the value cannot be processed by this type.\r\n */\r\nBigNumber.prototype.getValue = function(property, oData) {\r\n\tvar iScale, sResult, sUnit, sValue;\r\n\r\n\tsValue = oData[property];\r\n\r\n\t/* Convert number to string for BigNumber conversion */\r\n\tif (typeof sValue == 'number') {\r\n\t\tsValue = sValue.toString();\r\n\t}\r\n\r\n\t/* The value must be passed as a string containing only numerical characters with an optional decimal separator */\r\n\tif (typeof sValue != 'string' || !sValue.match(/^(-){0,1}[0-9]+(\\.[0-9]+)*$/g)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsUnit = oData[this.unitProperty] || this.unit;\r\n\r\n\t/* Apply fixed scale, only if no unitProperty is provided */\r\n\tif (!this.unitProperty && typeof this.scale === 'number') {\r\n\t\tiScale = this.scale;\r\n\t} else if (this.unitProperty) {\r\n\t\tiScale = Currency.getCurrencyScale(sUnit);\r\n\t}\r\n\r\n\tsResult = this._parseValue(sValue, iScale, this.delimiter);\r\n\r\n\tif (this.displayUnit) {\r\n\t\tsResult += (sUnit ? ' ' + sUnit : '');\r\n\t}\r\n\r\n\treturn sResult;\r\n};\r\n\r\n/**\r\n * Parses a string representation of a numeric value according to the given requirements.\r\n *\r\n * @param {string} sValue - String representation of a numeric value\r\n * @param {number|null} [iScale] - Defines the scale of the numeric value ( >= 0)\r\n * @param {boolean} [bDelimiter] - Defines if thousand delimiters should be visible in the output\r\n * @returns {string} - Parsed representation\r\n * @private\r\n */\r\nBigNumber.prototype._parseValue = function(sValue, iScale, bDelimiter) {\r\n\tvar aSplitted, aInteger, i, sDecimal, sInteger, sSign;\r\n\r\n\taSplitted = sValue.split('.');\r\n\tsInteger = aSplitted[0];\r\n\tsDecimal = aSplitted.length > 1 ? aSplitted[1] : '';\r\n\r\n\t/* Add thousand delimiter to the integer value */\r\n\tif (bDelimiter) {\r\n\r\n\t\t/* Remove sign before inserting the delimiter */\r\n\t\taInteger = sInteger.split('');\r\n\t\tsSign = aInteger[0] === '-' ? aInteger.shift() : '';\r\n\r\n\t\tsInteger = sSign + aInteger.reduceRight(function(accumulator, currentValue) {\r\n\t\t\treturn currentValue + (accumulator.length % 4 == 3 ? ',' + accumulator : accumulator);\r\n\t\t}, '');\r\n\t}\r\n\r\n\tif (typeof iScale === 'number') {\r\n\t\tif (iScale < sDecimal.length) {\r\n\t\t\tsDecimal = sDecimal.substring(0, iScale);\r\n\t\t} else {\r\n\t\t\tfor (i = sDecimal.length; i < iScale; i++) {\r\n\t\t\t\tsDecimal += '0';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn sInteger + (sDecimal ? '.' + sDecimal : '');\r\n};\r\n\r\nmodule.exports = BigNumber;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n/**\r\n * The CurrencySettings static object represents settings for the currency data type.\r\n * It provides digits for a specific currency and the default scale.\r\n */\r\nvar CurrencySettings = {};\r\n\r\n/**\r\n * Update the default currency setting with customization.\r\n *\r\n * @param {Object} oConfig - A configuration object that is used to specify the currency settings.\r\n * @param {string} oConfig.defaultScale - A custom settings object that will be used for defining the default scale.\r\n * @param {string} oConfig.customCurrencies - A custom settings object that will be used for defining currency digits.\r\n * @public\r\n * @static\r\n */\r\nCurrencySettings.update = function(oConfig) {\r\n\tvar sCurrency;\r\n\r\n\tif (oConfig) {\r\n\t\t// Update default scale\r\n\t\tif (typeof oConfig.defaultScale === 'number') {\r\n\t\t\tCurrencySettings.DEFAULT_SCALE = oConfig.defaultScale;\r\n\t\t}\r\n\t\t// Update custom currencies\r\n\t\tif (oConfig.customCurrencies) {\r\n\t\t\tfor (sCurrency in oConfig.customCurrencies) {\r\n\t\t\t\tCurrencySettings.DIGITS[sCurrency] = oConfig.customCurrencies[sCurrency].digits;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Defines the display default scale that is used for alignment. This has no effect on the technical scale of currency\r\n * values. It is only used for alignment purposes so that different currencies with different scale are still aligned\r\n * correctly.\r\n *\r\n * @type {number}\r\n */\r\nCurrencySettings.DEFAULT_SCALE = 3;\r\n\r\nCurrencySettings.DIGITS = {\r\n\t'ADP': 0,\r\n\t'AFN': 0,\r\n\t'ALL': 0,\r\n\t'BHD': 3,\r\n\t'BIF': 0,\r\n\t'BYR': 0,\r\n\t'CLF': 4,\r\n\t'CLP': 0,\r\n\t'DEFAULT': 2,\r\n\t'DJF': 0,\r\n\t'ESP': 0,\r\n\t'GNF': 0,\r\n\t'HUF': 0,\r\n\t'IQD': 0,\r\n\t'IRR': 0,\r\n\t'ISK': 0,\r\n\t'ITL': 0,\r\n\t'JOD': 3,\r\n\t'JPY': 0,\r\n\t'KMF': 0,\r\n\t'KPW': 0,\r\n\t'KRW': 0,\r\n\t'KWD': 3,\r\n\t'LAK': 0,\r\n\t'LBP': 0,\r\n\t'LUF': 0,\r\n\t'LYD': 3,\r\n\t'MGA': 0,\r\n\t'MGF': 0,\r\n\t'MMK': 0,\r\n\t'MRO': 0,\r\n\t'OMR': 3,\r\n\t'PYG': 0,\r\n\t'RSD': 0,\r\n\t'RWF': 0,\r\n\t'SLL': 0,\r\n\t'SOS': 0,\r\n\t'STD': 0,\r\n\t'SYP': 0,\r\n\t'TMM': 0,\r\n\t'TND': 3,\r\n\t'TRL': 0,\r\n\t'TWD': 0,\r\n\t'UGX': 0,\r\n\t'UYI': 0,\r\n\t'UYW': 4,\r\n\t'VND': 0,\r\n\t'VUV': 0,\r\n\t'XAF': 0,\r\n\t'XOF': 0,\r\n\t'XPF': 0,\r\n\t'YER': 0,\r\n\t'ZMK': 0,\r\n\t'ZWD': 0\r\n};\r\n\r\nmodule.exports = CurrencySettings;\r\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\n\r\n/**\r\n * The CalendarDate class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] - A configuration object that is used to specify the formatting\r\n * @param {string} [oConfig.type] - The specific type for this CalendarDate (i.E. date, datetime, time)\r\n * @param {string} [oConfig.format] - A custom format string that will be used as template\r\n * @param {string} [oConfig.calendar] - Specifies the calendar that will be used (default: gregorian)\r\n * @param {string} [oConfig.inputFormat] - Specifies the format of the string formatted date value (uppercase YYYYMMDD)\r\n * @constructor\r\n */\r\nfunction CalendarDate(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.type = oConfig && typeof oConfig.type === 'string' ? oConfig.type.toLowerCase() : null;\r\n\tthis.format = oConfig ? oConfig.format : null;\r\n\tthis.calendar = oConfig ? oConfig.calendar : null;\r\n\tthis.inputFormat = oConfig && typeof oConfig.inputFormat == 'string' ? oConfig.inputFormat.toUpperCase() : null;\r\n}\r\n\r\nCalendarDate.prototype = Object.create(Type.prototype);\r\nCalendarDate.prototype.constructor = CalendarDate;\r\n\r\nCalendarDate.DEFAULT = {\r\n\tnumberFormat: 14\r\n};\r\n\r\nCalendarDate.builtin = {\r\n\t14: 'mm-dd-yy',\r\n\t15: 'd-mmm-yy',\r\n\t16: 'd-mmm',\r\n\t17: 'mmm-yy',\r\n\t18: 'h:mm AM/PM',\r\n\t19: 'h:mm:ss AM/PM',\r\n\t20: 'h:mm',\r\n\t21: 'h:mm:ss',\r\n\t22: 'm/d/yy h:mm',\r\n\t45: 'mm:ss',\r\n\t46: '[h]:mm:ss',\r\n\t47: 'mmss.0'\r\n};\r\n\r\nCalendarDate.oSymbols = {\r\n\t'Y': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCFullYear(sValue);\r\n\t\t}\r\n\t},\r\n\t'M': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCMonth(sValue - 1);\r\n\t\t}\r\n\t},\r\n\t'D': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCDate(sValue);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Creates the Style configuration object for this CalendarDate\r\n * according to its configuration.\r\n *\r\n * @return {Object} - Style descriptor object\r\n * @protected\r\n */\r\nCalendarDate.prototype._createConfiguration = function() {\r\n\tvar config, key, template;\r\n\r\n\tconfig = Object.getPrototypeOf(CalendarDate.prototype)._createConfiguration.call(this);\r\n\r\n\tif (!this.type && !this.format && !this.calendar) {\r\n\t\tconfig.numberFormat = CalendarDate.DEFAULT.numberFormat;\r\n\r\n\t\treturn config;\r\n\t}\r\n\r\n\t/* Evaluate type */\r\n\tswitch (this.type) {\r\n\t\tcase 'datetime':\r\n\t\t\ttemplate = CalendarDate.builtin[22];\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\ttemplate = CalendarDate.builtin[21];\r\n\t\t\tbreak;\r\n\t\tdefault: // Assume 'date' as default\r\n\t\t\ttemplate = CalendarDate.builtin[14];\r\n\t}\r\n\r\n\tif (typeof this.format === 'string') {\r\n\t\ttemplate = this.format.match(/^[dhmsy\\s-,.:/]+(AM\\/PM)?$/) ? this.format : template;\r\n\t}\r\n\r\n\t/* Evaluate calendar */\r\n\tswitch (this.calendar) {\r\n\t\tcase 'islamic':\r\n\t\t\ttemplate = 'b2d mmmm yyyy';\r\n\t\t\tbreak;\r\n\t\tcase 'japanese':\r\n\t\t\ttemplate = '[$-ja-JP]ge.m.d';\r\n\t\t\tbreak;\r\n\t\tdefault: // Gregorian calendar is the default case\r\n\t}\r\n\r\n\tconfig.numberFormat = {\r\n\t\tformat: template\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in CalendarDate.builtin) {\r\n\t\tif (CalendarDate.builtin[key] === template) {\r\n\t\t\tconfig.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the value of the given property that is assigned in the line item.\r\n *\r\n * @param {string} sProperty - Name of the property that contains the value\r\n * @param {Object} oData - Line item that contains data\r\n * @return {number|null} - XLSX specific date/time format in days since 30.12.1899\r\n */\r\nCalendarDate.prototype.getValue = function(sProperty, oData) {\r\n\tvar nTimestamp, value;\r\n\r\n\tvalue = oData[sProperty];\r\n\r\n\tif (value === null || typeof value === 'undefined' || value === '') {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/* Date or String, Number wrapper */\r\n\tif (typeof value === 'object') {\r\n\t\tvalue = value.valueOf();\r\n\t}\r\n\r\n\t/* 1. Unix timestamp as number */\r\n\tif (typeof value === 'number') {\r\n\t\tnTimestamp = value;\r\n\t}\r\n\r\n\t/* 2. String based time representation */\r\n\tif (typeof value === 'string') {\r\n\t\tnTimestamp = this._parseStringValue(value);\r\n\t}\r\n\r\n\treturn typeof nTimestamp === 'number' ? CalendarDate._JsDateToExcel(nTimestamp, this.type === 'time') : null;\r\n};\r\n\r\n/**\r\n * Converts a textual date/time representation to a numeric timestamp.\r\n *\r\n * @param {string} sValue - String representation of the date/time\r\n * @return {number|null} - Numeric timestamp\r\n * @private\r\n */\r\nCalendarDate.prototype._parseStringValue = function(sValue) {\r\n\tvar bTimeOnly = this.type === 'time';\r\n\r\n\t/* 1. OData Edm.TimeOfDay */\r\n\tif (bTimeOnly && CalendarDate.timeOfDayRegex.test(sValue)) {\r\n\t\treturn CalendarDate._parseTimeOfDay(sValue);\r\n\t}\r\n\r\n\t/* 2. OData duration string 'PT01H23M45S' */\r\n\tif (bTimeOnly && CalendarDate.odataDurationRegex.test(sValue)) {\r\n\t\treturn CalendarDate._parseODataDuration(sValue);\r\n\t}\r\n\r\n\t/* 3. Pattern formatted date string */\r\n\tif (this.inputFormat && typeof this.inputFormat === 'string') {\r\n\t\treturn CalendarDate._parseStringDate(sValue, this.inputFormat);\r\n\t}\r\n\r\n\t/* 4. OData date string '/Date(1234567890)/' */\r\n\tif (CalendarDate.odataDateRegex.test(sValue)) {\r\n\t\treturn CalendarDate._parseOdataDate(sValue);\r\n\t}\r\n\r\n\t/* 5. DateTimeOffset representation 1986-04-13T01:08:00.000+01:00 */\r\n\tif (CalendarDate.odataDateTimeOffsetRegex.test(sValue)) {\r\n\t\treturn Date.parse(sValue);\r\n\t}\r\n\r\n\t/* 6. Unix timestamp as string */\r\n\tif (typeof nTimestamp !== 'number' && isFinite(sValue)) {\r\n\t\treturn parseInt(sValue, 10);\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\n/** START Copied and adapted from datajs **/\r\n/**\r\n * Extracts the milliseconds if the value is a date/time instance or formatted string.\r\n *\r\n * @param {any} vValue the value (may be <code>undefined</code> or <code>null</code>)\r\n * @return {any} the number of milliseconds or the value itself\r\n */\r\nCalendarDate._parseODataDuration = function(vValue) {\r\n\tvar parts, days, hours, minutes, seconds, ms;\r\n\t// / <summary>Parses a string in xsd:duration format.</summary>\r\n\t// / <param name=\"duration\" type=\"String\">Duration value.</param>\r\n\t// / <remarks>\r\n\t// / This method will return the input, if the input string has a year or a month component.\r\n\t// / </remarks>\r\n\t// / <returns type=\"Object\">Object representing the time</returns>\r\n\r\n\tparts = CalendarDate.odataDurationRegex.exec(vValue);\r\n\r\n\t// Unsupported duration value for Edm.Time OData spec (if year of month is present)\r\n\t/* EDITED\r\n\tif (parts[2] || parts[3]) {\r\n\t\treturn vValue;\r\n\t}\r\n\t */\r\n\r\n\tdays = parseInt(parts[4] || 0, 10);\r\n\thours = parseInt(parts[5] || 0, 10);\r\n\tminutes = parseInt(parts[6] || 0, 10);\r\n\tseconds = parseFloat(parts[7] || 0);\r\n\r\n\tms = parts[8];\r\n\tif (ms) {\r\n\t\t// Parse ms duration value ignoring any precision/scale as that part is anyway ignored by JS Date conversion!\r\n\t\tms = parseFloat('0.' + ms) * 1000;\r\n\t} else {\r\n\t\tms = 0;\r\n\t}\r\n\r\n\tms += (seconds * 1000) + (minutes * 60000) + (hours * 3600000) + (days * 86400000);\r\n\r\n\tif (parts[1] === '-') {\r\n\t\tms = -ms;\r\n\t}\r\n\r\n\treturn ms;\r\n};\r\n\r\nCalendarDate._parseTimeOfDay = function(vValue) {\r\n\tvar parts, hours, minutes, seconds;\r\n\tvar date = new Date(0);\r\n\r\n\tparts = CalendarDate.timeOfDayRegex.exec(vValue);\r\n\thours = parseInt(parts[1] || 0, 10);\r\n\tminutes = parseInt(parts[2] || 0, 10);\r\n\tseconds = parseFloat(parts[3] || 0);\r\n\tdate.setUTCHours(hours, minutes, seconds);\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\n/**\r\n * Parses an OData date string and returns the corresponding timestamp\r\n *\r\n * @param {string} sValue - OData date string i.E. \"/Date(1524141637807)/\"\r\n * @return {number} - Unix timestamp according to OData date including offset\r\n * @private\r\n */\r\nCalendarDate._parseOdataDate = function(sValue) {\r\n\tvar matchArray, date, offset;\r\n\r\n\t/* The RegExp matches up to 4 groups:\r\n\t\t * 0: Full match\r\n\t\t * 1: Timestamp (mandatory)\r\n\t\t * 2: Timezone offset sign [ + | - ] (optional)\r\n\t\t * 3: Timezone offset minutes [0-9]{2,3} (optional)\r\n\t\t */\r\n\tmatchArray = CalendarDate.odataDateRegex.exec(sValue);\r\n\tdate = new Date(parseInt(matchArray[1], 10));\r\n\r\n\tif (matchArray[2] && matchArray[3]) {\r\n\t\toffset = parseInt(matchArray[2] + matchArray[3], 10);\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - offset);\r\n\t}\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\n/* The regular expression corresponds to something like this:\r\n * /Date(123+60)/\r\n *\r\n * This first number is date ticks, the + may be a - and is optional,\r\n * with the second number indicating a timezone offset in minutes.\r\n *\r\n * On the wire, the leading and trailing forward slashes are\r\n * escaped without being required to so the chance of collisions is reduced;\r\n * however, by the time we see the objects, the characters already\r\n * look like regular forward slashes.\r\n*/\r\nCalendarDate.odataDateRegex = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\r\n\r\n// The captured indices for this expression are:\r\n// 0       - complete input\r\n// 1       - direction\r\n// 2,3,4   - years, months, days\r\n// 5,6,7,8 - hours, minutes, seconds, milliseconds\r\nCalendarDate.odataDurationRegex =\r\n\t/^([+-])?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(?:\\.(\\d+))?S)?)?/;\r\n\r\n/** END Copied and adapted from datajs */\r\n\r\nCalendarDate.odataDateTimeOffsetRegex = /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2]\\d|3[0-1])T([0-1]\\d|2[0-3])(:[0-5]\\d){2}(\\.\\d{1,3})?(Z|[+\\-](0\\d|1[0-2]):[0-5]\\d)/;\r\n\r\nCalendarDate.dateStringRegex = /([Y]{4,}|[M]{2}|[D]{2})/g;\r\n\r\nCalendarDate.timeOfDayRegex = /^([0-1]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)/;\r\n\r\n/**\r\n * Converts a JavaScript Date timestamp to an Office Open XML date\r\n * representation. Office Open XML date epoch starts at 00.01.1900\r\n * which is 31.12.1899 and is represented as a number of days since\r\n * beginning of the epoch.\r\n *\r\n * The Javascript Date epoch starts at 01.01.1970 and is represented\r\n * as a number of milliseconds before or after the beginning of the\r\n * epoch.\r\n *\r\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\r\n * 25567. According to the wrong offset in Excel (00.01.1900 instead\r\n * of 01.01.1900) and the known leap year bug in Excel, we need to\r\n * add two additional days.\r\n *\r\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\r\n *\r\n * Time specific information is represented as fraction. This means\r\n * that the value 30.5 represents 30.5 days after the 31.12.1899\r\n * where .5 stands for half a day. A day is defined as 24 hours, so\r\n * half a day means 12 hours since the beginning of the day at\r\n * 00:00:00. If the integer part of the value is greater than 0\r\n * date specific information will be present in the cell.\r\n *\r\n * This also applies for time formatted cells. Although the cell\r\n * only displays the time specific part, the editing bar still\r\n * shows the date specific part. Therefore it is necessary to be\r\n * able to remove the date specific part from the value in the\r\n * XLSX file.\r\n *\r\n *\r\n * @param {number} nTimestamp - JavaScript Date timestamp\r\n * @param {boolean} [bTimeOnly] - Defines whether the date specific part should be kept or removed\r\n * @return {number} - Amount of days since 31.12.1899\r\n * @private\r\n */\r\nCalendarDate._JsDateToExcel = function(nTimestamp, bTimeOnly) {\r\n\tvar offset, nExcelValue;\r\n\r\n\t/* Increase the offset if date is after February 28th 1900 */\r\n\toffset = nTimestamp >= -2203891200000 ? 2 : 1;\r\n\r\n\t/**\r\n\t * Fallback if date is before UTC 31.12.1899 00:00:00\r\n\t * which corresponds to 0 in Excel\r\n\t */\r\n\tnExcelValue = Math.max((nTimestamp / (86400 * 1000)) + (25567 + offset), 0);\r\n\r\n\t/* Remove date specific part in case of type time */\r\n\tif (bTimeOnly) {\r\n\t\tnExcelValue = nExcelValue % 1;\r\n\t}\r\n\r\n\treturn nExcelValue;\r\n};\r\n\r\n/**\r\n * The method parses a given string value according to the provided\r\n * date pattern.\r\n *\r\n * Limitations:\r\n * Currently only the symbols d, m, y are supported which correspond\r\n * to day, month, year.\r\n *\r\n * @param {string} sValue - Date formatted string\r\n * @param {string} sPattern - ISO 8601 pattern that gets applied\r\n * @return {number|null} - UNIX timestamp that represents the parsed date string\r\n * @private\r\n */\r\nCalendarDate._parseStringDate = function(sValue, sPattern) {\r\n\tvar matchArray, date, substring;\r\n\r\n\tdate = new Date(0);\r\n\r\n\tdo {\r\n\t\tmatchArray = CalendarDate.dateStringRegex.exec(sPattern);\r\n\r\n\t\tif (matchArray !== null) {\r\n\t\t\tsubstring = sValue.slice(matchArray.index, matchArray.index + matchArray[0].length);\r\n\r\n\t\t\tCalendarDate.oSymbols[matchArray[0].charAt(0)].apply(parseInt(substring, 10), date);\r\n\t\t}\r\n\t} while (matchArray !== null);\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\nmodule.exports = CalendarDate;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\n\r\n/**\r\n * The BooleanType class represents a boolean data type. BooleanType\r\n * data can work in two different ways. The first way is the Office\r\n * Open XML Spreadsheet built-in type that always shows TRUE/FALSE in\r\n * the users locale. This value can easily be used within formulas.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {string} [oConfig.trueValue] - Contains the value that gets displayed if the Boolean is true\r\n * @param {string} [oConfig.falseValue] - Contains the value that gets displayed if the Boolean is false\r\n * @constructor\r\n */\r\nfunction BooleanType(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.trueValue = oConfig ? oConfig.trueValue : null;\r\n\tthis.falseValue = oConfig ? oConfig.falseValue : null;\r\n}\r\n\r\nBooleanType.prototype = Object.create(Type.prototype);\r\nBooleanType.prototype.constructor = BooleanType;\r\n\r\nBooleanType.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\n/**\r\n * This method indicates if the properties trueValue and falseValue\r\n * are configured correctly and the BooleanType supports a custom\r\n * format.\r\n *\r\n * @returns {boolean} - Whether to use a custom formatted BooleanType or the built-in type.\r\n */\r\nBooleanType.prototype.isCustomFormatted = function() {\r\n\treturn !!this.trueValue\r\n\t\t&& typeof this.trueValue === 'string'\r\n\t\t&& !!this.falseValue\r\n\t\t&& typeof this.falseValue === 'string';\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @protected\r\n */\r\nBooleanType.prototype._createConfiguration = function() {\r\n\tvar config;\r\n\r\n\tconfig = Object.getPrototypeOf(BooleanType.prototype)._createConfiguration.call(this);\r\n\tconfig.numberFormat =\r\n\t\tthis.isCustomFormatted() ?\r\n\t\t\t{ format: '\"' + this.trueValue + '\";;\"' + this.falseValue + '\"' } : BooleanType.DEFAULT.numberFormat;\r\n\r\n\treturn config;\r\n};\r\n\r\nmodule.exports = BooleanType;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\nvar Alignment = __webpack_require__(6);\r\n\r\n/**\r\n * The Text class represents textual information without any\r\n * particular formatting. It provides font and sizing details that\r\n * can be used by the Styles class.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this Text type\r\n * @param {Object} [oConfig.font] - Font configuration object\r\n * @param {number} [oConfig.font.size] - Font size\r\n * @param {string} [oConfig.font.name] - Font name i.E. Arial, Verdana, etc.\r\n * @param {Object} [oConfig.fill] - Cell fill configuration object\r\n * @param {string} [oConfig.fill.color] - Cell fill background color\r\n * @param {string} [oConfig.fill.type] - Cell fill type\r\n * @param {string} [oConfig.template] - Text template for this Type\r\n * @param {string} [oConfig.hierarchyLevel] - Property name that is used for hierarchy level indentation\r\n * @param {boolean} [oConfig.wrap] - Indicates the wrapping behavior of the text cell\r\n * @param {string} [oConfig.inputFormat] - Regular expresion that will be used to identify specific parts of the single property value and further process it with a template\r\n * @constructor\r\n */\r\nfunction Text(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.font = oConfig ? oConfig.font : null;\r\n\tthis.fill = oConfig ? oConfig.fill : null;\r\n\tthis.template = oConfig ? oConfig.template : null;\r\n\tthis.hierarchyLevel = oConfig ? oConfig.hierarchyLevel : null;\r\n\tthis.wrap = oConfig ? oConfig.wrap : false;\r\n\tthis.inputFormat = oConfig ? oConfig.inputFormat : null;\r\n\r\n\tthis._mStyleIds = {};\r\n}\r\n\r\nText.prototype = Object.create(Type.prototype);\r\nText.prototype.constructor = Text;\r\n\r\nText.DEFAULT = {\r\n\tfont: {\r\n\t\tsize: 11,\r\n\t\tname: 'Arial'\r\n\t}\r\n};\r\n\r\nText.formulaRegex = /^[\\s]*[=+\\-@]/;\r\n\r\n/**\r\n * Ensures that all line breaks use CR + LF.\r\n *\r\n * @param {string} sValue - Text that may contain line breaks\r\n * @return {string} - Initial text with replaced line breaks\r\n */\r\nText.convertLineBreaks = function(sValue) {\r\n\tvar compliantLineBreak = String.fromCharCode(13, 10);\r\n\r\n\treturn sValue.replace(/\\r/g, '').replace(/\\n/g, compliantLineBreak);\r\n};\r\n\r\n/**\r\n * This method creates the XLSX specific style configuration depending on the cell content\r\n *\r\n * @param {Object} oData - Line item that will be used to evaluate the cell content\r\n * @returns {Object} - Style configuration used by the Styles class\r\n * @protected\r\n */\r\nText.prototype._createConfiguration = function(oData) {\r\n\tvar config;\r\n\r\n\tconfig = Object.getPrototypeOf(Text.prototype)._createConfiguration.call(this);\r\n\tconfig.fill = this.fill;\r\n\tconfig.font = this.font;\r\n\r\n\t/* Overwrites existing alignment for a proper indent */\r\n\tif (this.hierarchyLevel) {\r\n\t\tconfig.align = {\r\n\t\t\thorizontal: Alignment.horizontal.LEFT,\r\n\t\t\tindent: 2 * oData[this.hierarchyLevel]\r\n\t\t};\r\n\t}\r\n\r\n\t/* Wrapping can be applied on hierarchies with indentation */\r\n\tif (this.wrap) {\r\n\t\tconfig.align = config.align || {};\r\n\r\n\t\tconfig.align.wrap = this.wrap;\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for hierarchy levels\r\n * @param {string|number} [sValue] - Explicit cell value that might be used for semantic formatting\r\n * @returns {number} - ID of the registered Style\r\n */\r\nText.prototype.getStyleId = function(oData, sValue) {\r\n\tvar bRequiresPrefix, sIdentifier, oConfig;\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tbRequiresPrefix = sValue && Text.formulaRegex.test(sValue);\r\n\r\n\t/* Handle simple styling without hierarchy information or prefix */\r\n\tif (!this.hierarchyLevel && !bRequiresPrefix) {\r\n\t\treturn Object.getPrototypeOf(Text.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\t/* Create local identifier to differentiate between cached styleIds */\r\n\tsIdentifier = 'id_' + oData[this.hierarchyLevel] + (bRequiresPrefix ? '_prefix' : '');\r\n\r\n\tif (typeof this._mStyleIds[sIdentifier] === 'undefined') {\r\n\t\toConfig = this._createConfiguration(oData);\r\n\t\toConfig.quotePrefix = bRequiresPrefix;\r\n\t\tthis._mStyleIds[sIdentifier] = this.styles.addStyle(oConfig);\r\n\t}\r\n\r\n\treturn this._mStyleIds[sIdentifier];\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. If a template is configured, it will automatically fill\r\n * the template with the values from the business object and returns\r\n * the processed string.\r\n *\r\n * @param {string|Array} properties - Name of the property or array of properties that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nText.prototype.getValue = function(properties, oData) {\r\n\tvar aMatch, reRegEx, sResult, bSkip, sValue, aValues, aInputMatch;\r\n\r\n\tif (!this.template) {\r\n\t\tsValue = typeof properties === 'string' ? oData[properties] : oData[properties[0]];\r\n\r\n\t\tsValue = this.wrap ? Text.convertLineBreaks(sValue) : sValue;\r\n\r\n\t\treturn sValue;\r\n\t}\r\n\r\n\tif (typeof this.inputFormat === 'string') {\r\n\t\taInputMatch = new RegExp(this.inputFormat).exec(oData[properties]);\r\n\r\n\t\t/* Keeps the initial value in case the input does not match the regex pattern */\r\n\t\taValues = Array.isArray(aInputMatch) ? aInputMatch.slice(1) : [oData[properties]];\r\n\t} else {\r\n\t\taValues = properties.reduce(function(acc, property) {\r\n\t\t\tacc.push(oData[property]);\r\n\r\n\t\t\treturn acc;\r\n\t\t}, []);\r\n\t}\r\n\r\n\t// Obtain if the further processing should be skipped due to missing values for the template\r\n\tbSkip = aValues.every(function(value) {\r\n\t\treturn value === null\r\n\t\t\t|| typeof value === 'undefined'\r\n\t\t\t|| (typeof value === 'string' && value === '');\r\n\t});\r\n\r\n\tif (bSkip) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tsResult = this.template;\r\n\treRegEx = /{([0-9]+)}/g;\r\n\r\n\taMatch = reRegEx.exec(this.template);\r\n\twhile (aMatch !== null) {\r\n\r\n\t\tsValue = aValues[aMatch[1]];\r\n\r\n\t\t// Overwrite empty or undefined values by an empty string\r\n\t\tif (sValue === null || typeof sValue === 'undefined') {\r\n\t\t\tsValue = '';\r\n\t\t}\r\n\r\n\t\t// Replaces the matched placeholder by the indexed property value\r\n\t\tsResult = sResult.replace(aMatch[0], sValue);\r\n\r\n\t\taMatch = reRegEx.exec(this.template);\r\n\t}\r\n\r\n\treturn sResult;\r\n};\r\n\r\nmodule.exports = Text;\n\n/***/ }),\n/* 16 */,\n/* 17 */,\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar App\t\t\t\t\t= __webpack_require__(19),\r\n\tContentTypes\t\t= __webpack_require__(21),\r\n\tCore\t\t\t\t= __webpack_require__(22),\r\n\tRelationships\t\t= __webpack_require__(8),\r\n\tSheet\t\t\t\t= __webpack_require__(9),\r\n\tWorkbook\t\t\t= __webpack_require__(23),\r\n\tCurrencySettings\t= __webpack_require__(12);\r\n\r\n/* global JSZip3 */\r\n\r\n/**\r\n * The XLSXBuilder class represents an Office Open XML Spreadsheet\r\n * (Microsoft Excel) that can be used to insert structured and\r\n * formatted data and pack a zipped *.xlsx document.\r\n *\r\n * XLSXBuilder requires JSZip 2.x or 3.x to be present.\r\n *\r\n * @param {(Object[]|string[])} aBinding - Binding configuration that is used for {@link Column} definition\r\n * @param {Object} [oContext] - Context object containing metadata for this particular XLSX\r\n * @param {string} [oContext.application] - Application that created this XLSX\r\n * @param {string} [oContext.version] - Application version that was used to create this XLSX\r\n * @param {string} [oContext.title] - Title of the XLSX document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @param {string} [oContext.sheetName] - The name of the data sheet that will be shown in Excel\r\n * @param {string} [oContext.metaSheetName] - The name of the metadata sheet that will be shown in Excel\r\n * @param {Object[]} [oContext.metainfo] - Optional Metadata that will be displayed in the additional Metadata Sheet\r\n * @param {string} [hierarchyLevel] - Name of the property that contains the hierarchy level of each lime item\r\n * @param {Object} [oCustomConfig] - Custom configuration object that can be used for {@link CurrencySettings} digits\r\n * and other customizations\r\n * @constructor\r\n */\r\nfunction XLSXBuilder(aBinding, oContext, hierarchyLevel, oCustomConfig) {\r\n\tvar aMetadataConfig, i, oMetainfoGroup, sSheetName, sMetadataSheetName;\r\n\r\n\tif (!(aBinding instanceof Array) || !aBinding.length) {\r\n\t\tthrow new Error('No binding provided');\r\n\t}\r\n\r\n\t/* Set default values */\r\n\tsSheetName = 'SAP Document Export';\r\n\tsMetadataSheetName = 'Metadata';\r\n\r\n\tthis.app = new this.objects.App(oContext);\r\n\tthis.core = new this.objects.Core(oContext);\r\n\tthis.workbook = new this.objects.Workbook();\r\n\r\n\t/* Configure currency settings if needed */\r\n\tif (oCustomConfig && oCustomConfig.currencySettings) {\r\n\t\tCurrencySettings.update(oCustomConfig.currencySettings);\r\n\t}\r\n\r\n\t/* Overwrite default Sheet names if maintained */\r\n\tif (oContext) {\r\n\t\tsSheetName = oContext.sheetName ? oContext.sheetName : sSheetName;\r\n\t\tsMetadataSheetName = oContext.metaSheetName ? oContext.metaSheetName : sMetadataSheetName;\r\n\t}\r\n\r\n\tthis.sheet = this.workbook.addSheet(sSheetName, { columns: aBinding, hierarchyLevel: hierarchyLevel });\r\n\tthis.workbook.selectSheet(this.sheet);\r\n\r\n\tif (typeof oContext === 'object' && oContext.metainfo instanceof Array) {\r\n\r\n\t\t/* Define column configuration for metadata sheet */\r\n\t\taMetadataConfig = [\r\n\t\t\t{\r\n\t\t\t\tproperty: 'key',\r\n\t\t\t\tlabel: 'Key',\r\n\t\t\t\twidth: 20\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tproperty: 'value',\r\n\t\t\t\tlabel: 'Value',\r\n\t\t\t\twidth: 20\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\t/* Add optional Metadata Sheet*/\r\n\t\tthis.metadata = this.workbook.addSheet(sMetadataSheetName, { columns: aMetadataConfig, hideHeader: true });\r\n\r\n\t\t/*\r\n\t\t * Add a copy of metadata to the Metadata Sheet. The method\r\n\t\t * #_insertIntoSheet uses Array#shift and would otherwise\r\n\t\t * manipulate the original metadata array.\r\n\t\t */\r\n\t\tfor (i = 0; i < oContext.metainfo.length; i++) {\r\n\t\t\toMetainfoGroup = oContext.metainfo[i];\r\n\r\n\t\t\tthis.metadata.createGroup(oMetainfoGroup.name, 1);\r\n\t\t\tthis._insertIntoSheet(oMetainfoGroup.items.slice(), this.metadata);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXLSXBuilder.prototype = {\r\n\r\n\tobjects: {\r\n\t\tApp: App,\r\n\t\tContentTypes: ContentTypes,\r\n\t\tCore: Core,\r\n\t\tRelationships: Relationships,\r\n\t\tSheet: Sheet,\r\n\t\tWorkbook: Workbook\r\n\t},\r\n\r\n\t/**\r\n\t * Triggers the packaging process for the Office Open XML\r\n\t * SpreadSheet. You need to call the method insert() first,\r\n\t * otherwise the generated Document will contain no data.\r\n\t *\r\n\t * The method returns a promise to allow the library to work\r\n\t * asynchronously.\r\n\t *\r\n\t * @function build\r\n\t * @returns {object} - Packed zip file as Blob or Nodebuffer, depending on the runtime environment\r\n\t */\r\n\tbuild: function() {\r\n\t\tvar bFinalize, files, zip, i, j, fileConfig, FileType, xmlObject, relation, zipConfig;\r\n\r\n\t\tfiles = [\r\n\t\t\t{\r\n\t\t\t\tname: '[Content_Types].xml',\r\n\t\t\t\tpath: '',\r\n\t\t\t\ttype: this.objects.ContentTypes\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '.rels',\r\n\t\t\t\tpath: '_rels/',\r\n\t\t\t\ttype: this.objects.Relationships,\r\n\t\t\t\trelationships: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'xl/workbook.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/app.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/core.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\tzip = new JSZip3();\r\n\t\tbFinalize = true;\r\n\r\n\t\tfor (i = 0; i < files.length; i++) {\r\n\t\t\tfileConfig = files[i];\r\n\t\t\tFileType = fileConfig.type;\r\n\t\t\txmlObject = new FileType();\r\n\r\n\t\t\tif (xmlObject instanceof this.objects.Relationships) {\r\n\t\t\t\tfor (j = 0; j < fileConfig.relationships.length; j++) {\r\n\t\t\t\t\trelation = fileConfig.relationships[j];\r\n\t\t\t\t\txmlObject.addRelationship(relation.target, relation.type);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tzip.file(fileConfig.path + fileConfig.name, xmlObject.serialize());\r\n\t\t}\r\n\r\n\t\t// Add document metadata\r\n\t\tzip.file(this.app.getAbsolutePath(), this.app.serialize());\r\n\t\tzip.file(this.core.getAbsolutePath(), this.core.serialize());\r\n\r\n\t\t// Add workbook and its related files\r\n\t\tzip.file(this.workbook.getAbsolutePath(), this.workbook.serialize());\r\n\t\tzip.file(this.workbook.getRelationships().getAbsolutePath(), this.workbook.getRelationships().serialize());\r\n\r\n\t\tthis.workbook.getRelatedFiles().forEach(function(file) {\r\n\t\t\tzip.file(file.getAbsolutePath(), file.serialize(bFinalize));\r\n\t\t});\r\n\r\n\t\tzipConfig = {\r\n\t\t\tcompression: 'DEFLATE',\r\n\t\t\ttype: JSZip3.support.nodebuffer ? 'nodebuffer' : 'arraybuffer'\r\n\t\t};\r\n\r\n\t\treturn zip.generateAsync(zipConfig);\r\n\t},\r\n\r\n\t/**\r\n\t * Appends the specified set of data to the Open Document Spreadsheet.\r\n\t * All data will be bound according to the {@link ColumnConfiguration}.\r\n\t *\r\n\t * @function append\r\n\t * @param {(Object[]|Object)} aData - Array of data that gets appended to the Spreadsheet\r\n\t */\r\n\tappend: function(aData) {\r\n\t\tthis._insertIntoSheet(aData, this.sheet);\r\n\t},\r\n\r\n\t/**\r\n\t * Inserts the given data into the specified Sheet. The method will throw an Error if no Sheet is provided.\r\n\t *\r\n\t * @param {Array} aData - Array of business objects that should be inserted\r\n\t * @param {Sheet} oSheet - The Sheet where the data should be inserted into\r\n\t * @private\r\n\t */\r\n\t_insertIntoSheet: function(aData, oSheet) {\r\n\t\tvar array;\r\n\r\n\t\t/* We need to check if param is null or undefined because [null].length results in 1 */\r\n\t\tif (typeof aData === 'undefined' || aData === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tarray = aData instanceof Array ? aData : [aData];\r\n\r\n\t\twhile (array.length) {\r\n\t\t\toSheet.insert(array.shift());\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = XLSXBuilder;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile = __webpack_require__(1);\r\n\r\n/**\r\n * This class represents the app.xml within the generated Excel. The\r\n * App contains information about the application that created the\r\n * Office Open XML Spreadsheet.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.application] - Application that created this Excel\r\n * @param {string} [oContext.version] - Application version that was used to create this Excel\r\n * @constructor\r\n */\r\nfunction App(oContext) {\r\n\tXMLFile.call(this, App.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.application) {\r\n\t\t\tthis.application.value = oContext.application;\r\n\t\t}\r\n\r\n\t\tif (oContext.version) {\r\n\t\t\tthis.version.value = oContext.version;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nApp.prototype = Object.create(XMLFile.prototype);\r\nApp.prototype.constructor = App;\r\n\r\nApp.metadata = {\r\n\tpath: 'docProps/',\r\n\tfilename: 'app.xml',\r\n\ttag: 'Properties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'vt',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'application',\r\n\t\t\ttag: 'Application',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'DocSecurity',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Company',\r\n\t\t\tvalue: 'SAP SE'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'SharedDoc',\r\n\t\t\tvalue: 'false'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'version',\r\n\t\t\ttag: 'AppVersion',\r\n\t\t\tvalue: '1.85' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = App;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLElement = __webpack_require__(7);\r\n\r\n/**\r\n * The class XMLAttribute is a wrapper for representing XML-like attributes attributes.\r\n * It is mainly used for defining namespaces and namespace-related attributes.\r\n *\r\n * @param {object} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.name - String representation of the XML tag.\r\n * @param {string} [oConfig.prefix] - Prefix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.suffix] - Suffix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.value] - Textual value of the {@link XMLAttribute}.\r\n * @class\r\n * @module xml/XMLAttribute\r\n */\r\nfunction XMLAttribute(oConfig) {\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\tthis.name = oConfig.name ? oConfig.name : '';\r\n\tthis.prefix = oConfig.prefix ? oConfig.prefix : '';\r\n\tthis.suffix = oConfig.suffix ? oConfig.suffix : '';\r\n}\r\n\r\nXMLAttribute.prototype = Object.create(XMLElement.prototype);\r\nXMLAttribute.prototype.constructor = XMLAttribute;\r\n\r\n/**\r\n * Performes a String serialization of the XMLAttribute. The representation is formatted as follows:\r\n * <prefix>:<name>:<suffix>=\"<value>\"\r\n *\r\n * i.E. ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'\r\n * for { name: 'xmlns', suffix: 'xsi', value: 'http://www.w3.org/2001/XMLSchema-instance' }\r\n *\r\n * Note that the serialized String always comes with a leading whitespace to allow easy concatenation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLAttribute\r\n */\r\nXMLAttribute.prototype.serialize = function(){\r\n\treturn ' ' + (this.prefix ? this.prefix + ':' : '') + this.name\r\n\t\t+ (this.suffix ? ':' + this.suffix : '') + '=\"' + this.xmlEncode(this.value) + '\"';\r\n};\r\n\r\nmodule.exports = XMLAttribute;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile = __webpack_require__(1);\r\n\r\n/**\r\n * This class represents the [Content_Types].xml within the generated Excel.\r\n *\r\n * @constructor\r\n */\r\nfunction ContentTypes() {\r\n\tXMLFile.call(this, ContentTypes.metadata);\r\n}\r\n\r\nContentTypes.prototype = Object.create(XMLFile.prototype);\r\nContentTypes.prototype.constructor = ContentTypes;\r\n\r\n\r\nContentTypes.FILENAME = '';\r\nContentTypes.metadata = {\r\n\tfilename: '[Content_Types].xml',\r\n\ttag: 'Types',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/content-types'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'rels'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.relationships+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/workbook.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/worksheets/sheet1.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/styles.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/sharedStrings.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/core.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.core-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/app.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = ContentTypes;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile = __webpack_require__(1);\r\n\r\n/**\r\n * This class represents the core.xml within the generated Excel. The\r\n * Core contains basic information about the content and the owner of\r\n * the file.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.title] - Title of the Excel document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @constructor\r\n */\r\nfunction Core(oContext) {\r\n\tXMLFile.call(this, Core.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.title) {\r\n\t\t\tthis.title.value = oContext.title;\r\n\t\t}\r\n\r\n\t\tif (oContext.modifiedBy) {\r\n\t\t\tthis.modifiedBy.value = oContext.modifiedBy;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nCore.prototype = Object.create(XMLFile.prototype);\r\nCore.prototype.constructor = Core;\r\n\r\nCore.metadata = {\r\n\tpath: 'docProps/',\r\n\tfilename: 'core.xml',\r\n\ttag: 'cp:coreProperties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'cp',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dc',\r\n\t\t\tvalue: 'http://purl.org/dc/elements/1.1/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcterms',\r\n\t\t\tvalue: 'http://purl.org/dc/terms/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcmitype',\r\n\t\t\tvalue: 'http://purl.org/dc/dcmitype/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'xsi',\r\n\t\t\tvalue: 'http://www.w3.org/2001/XMLSchema-instance'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'title',\r\n\t\t\ttag: 'dc:title',\r\n\t\t\tvalue: 'Table Export' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dc:creator',\r\n\t\t\tvalue: 'SAP UI5 Document Export'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cp:keywords',\r\n\t\t\tvalue: 'SAP UI5 EXPORT'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'modifiedBy',\r\n\t\t\ttag: 'cp:lastModifiedBy',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dcterms:created',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprefix: 'xsi',\r\n\t\t\t\t\tname: 'type',\r\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: new Date().toISOString()\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'modified',\r\n\t\t\ttag: 'dcterms:modified',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprefix: 'xsi',\r\n\t\t\t\t\tname: 'type',\r\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: new Date().toISOString()\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Updates the state of the Core class and returns the serialized string.\r\n *\r\n * @return {string} - Serialized representation of the Core instance\r\n */\r\nCore.prototype.serialize = function() {\r\n\tthis.modified.value = new Date().toISOString();\r\n\r\n\treturn Object.getPrototypeOf(Core.prototype).serialize.call(this);\r\n};\r\n\r\nmodule.exports = Core;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ColumnConfiguration\t= __webpack_require__(24),\r\n\tReferenceNode\t\t= __webpack_require__(27),\r\n\tSharedStrings\t\t= __webpack_require__(28),\r\n\tSheet\t\t\t\t= __webpack_require__(9),\r\n\tStyles\t\t\t\t= __webpack_require__(30);\r\n\r\n/**\r\n * This class represents the workbook.xml file within the generated\r\n * Office Open XML Spreadsheet. The workbook is the central element\r\n * of the Office Open XML Spreadsheet that references all the content.\r\n *\r\n * @constructor\r\n */\r\nfunction Workbook() {\r\n\tvar key;\r\n\r\n\tReferenceNode.call(this, Workbook.metadata);\r\n\r\n\t/* Create and register central Styles instance for this workbook */\r\n\tthis._styles = new Styles();\r\n\tthis._styles.setPath(this.getPath());\r\n\tthis.addRelatedFile(this._styles);\r\n\r\n\t/* Create and register central SharedStrings instance for this workbook */\r\n\tthis._sharedStrings = new SharedStrings();\r\n\tthis._sharedStrings.setPath(this.getPath());\r\n\tthis.addRelatedFile(this._sharedStrings);\r\n\r\n\tfor (key in Workbook.RELATIONS) {\r\n\t\tthis._relationships.addRelationship(Workbook.RELATIONS[key].target, Workbook.RELATIONS[key].type);\r\n\t}\r\n\r\n\tthis._registeredSheets = [];\r\n}\r\n\r\nWorkbook.prototype = Object.create(ReferenceNode.prototype);\r\nWorkbook.prototype.constructor = Workbook;\r\n\r\nWorkbook.RELATIONS = {\r\n\tsharedStrings: {\r\n\t\ttarget: 'sharedStrings.xml',\r\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings'\r\n\t},\r\n\tstyles: {\r\n\t\ttarget: 'styles.xml',\r\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles'\r\n\t}\r\n};\r\n\r\nWorkbook.metadata = {\r\n\tfilename: 'workbook.xml',\r\n\tpath: 'xl/',\r\n\ttag: 'workbook',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'bookViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'workbookView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'yWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowWidth',\r\n\t\t\t\t\t\t\tvalue: '22260'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowHeight',\r\n\t\t\t\t\t\t\tvalue: '12645'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'sheets',\r\n\t\t\ttag: 'sheets'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'definedNames',\r\n\t\t\ttag: 'definedNames'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds a new {@link Sheet} to this {@link Workbook}\r\n *\r\n * @param {string} sName - Name of the {@link Sheet} that is used as label in Microsoft Excel\r\n * @param {Object} oConfig - The column configuration of this Sheet\r\n * @param {Array} oConfig.columns - Array containing the configuration for each column\r\n * @param {boolean} [oConfig.bHideHeader] - Hides the header row (optional - default: false)\r\n * @returns {Sheet} - The newly added {@link Sheet}\r\n */\r\nWorkbook.prototype.addSheet = function(sName, oConfig) {\r\n\tvar oColumnConfiguration, nCount, sId, oSheet, sSheetFileName;\r\n\r\n\tnCount = this.sheets.childs.length + 1;\r\n\tsSheetFileName = 'sheet' + nCount + '.xml';\r\n\tsId = this._relationships.addRelationship('worksheets/' + sSheetFileName,\r\n\t\t'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet');\r\n\r\n\tthis.sheets.addChild({\r\n\t\ttag: 'sheet',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tid: 'name',\r\n\t\t\t\tname: 'name',\r\n\t\t\t\tvalue: sName\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'sheetId',\r\n\t\t\t\tvalue: '' + nCount\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'id',\r\n\t\t\t\tprefix: 'r',\r\n\t\t\t\tvalue: sId\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n\r\n\toColumnConfiguration = new ColumnConfiguration(oConfig, this._sharedStrings, this._styles);\r\n\toSheet = new Sheet(oColumnConfiguration);\r\n\toSheet.setFileName(sSheetFileName);\r\n\toSheet.setPath(this.getPath() + 'worksheets/');\r\n\r\n\tthis.addRelatedFile(oSheet);\r\n\tthis._registeredSheets.push(oSheet);\r\n\r\n\treturn oSheet;\r\n};\r\n\r\n/**\r\n * Set the given sheet as selected. Unselects all other sheets in the workbook.\r\n *\r\n * @param {Sheet} oSheet - The Sheet object that should be selected\r\n */\r\nWorkbook.prototype.selectSheet = function(oSheet) {\r\n\r\n\tif (!(oSheet instanceof Sheet) || this._registeredSheets.indexOf(oSheet) < 0) {\r\n\t\tthrow new Error('Could not select sheet. Sheet not found.');\r\n\t}\r\n\r\n\t/* Remove selection on all sheets */\r\n\tthis._registeredSheets.forEach(function(sheetElement, index, array) {\r\n\t\tsheetElement.views.defaultView.remove('selected');\r\n\t});\r\n\r\n\t/* Select the particular Sheet */\r\n\toSheet.views.defaultView.addAttribute({\r\n\t\tid: 'selected',\r\n\t\tname: 'tabSelected',\r\n\t\tvalue: '1' // Refers to W3C XML Schema boolean (true)\r\n\t});\r\n};\r\n\r\n/**\r\n * Registers definedNames for sheets that use autoFilter\r\n * functionality before processing the super class serialization.\r\n *\r\n * @returns {string} - The serialized String representation of this workbook\r\n */\r\nWorkbook.prototype.serialize = function() {\r\n\tvar that = this;\r\n\r\n\t/**\r\n\t * Creates the value for the definedName. It automatically\r\n\t * retrieves the dimension of the sheet that is used by the\r\n\t * filter and escapes its representation.\r\n\t *\r\n\t * @param {string} sSheetName - The title of the sheet\r\n\t * @param {Sheet} oSheet - The sheet object containing the filter dimension\r\n\t * @returns {string} - Escaped definedName value\r\n\t * @private\r\n\t */\r\n\tfunction createDefinedName(sSheetName, oSheet) {\r\n\t\tvar sDefinedName, sDimension;\r\n\r\n\t\tsDimension = oSheet.filter.reference.value;\r\n\t\tsDefinedName = /^[a-zA-Z0-9]+$/.test(sSheetName) ? sSheetName : '\\'' + sSheetName + '\\'';\r\n\t\tsDefinedName += '!';\r\n\t\tsDefinedName += sDimension.replace(/([A-Z]+)|(\\d+)/g, function(match) {\r\n\t\t\treturn '$' + match;\r\n\t\t});\r\n\r\n\t\treturn sDefinedName;\r\n\t}\r\n\r\n\t/* Create definedNames before serializing the workbook */\r\n\tthis._registeredSheets.forEach(function(oSheet, iIndex, aArray) {\r\n\t\tvar sSheetName = that.sheets.childs[iIndex].name.value;\r\n\r\n\t\tif (oSheet.filter) {\r\n\t\t\tthat.definedNames.addChild({\r\n\t\t\t\ttag: 'definedName',\r\n\t\t\t\tattributes: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\tvalue: '_xlnm._FilterDatabase'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'localSheetId',\r\n\t\t\t\t\t\tvalue: iIndex\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'hidden',\r\n\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\tvalue: createDefinedName(sSheetName, oSheet)\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\treturn Object.getPrototypeOf(Workbook.prototype).serialize.call(this);\r\n};\r\n\r\nmodule.exports = Workbook;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Column\t= __webpack_require__(25),\r\n\tText\t= __webpack_require__(15),\r\n\tRow\t\t= __webpack_require__(10),\r\n\tCell\t= __webpack_require__(3);\r\n\r\n/**\r\n * ColumnConfiguration represents the configuration of all columns within\r\n * one Sheet. The ColumnConfiguration handles the mapping of object\r\n * properties to certain columns,, labeling, type definition and also\r\n * display information like width and alignment.\r\n *\r\n * @param {Object} oConfig -  An configuration object that contains all necessary column definitions\r\n * @param {Object} oConfig.columns -  An array of Column definitions. {@see Column} for further details\r\n * @param {string} [oConfig.hierarchyLevel] -  Name of the property that holds the hierarchy level\r\n * @param {boolean} [oConfig.hideHeader] - Flag that allows to hide the header row\r\n * @param {SharedStrings} oSharedStrings - SharedStrings instance that will be used by all Cells\r\n * @param {Styles} oStyles - Style collection that is used to register Cell or row specific styles\r\n * @module binding/ColumnBinding\r\n * @constructor\r\n */\r\nfunction ColumnConfiguration(oConfig, oSharedStrings, oStyles) {\r\n\tvar aColumns, oColumn, i;\r\n\r\n\tthis.columns = [];\r\n\tthis._row = null;\r\n\tthis.styles = oStyles;\r\n\tthis.sharedStrings = oSharedStrings;\r\n\tthis.hideHeader = oConfig.hideHeader;\r\n\r\n\tObject.defineProperty(this, 'hierarchyLevelProperty', { value: oConfig.hierarchyLevel });\r\n\r\n\taColumns = oConfig.columns;\r\n\r\n\tfor (i = 0; i < aColumns.length; i++) {\r\n\r\n\t\t/* As specified, the hierarchy level indentation will only be applied on the first row */\r\n\t\tif (i == 0) {\r\n\t\t\tif (typeof aColumns[i] === 'string') {\r\n\t\t\t\taColumns[i] = { property: aColumns[i] };\r\n\t\t\t}\r\n\r\n\t\t\taColumns[i].hierarchyLevel = this.hierarchyLevelProperty;\r\n\t\t}\r\n\r\n\t\toColumn = aColumns[i] instanceof Column ? aColumns[i] : new Column(aColumns[i], this.sharedStrings, this.styles);\r\n\t\tthis.columns.push(oColumn);\r\n\t}\r\n}\r\n\r\n/**\r\n * Initializes the objects that are necessary for the binding. This\r\n * components are:\r\n * - a template Row\r\n * - a Cell for each Column\r\n * - a Style for each data type referenced by each Column\r\n *\r\n * @private\r\n */\r\nColumnConfiguration.prototype._initBinding = function() {\r\n\tvar i;\r\n\r\n\tthis._row = new Row();\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis._row.addCell(this.columns[i].getCell());\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Creates an new Row and binds the provided data to the Row Cells according to the current ColumnConfiguration.\r\n *\r\n * @param {Object} oData - The data object that has to be bound to the row\r\n * @param {number} nHierarchyLevel - Hierarchy level that will be used for indent and outline\r\n * @returns {Row} - Returns the created Row that contains the provided data\r\n */\r\nColumnConfiguration.prototype.bind = function(oData, nHierarchyLevel) {\r\n\tvar i, normalizedHierarchyLevel;\r\n\r\n\tif (this._row === null) {\r\n\t\tthis._initBinding();\r\n\t}\r\n\r\n\t/* Normalise hierarchy depth to not exceed the maximum depth of 7 */\r\n\tnormalizedHierarchyLevel = Math.min(nHierarchyLevel, 7);\r\n\r\n\t/*\r\n\t * We need to add, update or delete the outline attribute because\r\n\t * we reuse the row object\r\n\t */\r\n\tif (normalizedHierarchyLevel && !this._row.outline) {\r\n\t\tthis._row.addAttribute({\r\n\t\t\tid: 'outline',\r\n\t\t\tname: 'outlineLevel',\r\n\t\t\tvalue: normalizedHierarchyLevel\r\n\t\t});\r\n\t} else if (normalizedHierarchyLevel && this._row.outline) {\r\n\t\tthis._row.outline.value = normalizedHierarchyLevel;\r\n\t} else if (!normalizedHierarchyLevel && this._row.outline) {\r\n\t\tthis._row.remove('outline');\r\n\t}\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis.columns[i].bind(oData);\r\n\t}\r\n\r\n\treturn this._row;\r\n};\r\n\r\n\r\n/**\r\n * Creates the header Row according to the current ColumnConfiguration and returns it.\r\n *\r\n * @returns {Row} - Header row according to the ColumnConfiguration\r\n */\r\nColumnConfiguration.prototype.getHeader = function() {\r\n\tvar cell, row, type;\r\n\r\n\tif (this.hideHeader) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F7F7F7'\r\n\t\t}\r\n\t});\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId({}));\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\tthis.columns.forEach(function(column) {\r\n\r\n\t\t/* Create new Cell and assign value */\r\n\t\tcell = new Cell(type, this.sharedStrings);\r\n\t\tcell.setValue('label', column);\r\n\r\n\t\trow.addCell(cell);\r\n\t}.bind(this));\r\n\r\n\treturn row;\r\n};\r\n\r\n/**\r\n *\r\n * @param sGroupName\r\n * @return {Row}\r\n */\r\nColumnConfiguration.prototype.getGroupHeader = function(sGroupName) {\r\n\tvar cell, row, type, data;\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F2F2F2'\r\n\t\t}\r\n\t});\r\n\tdata = {\r\n\t\tname: sGroupName\r\n\t};\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId(data));\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\trow.spans.value = '1:' + this.size();\r\n\r\n\t/* Create new Cell and assign value */\r\n\tcell = new Cell(type, this.sharedStrings);\r\n\tcell.setValue('name', data);\r\n\r\n\trow.addCell(cell);\r\n\r\n\treturn row;\r\n};\r\n\r\n\r\n/**\r\n * Returns the size of the ColumnConfiguration - respectively the\r\n * count of the configured columns.\r\n *\r\n * @returns {number} Count of configured columns\r\n */\r\nColumnConfiguration.prototype.size = function() {\r\n\treturn this.columns.length;\r\n};\r\n\r\nmodule.exports = ColumnConfiguration;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar BigNumber\t \t= __webpack_require__(11),\r\n\tBooleanType \t= __webpack_require__(14),\r\n\tCalendarDate \t= __webpack_require__(13),\r\n\tCell\t\t\t= __webpack_require__(3),\r\n\tCurrency \t\t= __webpack_require__(4),\r\n\tEnumeration \t= __webpack_require__(26),\r\n\tNumeric \t\t= __webpack_require__(5),\r\n\tText\t\t \t= __webpack_require__(15);\r\n\r\n/**\r\n * The Column class represents the field type of columns. It handles\r\n * styling, data types and data binding.\r\n *\r\n * @param {(Object|string)} oData - Data object representing the Column configuration\r\n * @param {string} oData.property - References the data object property that is bound as value for this column\r\n * @param {string} [oData.textAlign] - Optional alignment\r\n * @param {string} [oData.label] - Optional column label that will be shown in the header row\r\n * @param {string} [oData.type] - Optional data type for this column. Default: Column.Type.Text\r\n * @param {string} [oData.width] - Optional width of the column\r\n * @param {SharedStrings} oSharedStrings - SharedStrings instance that will be used by all Cells\r\n * @param {Styles} oStyles - Styles collection that is needed to register each Style a Column uses\r\n * @class\r\n * @module binding/Column\r\n */\r\nfunction Column(oData, oSharedStrings, oStyles) {\r\n\tvar oColumnData;\r\n\r\n\t/* Fallback assignment if only a key is provided */\r\n\toColumnData = typeof oData === 'string' ? {property: oData} : oData;\r\n\tif (!oColumnData || !oColumnData.property) { throw new Error('The property for the column is not defined'); }\r\n\r\n\tthis.property = oColumnData.property;\r\n\tthis.label = oColumnData.label ? oColumnData.label : oColumnData.property;\r\n\tthis.width = oColumnData.width;\r\n\tthis.styles = oStyles;\r\n\tthis.type = this._initType(oColumnData);\r\n\tthis.cell = new Cell(this.type, oSharedStrings);\r\n}\r\n\r\n/**\r\n * Initializes the data type for this Column. Type specific\r\n * formatting information will be evaluated and applied.\r\n *\r\n * @param {Object} oData - Configuration object for this Column that also contains type and formatting information\r\n * @param {string} oData.type - Specifies the data type\r\n * @param {string} [oData.textAlign] - Defines the horizontal alignment\r\n * @param {boolean} [oData.delimiter] - Specifies if a thousands delimiter is shown\r\n * @param {number} [oData.scale] - Specifies the the decimal scale\r\n * @param {string} [oData.calendar] - Specifies the calendar if type is date, datetime or time\r\n * @param {string} [oData.format] - Specifies a custom format if type is date, datetime or time\r\n * @param {string} [oData.unit] - Specifies the UoM if type is number\r\n * @param {string} [oData.unitProperty] - Name of the property that contains the UoM if type is number or currency\r\n * @param {boolean} [oData.displayUnit] - Specifies if the UoM will be shown or not if type is number or currency\r\n * @param {string} [oData.trueValue] - Specifies the displayed value if the boolean type has the value true\r\n * @param {string} [oData.falseValue] - Specifies the displayed value if the boolean type has the value false\r\n * @param {string} [oData.template] - Specifies a template string that can be filled with several properties\r\n * @param {string} [oData.hierarchyLevel] - Specifies the name of the property that contains the hierarchy level\r\n * @param {string} [oData.inputFormat] - Specifies the input format of a string based date\r\n * @param {Object} [oData.valueMap] - Contains a JS object or Map with key value pairs\r\n *\r\n * @returns {Type} - Returns the specific Type object that contains all the formatting\r\n * @private\r\n */\r\nColumn.prototype._initType = function(oData) {\r\n\tvar type, sType;\r\n\r\n\tsType = typeof oData.type === 'string' ? oData.type.toLowerCase() : oData.type;\r\n\r\n\tswitch (sType) {\r\n\t\tcase 'date':\r\n\t\tcase 'datetime':\r\n\t\tcase 'time':\r\n\t\t\ttype = new CalendarDate(oData);\r\n\r\n\t\t\t/* Add \"UTC\" to all columns headers of type datetime to indicate that all timestamps in EXCEL are UTC */\r\n\t\t\tthis.label = sType === 'datetime' ? this.label + ' (UTC)' : this.label;\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'number':\r\n\t\t\ttype = new Numeric(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'currency':\r\n\t\t\ttype = new Currency(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'boolean':\r\n\t\t\ttype = new BooleanType(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'enumeration':\r\n\t\t\ttype = new Enumeration(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'bignumber':\r\n\t\t\ttype = new BigNumber(oData);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\toData.type = 'text';\r\n\r\n\t\t\ttype = new Text(oData);\r\n\t}\r\n\r\n\ttype.registerAt(this.styles);\r\n\r\n\treturn type;\r\n};\r\n\r\n/**\r\n * Returns the Cell object that is referenced by this particular\r\n * Column. Every Column references only one single Cell that gets\r\n * reused for each and every Row.\r\n *\r\n * When binding the actual data to a row, the Cell content, its\r\n * references and its styling get updated and a serialized version\r\n * of the row is stored within the sheet.\r\n *\r\n * @returns {Cell} - The Cell that belongs to this particular Column\r\n */\r\nColumn.prototype.getCell = function() {\r\n\treturn this.cell;\r\n};\r\n\r\n/**\r\n * This method binds the actual business object property to the columns cell.\r\n *\r\n * @param {object} oData - Business object that gets bound to the Cell of this Column.\r\n */\r\nColumn.prototype.bind = function(oData) {\r\n\r\n\t/*\r\n\t * Due to the fact that Cell#setValue updates the Style depending\r\n\t * on the actual Cell value (i.E. Unit of Measurement for\r\n\t * Currencies), we need to provide the original business object\r\n\t * so that the Cell knows the whole business object instead of\r\n\t * just the value of its particular property.\r\n\t */\r\n\tthis.cell.setValue(this.property, oData);\r\n};\r\n\r\nmodule.exports = Column;\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Type = __webpack_require__(2);\r\n\r\n/**\r\n * The Enumeration class represents an enumeration data type.\r\n * The Enumeration allows to assign particular values for\r\n * corresponding keys.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {Object} [oData.valueMap] - Contains a JS object or Map with key value pairs\r\n * @constructor\r\n */\r\nfunction Enumeration(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis._valueMap = oConfig && oConfig.valueMap ? oConfig.valueMap : {};\r\n}\r\n\r\nEnumeration.prototype = Object.create(Type.prototype);\r\nEnumeration.prototype.constructor = Enumeration;\r\n\r\n/**\r\n * Returns the mapped value for the key that is present in the\r\n * business object.\r\n *\r\n * @param {string} sProperty - Name of the property that contains the key\r\n * @param {Object} oData - Business object that contains the data\r\n * @returns {string} - The value of the given property after type specific processing\r\n * @protected\r\n */\r\nEnumeration.prototype.getValue = function(sProperty, oData) {\r\n\tvar key, result;\r\n\r\n\tkey = oData[sProperty];\r\n\tresult = this._valueMap instanceof Map ? this._valueMap.get(key) : this._valueMap[key];\r\n\r\n\treturn result || '';\r\n};\r\n\r\nmodule.exports = Enumeration;\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t\t= __webpack_require__(1),\r\n\tRelationships\t= __webpack_require__(8);\r\n\r\n/**\r\n * This class represents the a Office Open XML Spreadsheet object\r\n * that is related to other objects via Relationships. The object\r\n * manages its Relationships by itself to encapsulate the complexity.\r\n *\r\n * A ReferenceNode also provides information about its path so that\r\n * all relationships that are connected to this ReferenceNode are are\r\n * relative to its path.\r\n *\r\n * @param {Object} oConfig - Configuration object that is used by the super class XMLFile\r\n * @constructor\r\n */\r\nfunction ReferenceNode(oConfig) {\r\n\tXMLFile.call(this, oConfig);\r\n\r\n\tthis._relatedFiles = [];\r\n\tthis._relationships = new Relationships(this);\r\n\r\n\tthis.addRelatedFile(this._relationships);\r\n}\r\n\r\nReferenceNode.prototype = Object.create(XMLFile.prototype);\r\nReferenceNode.prototype.constructor = ReferenceNode;\r\n\r\n\r\nReferenceNode.prototype.addRelatedFile = function(oXMLFile) {\r\n\tif (!(oXMLFile instanceof XMLFile)) {\r\n\t\tthrow new Error('A related file must be of type XMLFile');\r\n\t}\r\n\r\n\tthis._relatedFiles.push(oXMLFile);\r\n};\r\n\r\nReferenceNode.prototype.getRelationships = function() {\r\n\treturn this._relationships;\r\n};\r\n\r\n/**\r\n * Returns an Array of {@link XMLFile} objects that are reference by\r\n * this {@link ReferenceNode}. The method provides a flat copy of the\r\n * original data to avoid manipulation.\r\n *\r\n * @returns {Array} Array containing referenced files\r\n */\r\nReferenceNode.prototype.getRelatedFiles = function() {\r\n\treturn this._relatedFiles.slice();\r\n};\r\n\r\nmodule.exports = ReferenceNode;\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t = __webpack_require__(1),\r\n\tSharedString\t= __webpack_require__(29);\r\n\r\n/**\r\n * The SharedStrings class represents the list of shared String\r\n * objects that is used in the Office Open XMl Spreadsheet. The\r\n * SharedStrings object reduces redundancy within the data by\r\n * providing a reference to unique Strings instead of repeating\r\n * them.\r\n *\r\n * Due to the fact that the Strings are shared within the whole\r\n * workbook, each instance of the document export only has one\r\n * single instance of SharedString and therefore it uses the\r\n * Singleton pattern to ensure this.\r\n *\r\n * @class\r\n */\r\nfunction SharedStrings() {\r\n\tXMLFile.call(this, SharedStrings.metadata);\r\n\r\n\tObject.defineProperty(this, 'map', {value: new Map(), writable: false});\r\n\tObject.defineProperty(this, '_shared', {value: new SharedString(''), writable: false});\r\n\r\n\tSharedStrings.instance = this;\r\n}\r\n\r\nSharedStrings.prototype = Object.create(XMLFile.prototype);\r\nSharedStrings.prototype.constructor = SharedStrings;\r\n\r\n/**\r\n * Retrieves the Singleton instance of SharedStrings. If no instance is present, it will create one.\r\n *\r\n * @function\r\n * @returns {object} - Singleton instance\r\n */\r\nSharedStrings.getInstance = function() {\r\n\tif (!SharedStrings.instance) {\r\n\t\tSharedStrings.instance = new SharedStrings();\r\n\t}\r\n\r\n\treturn SharedStrings.instance;\r\n};\r\n\r\nSharedStrings.metadata = {\r\n\tfilename: 'sharedStrings.xml',\r\n\ttag: 'sst',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'count',\r\n\t\t\tname: 'count',\r\n\t\t\tvalue: 0\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'uniqueCount',\r\n\t\t\tname : 'uniqueCount',\r\n\t\t\tvalue: 0\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds the specified string value to the set of SharedStrings. The\r\n * method creates a SharedString proxy object that contains\r\n * information about the string itself as well as its index. The\r\n * index is zero-based and can be used for referencing within Cell\r\n * objects.\r\n *\r\n * @function insert\r\n * @param {string} sValue - The string that has to be inserted\r\n * @return {object} - The SharedString instance that represents the provided string value\r\n */\r\nSharedStrings.prototype.insert = function(sValue) {\r\n\tvar index;\r\n\r\n\tthis.count.value = this.count.value + 1;\r\n\r\n\tif (this.map.has(sValue)) {\r\n\t\treturn this.map.get(sValue);\r\n\t}\r\n\r\n\tthis._shared.setValue(sValue);\r\n\tindex = this.map.size;\r\n\tthis.map.set(sValue, index);\r\n\r\n\t/* The SharedString needs to be added to the child nodes as well for serialization purposes */\r\n\tthis.childs.push(this._shared.serialize());\r\n\tthis.uniqueCount.value = this.childs.length;\r\n\r\n\treturn index;\r\n};\r\n\r\n/**\r\n * Cleanup hook that gets executed when the XMLFile#serialize function\r\n * is called with the finalize flag.\r\n *\r\n * @private\r\n */\r\nSharedStrings.prototype.cleanup = function() {\r\n\tthis.map.clear();\r\n};\r\n\r\nmodule.exports = SharedStrings;\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The SharedString class represents each shared String within the\r\n * SharedStrings file.\r\n *\r\n * @param {string} sValue - The String that gets represented by this SharedString object\r\n * @class\r\n */\r\nfunction SharedString(sValue) {\r\n\tXMLNode.call(this, SharedString.metadata);\r\n\r\n\tthis.setValue(sValue);\r\n}\r\n\r\nSharedString.prototype = Object.create(XMLNode.prototype);\r\nSharedString.prototype.constructor = SharedString;\r\n\r\n// eslint-disable-next-line no-control-regex, max-len\r\nSharedString.controlCharacterTestRegex = /[\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0B\\x0C\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F]/m;\r\n// eslint-disable-next-line no-control-regex, max-len\r\nSharedString.controlCharacterReplaceRegex = /[\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0B\\x0C\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F]/gm;\r\n\r\nSharedString.metadata = {\r\n\ttag: 'si',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 't'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Replaces XML incompatible control characters with their corresponding Office Open XML escape sequence.\r\n *\r\n * @param {string} sValue - String that contains ASCII control characters\r\n * @returns {string} - Escaped string\r\n * @private\r\n */\r\nSharedString._escapeControlCharacters = function(sValue) {\r\n\tvar sCharHex;\r\n\r\n\treturn sValue.replace(SharedString.controlCharacterReplaceRegex, function(sMatch) {\r\n\t\tsCharHex = sMatch.codePointAt(0).toString(16).toUpperCase();\r\n\r\n\t\t/* Works only with control characters in ASCII range - do NOT use with Emojis */\r\n\t\treturn '_x00' + (sCharHex.length === 1 ? '0' : '') + sCharHex + '_';\r\n\t});\r\n};\r\n\r\n/**\r\n * Assigns the given value to the current SharedString instance.\r\n *\r\n * @function\r\n * @param {string} sValue - The string value that should be added\r\n */\r\nSharedString.prototype.setValue = function(sValue) {\r\n\r\n\tif (SharedString.controlCharacterTestRegex.test(sValue)) {\r\n\t\tsValue = SharedString._escapeControlCharacters(sValue);\r\n\t}\r\n\r\n\tif (sValue && typeof sValue == 'string') {\r\n\t\tthis.text.value = sValue;\r\n\t} else {\r\n\r\n\t\t/**\r\n\t\t * There are other implementations for creating a string\r\n\t\t * representation out of a number that might be more\r\n\t\t * convenient like new String(number).toString() or\r\n\t\t * number.toString() but '' + number is the best performing.\r\n\t\t */\r\n\t\tthis.text.value = '' + sValue;\r\n\t}\r\n};\r\n\r\n/**\r\n * Serializes the XMLNode and transforms the concatenated string into a sequential string.\r\n * @return {string} - String representation of the SharedString\r\n *\r\n * @override\r\n */\r\nSharedString.prototype.serialize = function() {\r\n\tvar sSerialized;\r\n\r\n\tsSerialized = Object.getPrototypeOf(SharedString.prototype).serialize.call(this);\r\n\r\n\treturn (' ' + sSerialized).substr(1);\r\n};\r\n\r\nmodule.exports = SharedString;\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLFile\t\t\t= __webpack_require__(1),\r\n\tStyle\t\t\t= __webpack_require__(31),\r\n\tFont\t\t\t= __webpack_require__(32),\r\n\tFill\t\t\t= __webpack_require__(33),\r\n\tBorder\t\t\t= __webpack_require__(34),\r\n\tNumberFormat\t= __webpack_require__(35);\r\n\r\n/**\r\n *\r\n * @class\r\n * @module style/Styles\r\n */\r\nfunction Styles() {\r\n\tXMLFile.call(this, Styles.metadata);\r\n\r\n\t/* Microsoft Excel fix - specific fill that needs to be present */\r\n\tthis.addFill({ type: 'none' }); // Add a default fill at index 0\r\n\tthis.addFill({ type: 'gray125' }); // Needs to have index 1\r\n\tthis.addStyle(Style.DEFAULT); // Apply base style to feed the hard-coded cellStyles and cellStyleXfs\r\n}\r\n\r\nStyles.prototype = Object.create(XMLFile.prototype);\r\nStyles.prototype.constructor = Styles;\r\n\r\nStyles.metadata = {\r\n\tfilename: 'styles.xml',\r\n\ttag: 'styleSheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t,\r\n\t\t{\r\n\t\t\tname: 'mc',\r\n\t\t\tsuffix: 'Ignorable',\r\n\t\t\tvalue: 'x14ac x16r2 xr'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'x14ac',\r\n\t\t\tvalue: 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'x16r2',\r\n\t\t\tvalue: 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'xr',\r\n\t\t\tvalue: 'http://schemas.microsoft.com/office/spreadsheetml/2014/revision'\r\n\t\t}\r\n\t\t*/\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'numberFormats',\r\n\t\t\ttag: 'numFmts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fonts',\r\n\t\t\ttag: 'fonts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fills',\r\n\t\t\ttag: 'fills',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'borders',\r\n\t\t\ttag: 'borders',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyleXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'xf',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'numFmtId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fontId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fillId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'borderId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'cellXfs',\r\n\t\t\ttag: 'cellXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'cellStyle',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\t\tvalue: 'Normal'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xfId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'builtinId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dxfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'tableStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultTableStyle',\r\n\t\t\t\t\tvalue: 'TableStyleMedium2'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultPivotStyle',\r\n\t\t\t\t\tvalue: 'PivotStyleLight16'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n\r\n/**\r\n * Adds the specified Style to the Styles class according to the\r\n * Style configuration. The method will return a Style object that\r\n * references Font, Fill, Border and an optional NumberFormat. If\r\n * some of the referenced Font, Fill, Border or NumberFormat objects\r\n * are not present yet, it will create them automatically, otherwise\r\n * it will re-use existing ones.\r\n *\r\n * The method ensures that particular Style combinations exist only\r\n * once and there are no duplicates.\r\n *\r\n * @param {Object} oData - Configuration object that defines the Style information\r\n * @param {Object} [oData.font] - Configuration object that defines the Font information\r\n * @param {string} [oData.font.name] - Name of the used Font i.E. 'Arial'\r\n * @param {string} [oData.font.size] - Preferred Font size i.E. '12'\r\n * @param {boolean} [oData.font.bold] - Defines the Font weight\r\n * @param {Object} [oData.fill] - Configuration object that defines the Fill information\r\n * @param {string} [oData.fill.color] - HEX string defining the color of the cell fill\r\n * @param {string} [oData.fill.type] - Defines the type of the fill i.E. 'none' or 'solid'\r\n * @param {Object} [oData.border] - Configuration object that defines the Border information\r\n * @param {Object|number} [oData.numberFormat] - Configuration object that defines the NumberFormat information\r\n * @param {string} [oData.numberFormat.format] - Formatting template that will be used\r\n * @param {Object} [oData.align] - Defines the text alignment within the cell\r\n * @param {string} [oData.align.horizontal] - Horizontal alignment\r\n * @param {string} [oData.align.vertical] - Vertical alignment\r\n * @param {number} [oData.align.indent] - Cell indentation\r\n * @param {boolean} [oData.quotePrefix] - Defines whether the style configuration should add a quotePrefix attribute\r\n * @returns {number} - The ID of the unique Style object that needs to be referenced\r\n */\r\nStyles.prototype.addStyle = function(oData) {\r\n\tvar style, fontId, fillId, borderId, numberFormatId;\r\n\r\n\t/* Add Font, Fill, Border and NumberFormat if needed */\r\n\tfontId = this.addFont(oData.font);\r\n\tfillId = this.addFill(oData.fill);\r\n\tborderId = this.addBorder(oData.border);\r\n\r\n\t/* Fallback to avoid custom NumberFormats that won't be used if oData.numberFormat is undefined */\r\n\tif (typeof oData.numberFormat === 'undefined') {\r\n\t\toData.numberFormat = 0;\r\n\t}\r\n\r\n\tnumberFormatId =\r\n\t\tNumberFormat._isBuiltin(oData.numberFormat) ? oData.numberFormat : this.addNumberFormat(oData.numberFormat);\r\n\r\n\t/* Create temporary Style */\r\n\tstyle = new Style();\r\n\r\n\tstyle.setFontId(fontId);\r\n\tstyle.setFillId(fillId);\r\n\tstyle.getBorderId(borderId);\r\n\tstyle.setNumberFormatId(numberFormatId);\r\n\tstyle.setAlignment(oData.align);\r\n\tstyle.setQuotePrefix(oData.quotePrefix);\r\n\r\n\t/* Add Style if not already present */\r\n\treturn this._addToAggregation(style, this.cellXfs);\r\n};\r\n\r\n\r\n/**\r\n * Adds the specific item to the provided aggregation. This Method\r\n * should only be called by the library itself due to possible\r\n * failures. It automatically updates the count within the XML\r\n * representation of this aggregation.\r\n *\r\n * This method should only be used for Font, Fill, Border or\r\n * NumberFormat objects.\r\n *\r\n * @param {Font|Fill|Border|NumberFormat|Style} oNewItem - The item that needs to be appended to the aggregation\r\n * @param {Array} aAggregation - An array that represents the aggregation\r\n * @returns {number} - The zero-based index of the element after it was inserted\r\n * @private\r\n */\r\nStyles.prototype._addToAggregation = function(oNewItem, aAggregation) {\r\n\tvar count, i;\r\n\r\n\ti = -1;\r\n\r\n\taAggregation.childs.forEach(function(existingItem, index, array) {\r\n\t\tif (existingItem.equals(oNewItem)) {\r\n\t\t\ti = index;\r\n\t\t}\r\n\t});\r\n\r\n\tif (i === -1) {\r\n\t\taAggregation.addChild(oNewItem);\r\n\t\tcount = aAggregation.childs.length;\r\n\r\n\t\taAggregation.count.value = count;\r\n\t\ti = count - 1;\r\n\t}\r\n\r\n\treturn i;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a RGB color to the Styles collection that is\r\n * referenced by several Styles.\r\n *\r\n * If this particular color is already present, it will not add it a\r\n * second time.\r\n *\r\n * @param {string} sHexColor - HEX string representing a RGB color\r\n */\r\nStyles.prototype.addColor = function(sHexColor) {\r\n\tvar alreadyPresent;\r\n\r\n\tif (!this.colors) {\r\n\t\tthis.addChild({\r\n\t\t\tid: 'colors',\r\n\t\t\ttag: 'colors',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'mru',\r\n\t\t\t\t\ttag: 'mruColors'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\talreadyPresent = this.colors.mru.childs.some(function(color) {\r\n\t\treturn color.rgb.value === 'FF' + sHexColor;\r\n\t});\r\n\r\n\tif (alreadyPresent) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.colors.mru.addChild({\r\n\t\ttag: 'color',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tid: 'rgb',\r\n\t\t\t\tname: 'rgb',\r\n\t\t\t\tvalue: 'FF' + sHexColor\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Font to the Styles collection that can be\r\n * referenced by several Styles. The Font is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Font is already present, it will not add it a\r\n * second time. This ensures that each referenced Font is unique\r\n * according to the criteria of Font#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Font.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @returns {number} - The index of this Font used for reference by Style objects\r\n */\r\nStyles.prototype.addFont = function(oData) {\r\n\tvar oFont = new Font(oData);\r\n\r\n\treturn this._addToAggregation(oFont, this.fonts);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Fill to the Styles collection that can be\r\n * referenced by several Styles. The Fill is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Fill is already present, it will not add it a\r\n * second time. This ensures that each referenced Fill is unique\r\n * according to the criteria of Fill#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Fill.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @returns {number} - The index of this Fill used for reference by Style objects\r\n */\r\nStyles.prototype.addFill = function(oData) {\r\n\tvar index, oFill;\r\n\r\n\toFill = new Fill(oData);\r\n\r\n\tindex = this._addToAggregation(oFill, this.fills);\r\n\r\n\tif (oFill.getFill() !== null) {\r\n\t\tthis.addColor(oFill.getFill());\r\n\t}\r\n\r\n\treturn index;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Border to the Styles collection that can be\r\n * referenced by several Styles. The Border is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Border is already present, it will not add it a\r\n * second time. This ensures that each referenced Border is unique\r\n * according to the criteria of Border#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Border.\r\n *\r\n * @param {Object} oData - Configuration object for this Border\r\n * @returns {number} - The index of this Border used for reference by Style objects\r\n */\r\nStyles.prototype.addBorder = function(oData) {\r\n\tvar oBorder = new Border(oData);\r\n\r\n\treturn this._addToAggregation(oBorder, this.borders);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a NumberFormat to the Styles collection that can\r\n * be referenced by several Styles. The NumberFormat is instantiated\r\n * according to the provided configuration object.\r\n *\r\n * If this particular NumberFormat is already present, it will not\r\n * add it a second time. This ensures that each referenced\r\n * NumberFormat is unique according to the criteria of\r\n * NumberFormat#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * NumberFormat.\r\n *\r\n * @param {Object} oData - Configuration object for this NumberFormat\r\n * @returns {number} - The index of this NumberFormat used for reference by Style objects\r\n */\r\nStyles.prototype.addNumberFormat = function(oData) {\r\n\tvar index, numberFormat;\r\n\r\n\tnumberFormat = new NumberFormat(oData);\r\n\tindex = this._addToAggregation(numberFormat, this.numberFormats);\r\n\r\n\tnumberFormat.setId(NumberFormat.ID_OFFSET + index);\r\n\r\n\treturn numberFormat.getId();\r\n};\r\n\r\nmodule.exports = Styles;\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\nvar Alignment = __webpack_require__(6);\r\n\r\n/**\r\n * Represents a particular Style within the Office Open XML Spreadsheet.\r\n * Instances of this type will be created by the Styles Class after\r\n * registering a new Style.\r\n *\r\n * @constructor\r\n */\r\nfunction Style() {\r\n\tXMLNode.call(this, Style.metadata);\r\n}\r\n\r\nStyle.prototype = Object.create(XMLNode.prototype);\r\nStyle.prototype.constructor = Style;\r\n\r\nStyle.metadata = {\r\n\ttag: 'xf',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'numberFormat',\r\n\t\t\tname: 'numFmtId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'font',\r\n\t\t\tname: 'fontId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\tname: 'fillId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'border',\r\n\t\t\tname: 'borderId',\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nStyle.DEFAULT = {\r\n\tfont: {\r\n\t\tname: 'Arial',\r\n\t\tsize: 11,\r\n\t\tfamily: '2',\r\n\t\tcolor: '1',\r\n\t\tbold: false\r\n\t},\r\n\tfill: {\r\n\t\ttype: 'none'\r\n\t}\r\n};\r\n\r\nStyle.prototype.getAlignment = function() {\r\n\treturn this.alignment ? this.alignment : null;\r\n};\r\n\r\nStyle.prototype.getFontId = function() {\r\n\treturn this.font.value;\r\n};\r\n\r\nStyle.prototype.getFillId = function() {\r\n\treturn this.fill.value;\r\n};\r\n\r\nStyle.prototype.getBorderId = function() {\r\n\treturn this.border.value;\r\n};\r\n\r\nStyle.prototype.getNumberFormatId = function() {\r\n\treturn this.numberFormat.value;\r\n};\r\n\r\nStyle.prototype.hasQuotePrefix = function() {\r\n\treturn 'quotePrefix' in this;\r\n};\r\n\r\n/**\r\n * Applies the alignment to the Style. The alignment must match the\r\n * predefined options of <code>Alignment</code> as far as it is not\r\n * null. Other values will be ignored.\r\n *\r\n * The value <code>null</code> will delete the current alignment.\r\n *\r\n * @param {Object} oAlign - Alignment configuration that gets applied or null\r\n * @param {string} [oAlign.horizontal] - Horizontal alignment\r\n * @param {string} [oAlign.vertical] - Vertical alignment\r\n * @param {number} [oAlign.indent] - Cell indentation\r\n */\r\nStyle.prototype.setAlignment = function(oAlign) {\r\n\tvar alignment, alignProperty;\r\n\r\n\talignProperty = 'alignment';\r\n\r\n\t// Removes the applyAlignment automatically when sAlign is null\r\n\tthis._apply(oAlign, 'Alignment');\r\n\r\n\tif (typeof oAlign === 'undefined' || oAlign === null) {\r\n\t\tthis.remove(alignProperty);\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!(alignProperty in this)) {\r\n\t\talignment = new Alignment();\r\n\r\n\t\tthis.addChild(alignment);\r\n\t\tObject.defineProperty(this, alignProperty, {value: alignment, writable: false, configurable: true});\r\n\t}\r\n\r\n\tthis[alignProperty].setHorizontalAlignment(oAlign.horizontal);\r\n\tthis[alignProperty].setVerticalAlignment(oAlign.vertical);\r\n\tthis[alignProperty].setWrapText(oAlign.wrap);\r\n\tthis[alignProperty].setIndent(oAlign.indent);\r\n};\r\n\r\nStyle.prototype.setFontId = function(nFontId) {\r\n\tthis._apply(nFontId, 'Font');\r\n\r\n\tthis.font.value = nFontId;\r\n};\r\n\r\nStyle.prototype.setFillId = function(nFillId) {\r\n\tthis._apply(nFillId, 'Fill');\r\n\r\n\tthis.fill.value = nFillId;\r\n};\r\n\r\nStyle.prototype.setBorderId = function(sBorderId) {\r\n\tthis.border.value = sBorderId;\r\n};\r\n\r\nStyle.prototype.setNumberFormatId = function(nNumFmtId) {\r\n\tthis._apply(nNumFmtId, 'NumberFormat');\r\n\r\n\tthis.numberFormat.value = nNumFmtId;\r\n};\r\n\r\nStyle.prototype.setQuotePrefix = function(bQuotePrefix) {\r\n\tvar sAttributeName = 'quotePrefix';\r\n\r\n\tif (bQuotePrefix && !this.hasQuotePrefix()) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: sAttributeName,\r\n\t\t\tname: sAttributeName,\r\n\t\t\tvalue: '1'\r\n\t\t});\r\n\t} else if (!bQuotePrefix && this.hasQuotePrefix()) {\r\n\t\tthis.remove(sAttributeName);\r\n\t}\r\n};\r\n\r\nStyle.prototype._apply = function(nId, sType) {\r\n\tvar applyProperty = 'apply' + sType;\r\n\r\n\tthis.remove(applyProperty);\r\n\r\n\tif (nId) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: applyProperty,\r\n\t\t\tname: applyProperty,\r\n\t\t\tvalue: '1'\r\n\t\t});\r\n\t}\r\n};\r\n\r\nStyle.prototype.equals = function(oStyle) {\r\n\tif (!(oStyle instanceof Style)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFontId() === oStyle.getFontId()\r\n\t\t&& this.getFillId() === oStyle.getFillId()\r\n\t\t&& this.getBorderId() === oStyle.getBorderId()\r\n\t\t&& this.getNumberFormatId() === oStyle.getNumberFormatId()\r\n\t\t&& this.hasQuotePrefix() === oStyle.hasQuotePrefix()\r\n\t\t&& ( (!this.alignment && !oStyle.alignment) || (this.alignment && this.alignment.equals(oStyle.alignment)) );\r\n};\r\n\r\nmodule.exports = Style;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The Font class represents a Font configuration within an Office\r\n * Open XML Spreadsheet.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @param {boolean} [oData.bold] - Boolean value indicating if the Font should be bold\r\n * @param {string} [oData.name] - The name of the font that gets used by this Font object i.E. Arial, Verdana, etc.\r\n * @param {number|String} [oData.size] - The font size that is been used\r\n * @param {number} [oData.family] - The font family reference {@see getFamily}\r\n * @constructor\r\n */\r\nfunction Font(oData) {\r\n\tXMLNode.call(this, Font.metadata);\r\n\r\n\tif (oData && oData instanceof Object) {\r\n\t\tthis.setName(oData.name)\r\n\t\t\t.setSize(oData.size)\r\n\t\t\t.setFamily(oData.family)\r\n\t\t\t.setBold(!!oData.bold);\r\n\t}\r\n}\r\n\r\nFont.prototype = Object.create(XMLNode.prototype);\r\nFont.prototype.constructor = Font;\r\n\r\nFont.DEFAULT_SIZE = 11;\r\nFont.DEFAULT_NAME = 'Arial';\r\n\r\nFont.metadata = {\r\n\ttag: 'font',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'size',\r\n\t\t\ttag: 'sz',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_SIZE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'color',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'theme',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'name',\r\n\t\t\ttag: 'name',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_NAME\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'family',\r\n\t\t\ttag: 'family',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: 2\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Font is equal to the given parameter.\r\n *\r\n * @param {Font} oFont - The Font to compare with\r\n * @return {boolean} - Returns true if both Font objects contain the same configuration.\r\n */\r\nFont.prototype.equals = function(oFont) {\r\n\tif (!(oFont instanceof Font)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getName() == oFont.getName()\r\n\t\t&& this.getSize() == oFont.getSize()\r\n\t\t&& this.isBold() == oFont.isBold()\r\n\t\t&& this.getColor() == oFont.getColor()\r\n\t\t&& this.getFamily() == oFont.getFamily();\r\n};\r\n\r\n/**\r\n * Returns whether the Font will be displayed bold or not.\r\n *\r\n * @returns {boolean} - Returns true if the Font is bold\r\n */\r\nFont.prototype.isBold = function() {\r\n\treturn !!this.bold;\r\n};\r\n\r\n/**\r\n * Returns the size of this Font.\r\n *\r\n * @returns {number} - The size of the Font\r\n */\r\nFont.prototype.getSize = function() {\r\n\treturn this.size.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the name of this Font. I.E. Arial, Calibri, etc.\r\n *\r\n * @returns {string} - The name of the Font\r\n */\r\nFont.prototype.getName = function() {\r\n\treturn this.name.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the color reference of this Font.\r\n *\r\n * @returns {string} - The color as HEX string\r\n */\r\nFont.prototype.getColor = function() {\r\n\treturn this.color.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the Font family reference of this Font. The reference is\r\n * defined within the Office Open XML specification.\r\n * 1 : Roman (Times New Roman, SAP-icons)\r\n * 2 : Swiss (Arial, Calibri, Segoe UI, Tahoma, Verdana)\r\n * 3 : Modern\r\n * 4 : Script\r\n * 5 : Decorative\r\n * 6-14 : Reserved for future use\r\n *\r\n * @returns {number} - The Font family ID\r\n */\r\nFont.prototype.getFamily = function() {\r\n\treturn this.family.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * This method can be used to set the Font to bold or not.\r\n *\r\n * @param {boolean} bBold - A boolean value that indicates if the Font should be bold or not\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setBold = function(bBold) {\r\n\tvar boldProperty = 'bold';\r\n\r\n\t/* Early return if bold status is already correct */\r\n\tif (bBold === !!this[boldProperty]) {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tif (bBold) {\r\n\t\tthis.addChild({\r\n\t\t\tid: boldProperty,\r\n\t\t\ttag: 'b'\r\n\t\t});\r\n\t} else {\r\n\t\tthis.remove(boldProperty);\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * This method is used to set the Font family reference for the used font.\r\n *\r\n * @see {@link getFamily}\r\n * @param {number} nFamily - Number that references the Font family\r\n * @returns {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setFamily = function(nFamily) {\r\n\r\n\tif (nFamily > 0 && nFamily < 15) {\r\n\t\tthis.family.valueAttribute.value = nFamily;\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font name to this object.\r\n *\r\n * @param {string} sName - Name of the font i.E. Arial, Calibri, etc.\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setName = function(sName) {\r\n\tif (sName && typeof sName === 'string') {\r\n\t\tthis.name.valueAttribute.value = sName;\r\n\t}\r\n\r\n\t/*\r\n\t * If the font name is Calibri we need to add another child node:\r\n\t *\r\n\t *\t{\r\n\t *\t\ttag: 'scheme',\r\n\t *\t\tattributes: [\r\n\t *\t\t\t{\r\n\t *\t\t\t\tname: 'val',\r\n\t *\t\t\t\tvalue: 'minor'\r\n\t *\t\t\t}\r\n\t *\t\t]\r\n\t *\t}\r\n\t */\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font size to this object.\r\n *\r\n * @param {number} nSize - Textual representation of the font size\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setSize = function(nSize) {\r\n\r\n\t/* Check preconditions */\r\n\tif (typeof nSize !== 'number' || isNaN(nSize) || nSize < 1 || nSize > 96) {\r\n\t\tthrow new Error('The size ' + nSize + ' is not supported.');\r\n\t}\r\n\r\n\tthis.size.valueAttribute.value = nSize;\r\n\r\n\treturn this;\r\n};\r\n\r\nmodule.exports = Font;\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * This Class represents a background fill of cells within the Office\r\n * Open Spreadsheet document. The Fill accepts a configuration object\r\n * which might have either an \"color\" or an \"type\" property.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @param {string} [oData.color] - HEX string defining the colored fill\r\n * @param {string} [oData.type] - Color independent fill type\r\n * @constructor\r\n */\r\nfunction Fill(oData) {\r\n\tXMLNode.call(this, Fill.metadata);\r\n\r\n\tif (oData) {\r\n\t\tif (oData.color) {\r\n\t\t\tthis.setFill(oData.color);\r\n\t\t} else if (oData.type) {\r\n\t\t\tthis.setType(oData.type);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nFill.prototype = Object.create(XMLNode.prototype);\r\nFill.prototype.constructor = Fill;\r\n\r\nFill.DEFAULT_TYPE = 'none';\r\n\r\nFill.metadata = {\r\n\ttag: 'fill',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\ttag: 'patternFill',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'type',\r\n\t\t\t\t\tname: 'patternType',\r\n\t\t\t\t\tvalue: Fill.DEFAULT_TYPE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Fill is equal to the one that was provided.\r\n *\r\n * @param {Fill} oFill - The Fill that gets compared to the current Fill\r\n * @returns {boolean} - Returns true if the compared objects are of the same type and contain the same color fill\r\n */\r\nFill.prototype.equals = function(oFill) {\r\n\tif (!(oFill instanceof Fill)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getType() === oFill.getType()\r\n\t\t&& this.getFill() === oFill.getFill();\r\n};\r\n\r\n/**\r\n * Returns the color of the current Fill.\r\n *\r\n * @returns {string|null} - String containing the color HEX color of the Fill or null of no color is assigned\r\n */\r\nFill.prototype.getFill = function() {\r\n\r\n\t/* The opacity needs to be removed before returning the HEX color */\r\n\treturn this.fill.childs.length ? this.fill.color.rgb.value.substring(2) : null;\r\n};\r\n\r\nFill.prototype.setFill = function(sColor) {\r\n\tthis.reset();\r\n\r\n\tif (sColor && typeof sColor === 'string' && /^[A-Fa-f0-9]{6}$/.test(sColor)) {\r\n\t\tthis.fill.type.value = 'solid';\r\n\r\n\t\t/**\r\n\t\t * Apply the provided color as forground color of the\r\n\t\t * background. We add 'FF' in front of the HEX-color\r\n\t\t * for opacity.\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'fgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'rgb',\r\n\t\t\t\t\tname: 'rgb',\r\n\t\t\t\t\tvalue: 'FF' + sColor\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * Add default background layer which will be used once the\r\n\t\t * foreground color uses transparency\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\ttag: 'bgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'indexed',\r\n\t\t\t\t\tvalue: '64'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns the current Fill type.\r\n *\r\n * @returns {string} - Current Fill type\r\n */\r\nFill.prototype.getType = function() {\r\n\treturn this.fill.type.value;\r\n};\r\n\r\n/**\r\n * Assigns the given type as Fill type. The Fill will be reset to\r\n * default before the type is applied.\r\n *\r\n * @param {string} sType - Type that needs to be assigned\r\n */\r\nFill.prototype.setType = function(sType) {\r\n\tthis.reset();\r\n\r\n\tthis.fill.type.value = sType;\r\n};\r\n\r\n/**\r\n * Resets the current fill to avoid side effects that might occur\r\n * when the fill is modified.\r\n */\r\nFill.prototype.reset = function() {\r\n\tthis.fill.type.value = 'none';\r\n\tthis.fill.childs.length = 0;\r\n};\r\n\r\nmodule.exports = Fill;\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * This class represents border configuration for Office Open XML Spreadsheets.\r\n * @constructor\r\n */\r\nfunction Border() {\r\n\tXMLNode.call(this, Border.metadata);\r\n}\r\n\r\nBorder.prototype = Object.create(XMLNode.prototype);\r\nBorder.prototype.constructor = Border;\r\n\r\nBorder.metadata = {\r\n\ttag: 'border',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'left'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'right'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'top'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'bottom'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'diagonal'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Border is equal to the given parameter.\r\n *\r\n * @param {Border} oBorder - Border that get's compared to the current one\r\n * @return {boolean} - Returns true if both Borders have the same configuration\r\n */\r\nBorder.prototype.equals = function(oBorder) {\r\n\r\n\t/**\r\n\t * Once it is a Border object we always return true because we\r\n\t * don't provide more than one border type\r\n\t */\r\n\treturn oBorder instanceof Border;\r\n};\r\n\r\nmodule.exports = Border;\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar XMLNode = __webpack_require__(0);\r\n\r\n/**\r\n * The NumberFormat class is used to store custom formatting for\r\n * numeric values. In addition to a variety of built-in formats that\r\n * cannot be used as identifier for a particular format, the user can\r\n * create up to 250 different number formats.\r\n *\r\n * (https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3)\r\n *\r\n * @param {Object} oData - Configuration object that is used for initialization\r\n * @param {string} oData.format - Custom format that will be applied\r\n * @constructor\r\n */\r\nfunction NumberFormat(oData) {\r\n\tXMLNode.call(this, NumberFormat.metadata);\r\n\r\n\tthis.format.value = oData && oData.format ? oData.format : NumberFormat.DEFAULT;\r\n}\r\n\r\nNumberFormat.prototype = Object.create(XMLNode.prototype);\r\nNumberFormat.prototype.constructor = NumberFormat;\r\n\r\nNumberFormat.metadata = {\r\n\ttag: 'numFmt',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'formatId',\r\n\t\t\tname: 'numFmtId'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\tname: 'formatCode'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nNumberFormat.BUILTIN_IDS = [ 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15,\r\n\t16, 17, 18, 19, 20, 21, 22, 37, 38, 39, 40, 45, 46, 47, 48, 49 ];\r\nNumberFormat.ID_OFFSET = 164;\r\nNumberFormat.DEFAULT = '#,##0.00';\r\n\r\n/**\r\n * This method returns the ID of this NumberFormat. If there was no\r\n * ID assigned yet, it will return undefined.\r\n *\r\n * @returns {number} - The ID of this NumberFormat\r\n */\r\nNumberFormat.prototype.getId = function() {\r\n\treturn this.formatId.value;\r\n};\r\n\r\n\r\n/**\r\n * Returns the format of this NumberFormat as a string.\r\n *\r\n * @returns {string} - The format template that gets applied\r\n */\r\nNumberFormat.prototype.getFormat = function() {\r\n\treturn this.format.value;\r\n};\r\n\r\n\r\n/**\r\n * Assigns the provided ID to the current NumberFormat.\r\n *\r\n * @param {number|string} sId - The ID of this NumberFormat that can be referenced\r\n */\r\nNumberFormat.prototype.setId = function(sId) {\r\n\tvar iId = typeof sId === 'number' ? sId : parseInt(sId, 10);\r\n\r\n\t/* Checks if NaN, below zero or builtin ID */\r\n\tif (isNaN(iId) || iId < 0 || NumberFormat._isBuiltin(iId)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.formatId.value = sId;\r\n};\r\n\r\n\r\n/**\r\n * Sets a specific format.\r\n *\r\n * @param {string} sFormat - The format that gets applied by this NumberFormat\r\n */\r\nNumberFormat.prototype.setFormat = function(sFormat) {\r\n\tthis.format.value = sFormat;\r\n};\r\n\r\n\r\n/**\r\n * Checks if a given ID is a builtin ID or not. Builtin IDs cannot be used for custom NumberFormats.\r\n *\r\n * @param {number} iId - ID that needs to be checked if it is a builtin ID\r\n *\r\n * @returns {boolean} - Returns true if the provided ID is a builtin ID that cannot be used\r\n * @private\r\n */\r\nNumberFormat._isBuiltin = function(iId) {\r\n\treturn NumberFormat.BUILTIN_IDS.indexOf(iId) > -1;\r\n};\r\n\r\n\r\n/**\r\n * Compares another NumberFormat to the current one. This method will\r\n * match NumberFormat objects by its format regardless of their ID.\r\n *\r\n * @param {NumberFormat} oNumberFormat - The NumberFormat to compare with\r\n * @returns {boolean} - Returns true if the format template is equal to the one from the compared object\r\n */\r\nNumberFormat.prototype.equals = function(oNumberFormat) {\r\n\tif (!(oNumberFormat instanceof NumberFormat)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFormat() === oNumberFormat.getFormat();\r\n};\r\n\r\nmodule.exports = NumberFormat;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// XLSXBuilder.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 23665558697295235e9f","var XMLElement = require('./XMLElement');\r\nvar XMLAttribute = require('./XMLAttribute');\r\n\r\n/**\r\n * JSON representation of XML nodes. Each node has a tag an can have multiple {@link XMLAttribute} entries assigned.\r\n * It can also have multiple child {@link XMLNode} elements assigned. The node can contain a value.\r\n *\r\n * @param {object|string} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.tag - String representation of the XML tag.\r\n * @param {object[]} [oConfig.attributes] - Aggregation for adding {@link XMLAttributes} to the current node.\r\n * @param {object[]} [oConfig.properties] - Aggregation for adding {@link XMLNode} objects as child objects to this node\r\n * @param {string} [oConfig.value] - String value inside the XML tag.\r\n * @class\r\n * @module xml/XMLNode\r\n */\r\nfunction XMLNode(oConfig) {\r\n\tvar i, j, config;\r\n\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\t/* Shorthand functionality to simply assign the XMLNode tag name instead of a configuration object */\r\n\tconfig = typeof oConfig === 'string' ? {tag: oConfig} : oConfig;\r\n\r\n\tObject.defineProperty(this, 'root', {value: !!config.root, writable: false});\r\n\tthis.tag = typeof config.tag == 'string' ? config.tag : '';\r\n\tthis.attributes = [];\r\n\tthis.childs = [];\r\n\r\n\t/* Initialize the XML node by filling the aggregations if present */\r\n\tif (config.attributes) {\r\n\t\tfor (i = 0; i < config.attributes.length; i++) {\r\n\t\t\tthis.addAttribute(config.attributes[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tif (config.properties) {\r\n\t\tfor (j = 0; j < config.properties.length; j++) {\r\n\t\t\tthis.addChild(config.properties[j]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXMLNode.prototype = Object.create(XMLElement.prototype);\r\nXMLNode.prototype.constructor = XMLNode;\r\n\r\nXMLNode.processingInformation = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>';\r\n\r\n\r\n/**\r\n * Adds the provided XMLAttribute object to the XMLNode.\r\n * If no XMLAttribute is provided it will create one instead.\r\n * The method returns the XMLAttribute for chaining.\r\n *\r\n * @function addAttribute\r\n * @param {Object} oConfig - XMLAttribute or configuration object that represents a XMLAttribute\r\n * @returns {Object} - An instance of XMLAttribute that was added to this node\r\n */\r\nXMLNode.prototype.addAttribute = function(oConfig) {\r\n\tvar attribute = oConfig instanceof XMLAttribute ? oConfig : new XMLAttribute(oConfig);\r\n\r\n\tthis.attributes.push(attribute);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: attribute, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn attribute;\r\n};\r\n\r\n\r\n/**\r\n * Adds the provided XMLNode object as child to the current XMLNode.\r\n * If no XMLNode is provided it will create one instead.\r\n * The method returns the XMLNode for chaining.\r\n *\r\n * @function addChild\r\n * @param {Object} oConfig - XMLNode or configuration object that represents a XMLNode\r\n * @returns {object} - An instance of XMLNode that was added to this node\r\n */\r\nXMLNode.prototype.addChild = function(oConfig) {\r\n\r\n\t/* Additional Attributes of the child node will be added in the Constructor */\r\n\tvar node = oConfig instanceof XMLNode ? oConfig : new XMLNode(oConfig);\r\n\r\n\tthis.childs.push(node);\r\n\r\n\tif (oConfig.id) {\r\n\t\tObject.defineProperty(this, oConfig.id, {value: node, writable: false, configurable: true});\r\n\t}\r\n\r\n\treturn node;\r\n};\r\n\r\n\r\n/**\r\n * Removes the property from this object and also deletes the\r\n * referenced item within the child nodes or attributes\r\n * aggregation.\r\n *\r\n * The method returns the previously referenced object or null if\r\n * the property name is not present on this particular XMLNode or\r\n * if no item is referenced.\r\n *\r\n * Builtin properties of XMLNode cannot be removed with this\r\n * function. These are \"root\", \"tag\", \"attributes\", \"childs\",\r\n * \"value\".\r\n *\r\n * @param {string} sProperty - Name of the property that should be removed\r\n * @returns {XMLNode|XMLAttribute|null} - The referenced object that gets removed as well\r\n */\r\nXMLNode.prototype.remove = function(sProperty) {\r\n\tvar index, referencedElement, aAggregation;\r\n\r\n\t/* Only proceed if property is present */\r\n\tif (!(sProperty in this)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treferencedElement = this[sProperty];\r\n\r\n\t/* Check if referenced element is a XMLAttribute */\r\n\tif (referencedElement instanceof XMLAttribute) {\r\n\t\taAggregation = this.attributes;\r\n\t} else if (referencedElement instanceof XMLNode && !(sProperty in new XMLNode(''))) {\r\n\t\taAggregation = this.childs;\r\n\t} else {\r\n\r\n\t\t/* Early return if referenced element is neither an XMLAttribute nor XMLNode */\r\n\t\treturn null;\r\n\t}\r\n\r\n\tindex = aAggregation.indexOf(referencedElement);\r\n\taAggregation.splice(index, 1); // It is ensured that index > -1 otherwise #addChild or #addAttribute fail\r\n\tdelete this[sProperty];\r\n\r\n\treturn referencedElement;\r\n};\r\n\r\n/**\r\n * Allows recursive serialization of the object and its descendants. If the XMLNode is marked as root node,\r\n * it will automatically add the XML processing information in front of the serialized representation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLNode.\r\n */\r\nXMLNode.prototype.serialize = function() {\r\n\tvar sSerialized, i, j;\r\n\r\n\tsSerialized = (this.root ? XMLNode.processingInformation : '') + '<' + this.tag;\r\n\r\n\t/* Insert attributes including namespace information */\r\n\tfor (i = 0; i < this.attributes.length; i++) {\r\n\t\tsSerialized += this.attributes[i].serialize();\r\n\t}\r\n\r\n\t/* Insert child nodes and value */\r\n\tif (this.childs.length || this.value || typeof this.value === 'number') {\r\n\t\tsSerialized += '>';\r\n\t\tsSerialized = (' ' + sSerialized).substr(1);\r\n\r\n\t\tfor (j = 0; j < this.childs.length; j++) {\r\n\t\t\tsSerialized += typeof this.childs[j] === 'string' ? this.childs[j] : this.childs[j].serialize();\r\n\t\t}\r\n\t\tsSerialized += this.xmlEncode(this.value);\r\n\r\n\t\tsSerialized += '</' + this.tag + '>';\r\n\t} else {\r\n\r\n\t\t/* Shorthand tag support */\r\n\t\tsSerialized += '/>';\r\n\t\tsSerialized = (' ' + sSerialized).substr(1);\r\n\t}\r\n\r\n\treturn sSerialized;\r\n};\r\n\r\nmodule.exports = XMLNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLNode.js\n// module id = 0\n// module chunks = 0","var XMLNode\t\t = require('../xml/XMLNode');\r\n\r\n/**\r\n * The XMLFile class is a subclass of XMLNode that enriches the\r\n * object by path and file name information.\r\n *\r\n * @param {Object} oConfig - The configuration object for this XMLFile\r\n * @param {string} oConfig.path - The relative path of this XMLFile\r\n * @param {string} oConfig.filename - The file name of this XMLFile\r\n * @class\r\n */\r\nfunction XMLFile(oConfig) {\r\n\tXMLNode.call(this, oConfig);\r\n\r\n\tthis._filename = oConfig.filename;\r\n\tthis._path = oConfig.path;\r\n}\r\n\r\nXMLFile.prototype = Object.create(XMLNode.prototype);\r\nXMLFile.prototype.constructor = XMLFile;\r\n\r\n/**\r\n * Returns the name of this particular file including its file extension.\r\n *\r\n * @returns {string} Name of the file\r\n */\r\nXMLFile.prototype.getFileName = function() {\r\n\treturn this._filename;\r\n};\r\n\r\n/**\r\n * Assigns the given string as name of the file. The name must contain a file extension.\r\n *\r\n * @param {string} sFileName - Name of the file\r\n */\r\nXMLFile.prototype.setFileName = function(sFileName) {\r\n\r\n\tif (!sFileName.match(/^\\S+\\.\\S{3,4}$/)) {\r\n\t\tthrow new Error('Invalid file name: ' + sFileName);\r\n\t}\r\n\r\n\tthis._filename = sFileName;\r\n};\r\n\r\n/**\r\n * Returns the path of the file without any filename.\r\n *\r\n * @returns {string} - Path of the file\r\n */\r\nXMLFile.prototype.getPath = function() {\r\n\treturn this._path;\r\n};\r\n\r\n/**\r\n * Returns the absolute Path to the file.\r\n *\r\n * @returns {string} - Absolute path including the filename\r\n */\r\nXMLFile.prototype.getAbsolutePath = function() {\r\n\treturn this.getPath() + this.getFileName();\r\n};\r\n\r\n/**\r\n * Assigns the given path to this XMLFile. The path needs to end with\r\n * a slash to match the criteria.\r\n *\r\n * @param {string} sPath - Relative path of this XMLFile\r\n */\r\nXMLFile.prototype.setPath = function(sPath) {\r\n\r\n\t/* IE compatible endsWith */\r\n\tif (!sPath || sPath.lastIndexOf('/') !== (sPath.length - 1)) {\r\n\t\tthrow new Error('Invalid file path: ' + sPath);\r\n\t}\r\n\r\n\tthis._path = sPath;\r\n};\r\n\r\n/**\r\n * Performs a serialization of this XMLFile based on the XMLNode#serialize\r\n * implementation. The optional parameter allows to finalize this XMLFile\r\n * so that all aggregations will be cleared and the cleanup hook\r\n * XMLFile#cleanup will be executed. The aggregations will be cleared\r\n * outside of the cleanup function. This will ensure proper cleanup\r\n * even is the subclass is not calling the super class function.\r\n *\r\n * @param {boolean} [bFinalize]\r\n * Forces the XMLFile to destroy its aggregations. It will call the\r\n * cleanup function of the instance. This can be used as a hook for\r\n * subclasses that inherit from XMLFile. This frees additional memory\r\n * but should be used with caution because after serialization all\r\n * content will be lost.\r\n *\r\n * @returns {string} The serialized XMLFile\r\n *\r\n * @Overrides XMLNode#serialize\r\n */\r\nXMLFile.prototype.serialize = function(bFinalize) {\r\n\tvar sSerializedString;\r\n\r\n\tsSerializedString = Object.getPrototypeOf(XMLFile.prototype).serialize.call(this);\r\n\r\n\tif (bFinalize) {\r\n\t\tthis.childs.length = 0;\r\n\r\n\t\tthis.cleanup();\r\n\t}\r\n\r\n\treturn sSerializedString;\r\n};\r\n\r\n/**\r\n * Abstract function that can be overridden as a cleanup hook.\r\n * @abstract\r\n */\r\nXMLFile.prototype.cleanup = function() {\r\n\r\n\t/* Do nothing */\r\n};\r\n\r\nmodule.exports = XMLFile;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLFile.js\n// module id = 1\n// module chunks = 0","/**\r\n * The Type class defines a supported data type, like strings,\r\n * numeric values, decimals, dates, currencies and so on. It is NOT\r\n * part of the XML representation of the generated Excel document.\r\n *\r\n * This class is marked as abstract therefore only its sub-classes\r\n * should be used.\r\n *\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction Type(oConfig) {\r\n\tthis.styleId = null;\r\n\tthis.alignment = oConfig && oConfig.textAlign ? oConfig.textAlign : null;\r\n}\r\n\r\n/**\r\n * Creates the type specific configuration that is used to register\r\n * its corresponding style in the Styles class.\r\n *\r\n * All subclass implementations have to call the superclass method to\r\n * ensure that alignment information will not be lost.\r\n *\r\n * @param {Object} oData - Line item that will be used to evaluate the cell content\r\n * @returns {Object} - Configuration object that may contain alignment information\r\n * @protected\r\n */\r\nType.prototype._createConfiguration = function(oData) {\r\n\treturn this.alignment ? { align : {\thorizontal: this.alignment }} : {};\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} [oData] - Business object that contains the actual data\r\n * @param {string|number} [value] - Explicit cell value that might be used for semantic formatting\r\n * @returns {number} - ID of the registered Style\r\n */\r\nType.prototype.getStyleId = function(oData, value) {\r\n\tif (this.styleId === null) {\r\n\t\tthis.styleId = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleId;\r\n};\r\n\r\n/**\r\n * Registers the Style configuration of this Type in the given Styles\r\n * class.\r\n *\r\n * @param {Styles} oStyles - Styles instance where the Type specific styling will be registered\r\n */\r\nType.prototype.registerAt = function(oStyles) {\r\n\tthis.styles = oStyles;\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type.\r\n *\r\n * @param {string} property - Name of the property that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean|null} - The value of the given property after type specific processing.\r\n */\r\nType.prototype.getValue = function(property, oData) {\r\n\treturn oData[property];\r\n};\r\n\r\nmodule.exports = Type;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Type.js\n// module id = 2\n// module chunks = 0","var XMLNode\t\t \t= require('../xml/XMLNode'),\r\n\tBigNumber\t\t= require('../binding/type/BigNumber'),\r\n\tCalendarDate \t= require('../binding/type/CalendarDate'),\r\n\tNumeric \t\t= require('../binding/type/Numeric'),\r\n\tBooleanType \t= require('../binding/type/BooleanType'),\r\n\tCurrency \t\t= require('../binding/type/Currency');\r\n\r\n/**\r\n * The Cell class represents a single cell within the spreadsheet\r\n * that has to be assigned to a particular row. A Cell stores\r\n * information supporting several types of data.\r\n *\r\n * @param {Type} oType - The data type of the cell\r\n * @param {SharedStrings} oSharedStrings - SharedStrings instance that will be used by all Cells\r\n * @class\r\n */\r\nfunction Cell(oType, oSharedStrings) {\r\n\tXMLNode.call(this, Cell.metadata);\r\n\r\n\tObject.defineProperty(this, 'type', { value: Cell.DataType.SharedString, writable: true });\r\n\r\n\tthis._shared = oSharedStrings;\r\n\tthis._oFallbackType = null;\r\n\tthis._applyType(oType);\r\n}\r\n\r\nCell.prototype = Object.create(XMLNode.prototype);\r\nCell.prototype.constructor = Cell;\r\n\r\nCell.DataType = {\r\n\tBoolean: 'b',\r\n\tDate: 'd',\r\n\tInlineString: 'inlineStr', // We do not support inline strings\r\n\tNumber: 'n',\r\n\tSharedString: 's',\r\n\tFormularString: 'str'\r\n};\r\n\r\nCell._cellTypeProperty = 'cellType';\r\n\r\nCell.metadata = {\r\n\ttag: 'c',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'style',\r\n\t\t\tname: 's',\r\n\t\t\tvalue: '0' // Default style id\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 'v'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Applies the given type to the current Cell and maps to the\r\n * corresponding Office Open XML type definition.\r\n *\r\n * @param {Type} oType - Value of type {@link Type}\r\n * @private\r\n */\r\nCell.prototype._applyType = function(oType) {\r\n\r\n\tthis.bindingType = oType;\r\n\r\n\tswitch (oType.constructor) {\r\n\t\tcase BooleanType:\r\n\t\t\tthis.type = Cell.DataType.Boolean;\r\n\r\n\t\t\tif (!oType.isCustomFormatted()) {\r\n\t\t\t\tthis.addAttribute({\r\n\t\t\t\t\tid: Cell._cellTypeProperty,\r\n\t\t\t\t\tname: 't',\r\n\t\t\t\t\tvalue: Cell.DataType.Boolean\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase CalendarDate:\r\n\t\t\tthis.type = Cell.DataType.Date;\r\n\t\t\tbreak;\r\n\r\n\t\tcase Numeric:\r\n\t\tcase Currency:\r\n\t\t\tthis.type = Cell.DataType.Number;\r\n\r\n\t\t\t/*\r\n\t\t\t * As long as _applyType is only called once during\r\n\t\t\t * initialization, the fallbackType can be registered\r\n\t\t\t * without any additional check.\r\n\t\t\t */\r\n\t\t\tthis._oFallbackType = new BigNumber(oType);\r\n\t\t\tthis._oFallbackType.registerAt(oType.styles);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault: // Text is the default case\r\n\t\t\tthis.addAttribute({\r\n\t\t\t\tid: Cell._cellTypeProperty,\r\n\t\t\t\tname: 't',\r\n\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\r\n\t\t\t});\r\n\t\t\tthis.type = Cell.DataType.SharedString;\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the specified Style to the cell.\r\n *\r\n * @param {number|string} nStyle - Instance of Excel.objects.Style\r\n */\r\nCell.prototype.setStyle = function(nStyle) {\r\n\tthis.style.value = nStyle;\r\n};\r\n\r\n/**\r\n * Applies the specified cell location as reference. The reference\r\n * must match the regular expression of Open Document SpreadsheetML\r\n * sheet format. Starting with at least one uppercase letter for the\r\n * column followed by a number without leading zeros for the row.\r\n * [A-Z]+[1-9]+[0-9]*\r\n *\r\n * @param {string} sReference - Reference of the cells' location\r\n */\r\nCell.prototype.setReference = function(sReference) {\r\n\tif (typeof sReference != 'string'\r\n\t\t|| !sReference.match(/^[A-Z]+[1-9]+[0-9]*$/g)) {\r\n\t\tthrow new Error('The given Cell reference \"' + sReference + '\" does not match the reference pattern.');\r\n\t}\r\n\r\n\tthis.reference.value = sReference;\r\n};\r\n\r\n/**\r\n * Assigns the value to the current Cell. The method requires a\r\n * property reference and a business object that gets bound depending\r\n * on the property. It is also possible to provide an array of\r\n * properties in case of aggregated columns.\r\n *\r\n * @param {(string|Array)} sProperty - single property or Array of properties\r\n * @param {Object} oBusinessObject - BusinessObject that gets bound to this Cell\r\n */\r\nCell.prototype.setValue = function(sProperty, oBusinessObject) {\r\n\tvar value, bindingType;\r\n\r\n\tbindingType = this.bindingType;\r\n\tvalue = bindingType.getValue(sProperty, oBusinessObject);\r\n\r\n\tif (!this._isValuePresent(value)) {\r\n\r\n\t\t/*\r\n\t\t * We need to clear the value due to the fact\r\n\t\t * that we are re-using the Cell for each row\r\n\t\t */\r\n\t\tthis.text.value = '';\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tswitch (this.type) {\r\n\t\tcase Cell.DataType.Boolean:\r\n\r\n\t\t\t/* String representations other than \"true\" will result in the boolean value false */\r\n\t\t\tif (typeof value === 'string') {\r\n\t\t\t\tvalue = value.toLowerCase() === 'true';\r\n\t\t\t}\r\n\t\t\tthis.text.value = value ? '1' : '0';\r\n\r\n\t\t\tbreak;\r\n\t\tcase Cell.DataType.Date:\r\n\t\t\tthis.text.value = value;\r\n\r\n\t\t\tbreak;\r\n\t\tcase Cell.DataType.Number:\r\n\t\t\tif (bindingType.isIEEE754Compliant(value)) {\r\n\t\t\t\tthis.text.value = value;\r\n\r\n\t\t\t\tif (this[Cell._cellTypeProperty]) {\r\n\t\t\t\t\tthis.remove(Cell._cellTypeProperty);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\t/* Handle fallback case and insert value as SharedString */\r\n\t\t\tbindingType = this._oFallbackType;\r\n\t\t\tvalue = bindingType.getValue(sProperty, oBusinessObject);\r\n\r\n\t\t\tif (!this[Cell._cellTypeProperty]) {\r\n\t\t\t\tthis.addAttribute({\r\n\t\t\t\t\tid: Cell._cellTypeProperty,\r\n\t\t\t\t\tname: 't',\r\n\t\t\t\t\tvalue: Cell.DataType.SharedString // Default cell type\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// CAUTION: break is omitted intentionally\r\n\r\n\t\tdefault: // SharedString is the default case\r\n\t\t\tthis.text.value = this._shared.insert(value);\r\n\t}\r\n\r\n\t/*\r\n\t * Forces a style update once the value changed. This allows cell\r\n\t * specific styles for currency types. Due to the fact that the\r\n\t * Style ID gets cached within the Type, there is no performance\r\n\t * impact even on large data sets.\r\n\t */\r\n\tthis.setStyle(bindingType.getStyleId(oBusinessObject, value));\r\n};\r\n\r\n/**\r\n * Checks whether there is a value provided or not. Allowed values\r\n * are Stringsas well as numeric and boolean values. Empty Strings\r\n * will be evaluated as no value, but the numeric value 0 is a value.\r\n *\r\n * @param {(string|number|boolean|Array)} data - The value that gets checked\r\n * @returns {boolean} - true if a value is present, false if not\r\n * @private\r\n */\r\nCell.prototype._isValuePresent = function(data) {\r\n\treturn ((typeof data === 'string' && !!data)\r\n\t\t|| typeof data === 'number'\r\n\t\t|| typeof data === 'boolean'\r\n\t\t|| data instanceof Date);\r\n};\r\n\r\nmodule.exports = Cell;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/Cell.js\n// module id = 3\n// module chunks = 0","var Numeric = require('./Numeric'),\r\n\tCurrencySettings = require('./CurrencySettings');\r\n\r\n/**\r\n * The Currency class represents a currency data type. It handles the\r\n * formatting and accepts several options like second property for\r\n * the unit of measurement or if the unit of measurement should be\r\n * displayed.\r\n *\r\n * It styles currencies with its particular amount of decimals.\r\n *\r\n * @param {Object} oConfig - A configuration object that is used to specify the formatting\r\n * @param {string} oConfig.unitProperty - A custom format string that will be used as template\r\n * @param {boolean} [oConfig.displayUnit] - Indicating whether the unit of measurement will be shown (default: true)\r\n * @param {number} [oConfig.scale] - A fixed scale that will be applied to all cells within this column,\r\n * regardless of its particular unit of measurement\r\n * @constructor\r\n */\r\nfunction Currency(oConfig) {\r\n\tNumeric.call(this, oConfig);\r\n\r\n\tthis.displayUnit = oConfig && typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\r\n}\r\n\r\nCurrency.prototype = Object.create(Numeric.prototype);\r\nCurrency.prototype.constructor = Currency;\r\n\r\n/**\r\n * Returns the currency specific scale.\r\n *\r\n * @param {string} sCurrency - ISO currency code like USD for $ and EUR for € etc.\r\n * @returns {number} A number between 2 and 3 depending on the scale of the given currency\r\n * @public\r\n * @static\r\n */\r\nCurrency.getCurrencyScale = function(sCurrency) {\r\n\tvar iScale;\r\n\r\n\tiScale = CurrencySettings.DIGITS[sCurrency];\r\n\r\n\t/* If the currency uses the default scale */\r\n\tif (typeof iScale !== 'number') {\r\n\t\tiScale = CurrencySettings.DIGITS.DEFAULT;\r\n\t}\r\n\r\n\treturn iScale;\r\n};\r\n\r\n/**\r\n * Creates the Style configuration needed for registering the Type\r\n * specific styling in the Styles class.\r\n *\r\n * @param {Object} oData - Business object that gets bound to the styling template\r\n * @returns {Object} - Styling configuration object\r\n * @protected\r\n */\r\nCurrency.prototype._createConfiguration = function(oData) {\r\n\tvar i, j, scale, template, unit;\r\n\r\n\t// TODO implement inheritance with Numeric class\r\n\r\n\ttemplate = '#,##0';\r\n\r\n\t/* Apply fixed scale, only if no unitProperty is provided */\r\n\tif (!this.unitProperty && typeof this.scale === 'number') {\r\n\t\tscale = this.scale;\r\n\t} else {\r\n\t\tscale = Currency.getCurrencyScale(oData[this.unitProperty]);\r\n\t}\r\n\r\n\t/* Apply separator or placeholder */\r\n\ttemplate += (scale > 0) ? '.' : '_.';\r\n\r\n\tfor (i = 0; i < scale; i++) {\r\n\t\ttemplate += '0';\r\n\t}\r\n\r\n\tfor (j = CurrencySettings.DEFAULT_SCALE - scale; j > 0; j--) {\r\n\t\ttemplate += '_0';\r\n\t}\r\n\r\n\t/* Add unit of measurement if required */\r\n\tif (this.displayUnit) {\r\n\t\tunit = oData[this.unitProperty] ? '\"' + oData[this.unitProperty] + '\"' : '_E_U_R';\r\n\r\n\t\t// Applies unit of measurement or a placeholder if unit is empty\r\n\t\ttemplate = template + '\\\\ ' + unit;\r\n\t}\r\n\r\n\t// Add formatting for negative values as well\r\n\ttemplate = '* ' + template + ';* \\\\-\\\\ ' + template;\r\n\r\n\treturn { numberFormat: { format: template } };\r\n};\r\n\r\nmodule.exports = Currency;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Currency.js\n// module id = 4\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The Numeric class represents a numeric data type. Numeric data can\r\n * handle several options like thousands delimiter, decimal (scale)\r\n * and different types like 'percent' and 'exponential'.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {boolean} [oConfig.delimiter] - Indicates if a thousands delimiter should be used\r\n * @param {number} [oConfig.scale] - Defines the amount of decimals\r\n * @param {string} [oConfig.unit] - Specifies a particular unit of measurement\r\n * @param {string} [oConfig.unitProperty] - Specifies a property that contains the unit of measurement\r\n * @constructor\r\n */\r\nfunction Numeric(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.unit = oConfig ? oConfig.unit : null;\r\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\r\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\r\n\tthis.scale = oConfig ? oConfig.scale : null;\r\n\r\n\tthis.styleIds = {};\r\n}\r\n\r\nNumeric.prototype = Object.create(Type.prototype);\r\nNumeric.prototype.constructor = Numeric;\r\n\r\nNumeric.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\nNumeric.builtin = {\r\n\t1: '0',\r\n\t2: '0.00',\r\n\t3: '#,##0',\r\n\t4: '#,##0.00',\r\n\t9: '0%',\r\n\t10: '0.00%',\r\n\t11: '0.00E+00',\r\n\t12: '# ?/?',\r\n\t13: '# ??/??',\r\n\t37: '#,##0;(#,##0)',\r\n\t38: '#,##0;[Red](#,##0)',\r\n\t39: '#,##0.00;(#,##0.00)',\r\n\t40: '#,##0.00;[Red](#,##0.00)',\r\n\t48: '##0.0E+0'\r\n};\r\n\r\nNumeric.scientificRegEx = /^-?\\d?(\\.\\d)?\\d*[eE][+-]?\\d{1,3}$/;\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @param {Object} oData - Business object that contains additional data that is used for the formatting\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @protected\r\n */\r\nNumeric.prototype._createConfiguration = function(oData) {\r\n\tvar config, i, key,\ttemplate, unit;\r\n\r\n\tconfig = Object.getPrototypeOf(Numeric.prototype)._createConfiguration.call(this);\r\n\r\n\t/*\r\n\t * Evaluate unit of measurement first because a plain built-in\r\n\t * format is used as template but we need to be able to return\r\n\t * to the DEFAULT value in case the unit is empty or invalid.\r\n\t */\r\n\r\n\t/* Obtain unit of measurement if available */\r\n\tif (typeof this.unitProperty === 'string' && oData) {\r\n\t\tunit = oData[this.unitProperty];\r\n\t} else if (typeof this.unit === 'string') {\r\n\t\tunit = this.unit;\r\n\t}\r\n\r\n\tif (typeof unit !== 'string' || unit === '\"') {\r\n\t\tunit = '';\r\n\t}\r\n\r\n\tif (!this.delimiter && typeof this.scale !== 'number' && !unit) {\r\n\t\tconfig.numberFormat = Numeric.DEFAULT.numberFormat;\r\n\r\n\t\treturn config;\r\n\t}\r\n\r\n\t// Use built-in template as base\r\n\ttemplate = Numeric.builtin[1];\r\n\r\n\tif (this.delimiter) {\r\n\t\ttemplate = '#,##' + template;\r\n\t}\r\n\r\n\t/* Add decimal*/\r\n\tif (typeof this.scale === 'number' && this.scale > 0) {\r\n\t\ttemplate += '.';\r\n\r\n\t\tfor (i = 0; i < this.scale; i++) {\r\n\t\t\ttemplate += '0';\r\n\t\t}\r\n\t}\r\n\r\n\t/* Apply unit if present */\r\n\tif (unit) {\r\n\t\ttemplate += '\\\\ \"' + unit + '\"';\r\n\t}\r\n\r\n\tconfig.numberFormat = {\r\n\t\tformat: template\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in Numeric.builtin) {\r\n\t\tif (Numeric.builtin[key] === template) {\r\n\t\t\tconfig.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for the UoM\r\n * @param {string|number} [value] - Explicit cell value that might be used for semantic formatting\r\n * @returns {number} - ID of the registered Style\r\n */\r\nNumeric.prototype.getStyleId = function(oData, value) {\r\n\tvar styleId, unit;\r\n\r\n\t/* Handle simple numeric without unitProperty */\r\n\tif (!this.unitProperty) {\r\n\t\treturn Object.getPrototypeOf(Numeric.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tunit = oData[this.unitProperty];\r\n\tstyleId = this.styleIds[unit];\r\n\r\n\tif (typeof styleId === 'undefined') {\r\n\t\tthis.styleIds[unit] = this.styles.addStyle(this._createConfiguration(oData));\r\n\t}\r\n\r\n\treturn this.styleIds[unit];\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. The value is normalized so that different input\r\n * representations will result in the same format.\r\n *\r\n * @param {string} sProperty - Name of the property that shall be accessed\r\n * @param {Object} oData - Business object that contains the data\r\n *\r\n * @returns {string|number|boolean|null} - The value of the given property after type specific processing.\r\n */\r\nNumeric.prototype.getValue = function(sProperty, oData) {\r\n\tvar aSegments, iScale, iExponent, sValue = oData[sProperty];\r\n\r\n\tif (typeof sValue == 'string' && Numeric.scientificRegEx.test(sValue)) {\r\n\r\n\t\taSegments = sValue.split(/\\.|[eE]/g);\r\n\t\tiScale = aSegments.length === 3 ? aSegments[1].length : 0;\r\n\t\tiExponent = Number(aSegments[aSegments.length - 1]);\r\n\r\n\t\t/* According to OData V4 Edm.Double is an IEEE 754 binary64 floating-point number (15-17 decimal digits) */\r\n\t\tsValue = Number(sValue).toFixed(Math.max(iScale - iExponent, 0));\r\n\r\n\t\t/* Write back the transformed value to avoid subsequent transformations */\r\n\t\toData[sProperty] = sValue;\r\n\t}\r\n\r\n\treturn sValue;\r\n};\r\n\r\n/**\r\n * Checks if the given value can be displayed in the IEEE 754\r\n * specification format. The function ignores leading and trailing\r\n * zeros and compares the length of the actual value does not exceed\r\n * 15 digits plus an optional decimal separator.\r\n *\r\n * The number might exceed 15 digits if it contains leading or\r\n * trailing zeros.\r\n *\r\n * @param {string} sValue - Numeric value that needs to be checked\r\n * @returns {boolean} - Whether the number needs to be formatted as BigNumber or not\r\n */\r\nNumeric.prototype.isIEEE754Compliant = function(sValue) {\r\n\tvar bCompliant = false;\r\n\r\n\tif (typeof sValue == 'number') {\r\n\t\tsValue = '' + sValue;\r\n\t}\r\n\r\n\tif (typeof sValue == 'string') {\r\n\r\n\t\tbCompliant = sValue\r\n\t\t\t.replace(/^-*0*|0+$/g, '')\r\n\t\t\t.split('.')\r\n\t\t\t.reduce(function(acc, value) {\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * Returns 1 if the value left of the separator is\r\n\t\t\t\t * zero and was cut of by removing leading and trailing zeros\r\n\t\t\t\t */\r\n\t\t\t\treturn (acc + value.length) || 1;\r\n\t\t\t}, 0) <= 15;\r\n\t}\r\n\r\n\treturn bCompliant;\r\n};\r\n\r\nmodule.exports = Numeric;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Numeric.js\n// module id = 5\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The Alignment class defines the alignment of content within the\r\n * sheet cells. The Alignment is assigned to a particular Style that\r\n * is registered in the Styles class.\r\n *\r\n * @constructor\r\n */\r\nfunction Alignment() {\r\n\tXMLNode.call(this, Alignment.metadata);\r\n}\r\n\r\nAlignment.prototype = Object.create(XMLNode.prototype);\r\nAlignment.prototype.constructor = Alignment;\r\n\r\nAlignment.metadata = {\r\n\ttag: 'alignment'\r\n};\r\n\r\nAlignment.horizontal = {\r\n\tLEFT: 'left',\r\n\tCENTER: 'center',\r\n\tRIGHT: 'right',\r\n\tcontains: function(sAlign) {\r\n\r\n\t\treturn _contains(sAlign, Alignment.horizontal);\r\n\t}\r\n};\r\n\r\nAlignment.vertical = {\r\n\tTOP: 'top',\r\n\tMIDDLE: 'middle',\r\n\tBOTTOM: 'bottom',\r\n\tcontains: function(sAlign) {\r\n\r\n\t\treturn _contains(sAlign, Alignment.vertical);\r\n\t}\r\n};\r\n\r\n/**\r\n * Checks whether the requested alignment is contained or not. An\r\n * alignment that is contained can be assigned within styles. Other\r\n * alignments that are not contained are not supported and thus not\r\n * assignable. It differentiates between horizontal and vertical\r\n * alignments, depending on the aggregation that was provided.\r\n *\r\n * @param {string} sAlign - The alignment that should be checked\r\n * @param {Array} oAggregation - The aggregation the alignment might be in\r\n * @returns {boolean} - Returns true if the alignment is supported\r\n * @private\r\n */\r\nfunction _contains(sAlign, oAggregation) {\r\n\tvar key, contained = false;\r\n\r\n\tfor (key in oAggregation) {\r\n\t\tcontained = contained ? contained : oAggregation[key] === sAlign && typeof oAggregation[key] !== 'function';\r\n\t}\r\n\r\n\treturn contained;\r\n}\r\n\r\nAlignment.prototype.isDefault = function() {\r\n\treturn this.attributes.length == 0;\r\n};\r\n\r\n/**\r\n * Assigns the given indent to this Alignment object.\r\n *\r\n * @param {number} nIndent - Numerical value used as indentation\r\n */\r\nAlignment.prototype.setIndent = function(nIndent) {\r\n\r\n\t/* Remove indent */\r\n\tif (typeof nIndent != 'number' || nIndent <= 0) {\r\n\t\tthis.remove('indent');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('indent', nIndent);\r\n\r\n\t/* A correct indent requires an explicit horizontal alignment */\r\n\tif (!this.horizontal) {\r\n\t\tthis.setHorizontalAlignment(Alignment.horizontal.LEFT);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Configures the wrapText attribute of the alignment which is used\r\n * for multiline text support.\r\n *\r\n * @param {boolean} bWrap - Defines if wrapping is enabled or disabled\r\n */\r\nAlignment.prototype.setWrapText = function(bWrap) {\r\n\tvar wrappingAttribute = 'wrapText';\r\n\r\n\r\n\tif (bWrap) {\r\n\t\tthis._setAlignmentAttribute(wrappingAttribute, '1');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (this[wrappingAttribute]) {\r\n\t\tthis.remove(wrappingAttribute);\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given alignment as horizontal alignment.\r\n *\r\n * @param {string} sAlign - Horizontal alignment that gets applied\r\n */\r\nAlignment.prototype.setHorizontalAlignment = function(sAlign) {\r\n\r\n\t/* Ignore invalid values */\r\n\tif (!Alignment.horizontal.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('horizontal', sAlign);\r\n};\r\n\r\n/**\r\n * Applies the given alignment as vertical alignment.\r\n *\r\n * @param {string} sAlign - Vertical alignment that gets applied\r\n */\r\nAlignment.prototype.setVerticalAlignment = function(sAlign) {\r\n\r\n\t/* Ignore invalid values */\r\n\tif (!Alignment.vertical.contains(sAlign)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._setAlignmentAttribute('vertical', sAlign);\r\n};\r\n\r\n/**\r\n * Assigns the given value as a named property on this Alignment object.\r\n *\r\n * @param {string} sId - The named property id\r\n * @param {number|string} value - Textual or numerical value\r\n * @private\r\n */\r\nAlignment.prototype._setAlignmentAttribute = function(sId, value) {\r\n\r\n\t/* Create attribute if not present */\r\n\tif (!this[sId]) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: sId,\r\n\t\t\tname: sId\r\n\t\t});\r\n\t}\r\n\r\n\tthis[sId].value = value;\r\n};\r\n\r\n/**\r\n * Access the given alignment attribute and return its value. This is a shorthand\r\n * function to access the value without having to check for the existence of the\r\n * attribute itself.\r\n *\r\n * @param {string} sId - Alignment attribute that will be returned\r\n * @return {string|number} - value of the given alignment attribute\r\n * @private\r\n */\r\nAlignment.prototype._getAlignmentAttribute = function(sId) {\r\n\treturn this[sId] && this[sId].value;\r\n};\r\n\r\nAlignment.prototype.equals = function(oAlignment) {\r\n\treturn typeof oAlignment !== 'undefined' && oAlignment !== null\r\n\t\t&& this._getAlignmentAttribute('vertical') == oAlignment._getAlignmentAttribute('vertical')\r\n\t\t&& this._getAlignmentAttribute('horizontal') == oAlignment._getAlignmentAttribute('horizontal')\r\n\t\t&& this._getAlignmentAttribute('indent') == oAlignment._getAlignmentAttribute('indent')\r\n\t\t&& this._getAlignmentAttribute('wrapText') == oAlignment._getAlignmentAttribute('wrapText');\r\n};\r\n\r\nmodule.exports = Alignment;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Alignment.js\n// module id = 6\n// module chunks = 0","/**\r\n * The XMLElement is an abstract base class that can store a\r\n * particular value and escape XML specific characters.\r\n *\r\n * @param {Object} oConfig - Configuration object that contains the value of this XML Element\r\n * @constructor\r\n * @abstract\r\n */\r\nfunction XMLElement(oConfig) {\r\n\tthis.value = oConfig && (oConfig.value || typeof oConfig.value === 'number') ? oConfig.value : '';\r\n}\r\n\r\n/**\r\n * Escapes the given String value to fulfill the requirements of\r\n * XML encoded characters. If the String does not contain any\r\n * character that needs to be encoded, the original String will\r\n * be returned.\r\n *\r\n * This significantly increases the performance because the\r\n * initial regular expression match is much faster than the\r\n * String replace function. We assume that only a few Strings\r\n * need to be encoded.\r\n *\r\n * The following characters need to be encoded:\r\n * < (lower than)\r\n * > (greater than)\r\n * \" (quotes)\r\n * & (ampersand)\r\n *\r\n * @param {string} sValue - The value that needs to be XML encoded\r\n * @returns {string} - XML encoded String\r\n */\r\nXMLElement.prototype.xmlEncode = function(sValue) {\r\n\treturn typeof sValue === 'string' && sValue.match(/[><\"&]+/) !== null ? this._replace(sValue) : sValue;\r\n};\r\n\r\n/**\r\n * @see _xmlEncode\r\n * @param {string} sValue - The string that contains characters that needs to be replaced\r\n * @returns {string} - XML encoded String\r\n * @private\r\n */\r\nXMLElement.prototype._replace = function(sValue) {\r\n\r\n\t/**\r\n\t * Perform ampersand replacement first to avoid encoding the\r\n\t * control ampersand of other encoded characters.\r\n\t *\r\n\t * i.E. >& should be encoded as &gt;&amp; instead of &amp;gt;&amp;\r\n\t */\r\n\treturn sValue\r\n\t\t.replace(/&/g, '&amp;')\r\n\t\t.replace(/</g, '&lt;')\r\n\t\t.replace(/>/g, '&gt;')\r\n\t\t.replace(/\"/g, '&quot;');\r\n};\r\n\r\nmodule.exports = XMLElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLElement.js\n// module id = 7\n// module chunks = 0","var\tXMLFile = require('../xml/XMLFile'),\r\n\tXMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * @param {ReferenceNode} oReferenceNode - ReferenceNode object that is the root of this Relationships XMLFile\r\n * @constructor\r\n */\r\nfunction Relationships(oReferenceNode) {\r\n\tXMLFile.call(this, Relationships.metadata);\r\n\r\n\tif (oReferenceNode instanceof XMLFile) {\r\n\t\tthis.setFileName(oReferenceNode.getFileName() + '.rels');\r\n\t\tthis.setPath(oReferenceNode.getPath() + '_rels/');\r\n\t}\r\n}\r\n\r\nRelationships.prototype = Object.create(XMLFile.prototype);\r\nRelationships.prototype.constructor = Relationships;\r\n\r\nRelationships.metadata = {\r\n\tfilename: '.rels',\r\n\tpath: '_rels/',\r\n\ttag: 'Relationships',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/relationships'\r\n\t\t}\r\n\t],\r\n\tproperties: []\r\n};\r\n\r\n/**\r\n * Creates a new Relationship entry for the current collection.\r\n * The Relationship references are defined by the ISO/IEC 29500-1:2016 standard.\r\n *\r\n * @param {string} sTarget - Target file within the generated Excel\r\n * @param {string} sType - XMLNS reference of the targets file type\r\n * @returns {string} The newly created relationship id that can be referenced i.E. \"rId4\"\r\n */\r\nRelationships.prototype.addRelationship = function(sTarget, sType) {\r\n\tvar id = 'rId' + (this.childs.length + 1);\r\n\r\n\tthis.childs.push(new XMLNode({\r\n\t\ttag: 'Relationship',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Id',\r\n\t\t\t\tvalue: id\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Type',\r\n\t\t\t\tvalue: sType\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Target',\r\n\t\t\t\tvalue: sTarget\r\n\t\t\t}\r\n\t\t]\r\n\t}));\r\n\r\n\treturn id;\r\n};\r\n\r\nmodule.exports = Relationships;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/Relationships.js\n// module id = 8\n// module chunks = 0","var XMLFile\t\t = require('../xml/XMLFile'),\r\n\tRow\t\t\t = require('./Row');\r\n\r\n/**\r\n * This class represents a Sheet within an Office Open XML Spreadsheet.\r\n * @param {Object} oColumnConfiguration - ColumnConfiguration object that provides information about the columns\r\n * @constructor\r\n */\r\nfunction Sheet(oColumnConfiguration) {\r\n\tXMLFile.call(this, Sheet.metadata);\r\n\r\n\tObject.defineProperty(this, '_columns', {value: oColumnConfiguration, writable: false});\r\n\r\n\tthis._hierarchyProperty = oColumnConfiguration._hierarchyProperty;\r\n\tthis._hierarchyLevel = 0;\r\n\tthis._rowCount = 0;\r\n\tthis._createCols();\r\n\tthis._createHeader();\r\n}\r\n\r\nSheet.prototype = Object.create(XMLFile.prototype);\r\nSheet.prototype.constructor = Sheet;\r\n\r\nSheet.metadata = {\r\n\ttag: 'worksheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'sheetPr',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'outlinePr',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'summaryBelow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'dimension',\r\n\t\t\ttag: 'dimension',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'views',\r\n\t\t\ttag: 'sheetViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'defaultView',\r\n\t\t\t\t\ttag: 'sheetView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'workbookViewId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tproperties: [\r\n\r\n\t\t\t\t\t\t/* Freezes the header row */\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tid: 'pane',\r\n\t\t\t\t\t\t\ttag: 'pane',\r\n\t\t\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'ySplit',\r\n\t\t\t\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'topLeftCell',\r\n\t\t\t\t\t\t\t\t\tvalue: 'A2'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'activePane',\r\n\t\t\t\t\t\t\t\t\tvalue: 'bottomLeft'\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tname: 'state',\r\n\t\t\t\t\t\t\t\t\tvalue: 'frozen'\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\ttag: 'sheetFormatPr',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultRowHeight',\r\n\t\t\t\t\tvalue: '15'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'columns',\r\n\t\t\ttag: 'cols'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'data',\r\n\t\t\ttag: 'sheetData'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'filter',\r\n\t\t\ttag: 'autoFilter',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'reference',\r\n\t\t\t\t\tname: 'ref',\r\n\t\t\t\t\tvalue: 'A1' // Default dimension of an empty Sheet\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'pageMargins',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'left',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'right',\r\n\t\t\t\t\tvalue: '0.75'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'top',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bottom',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'header',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'footer',\r\n\t\t\t\t\tvalue: '0.5'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nSheet.MAX_ROWS = 1048576;\r\n\r\n/**\r\n * Creates the column specific information within the worksheet.\r\n * Column specific information is i.E. the width or the use of the\r\n * bestFit functionality.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createCols = function() {\r\n\tvar col, i, minWidth, width,\r\n\t\tautoFitButtonOffset = 2.4;\r\n\r\n\t/**\r\n\t * Inner function for calculating the column width. The function\r\n\t * will ceil the width to the next step of 0.25 so that the\r\n\t * result mod step is 0.\r\n\t * @param {number} nWidth - The width that needs to be adjusted\r\n\t * @returns {number}  A width rounded to the accuracy of 0.25\r\n\t */\r\n\tfunction roundWidth(nWidth) {\r\n\t\tvar factor, step;\r\n\r\n\t\tstep = 0.25;\r\n\t\tfactor = 1 / step;\r\n\r\n\t\treturn Math.ceil(nWidth * factor) / factor;\r\n\t}\r\n\r\n\tfor (i = 0; i < this._columns.size(); i++) {\r\n\t\tcol = this._columns.columns[i];\r\n\t\tminWidth = this._calculateColumnWidth(col.label.length) + autoFitButtonOffset;\r\n\t\twidth = roundWidth(Math.max(this._calculateColumnWidth(col.width), minWidth));\r\n\r\n\t\tthis.columns.addChild({\r\n\t\t\ttag: 'col',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'min',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'max',\r\n\t\t\t\t\tvalue: (i + 1)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'bestFit',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'width',\r\n\t\t\t\t\tvalue: Math.max(width, minWidth)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'customWidth',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * This method calculates the optimal column width for the given\r\n * amount of characters. It removes the dependency on font size or\r\n * pixel width.\r\n *\r\n * @param {number} nCharacters - Amount of characters that should fit into the column\r\n * @return {number} Excel internal width value corresponding to the used font size\r\n * @private\r\n */\r\nSheet.prototype._calculateColumnWidth = function(nCharacters) {\r\n\tvar defaultFontSize = 11, // Needs to be adjusted once we support different font sizes\r\n\t\tdefaultPaddingAndBorder = 5,\r\n\t\tscaleFactor = 7.33;\r\n\r\n\tif (typeof nCharacters !== 'number') {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\treturn (((nCharacters * 2 / 3) * defaultFontSize) + defaultPaddingAndBorder) / scaleFactor;\r\n};\r\n\r\n/**\r\n * Sets the maximal hierarchy depth of this Sheet. The value will\r\n * only be changed if the given depth is higher than the previous\r\n * depth.\r\n *\r\n * @param {number} nHierarchyDepth - Numerical hierarchy depth\r\n * @private\r\n */\r\nSheet.prototype._setHierarchyDepth = function(nHierarchyDepth) {\r\n\r\n\t/* The maximum supported hierarchy depth is 7 */\r\n\tif (typeof nHierarchyDepth !== 'number' || nHierarchyDepth < 1 || nHierarchyDepth > 7) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!this.format.hierarchyDepth) {\r\n\t\tthis.format.addAttribute({\r\n\t\t\tid: 'hierarchyDepth',\r\n\t\t\tname: 'outlineLevelRow',\r\n\t\t\tvalue: nHierarchyDepth || 0\r\n\t\t});\r\n\t}\r\n\r\n\tthis.format.hierarchyDepth.value = Math.max(this.format.hierarchyDepth.value, nHierarchyDepth);\r\n};\r\n\r\n/**\r\n * Requests the header Row from the ColumnConfiguration and adds it to the\r\n * sheet.\r\n *\r\n * @private\r\n */\r\nSheet.prototype._createHeader = function() {\r\n\tvar headerRow = this._columns.getHeader();\r\n\r\n\tif (headerRow === null) {\r\n\t\tthis.remove('filter');\r\n\t\tthis.views.defaultView.remove('pane');\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis._appendRow(headerRow);\r\n};\r\n\r\n/**\r\n * Adds the specified Row to the sheetData element of this Sheet and\r\n * automatically propagates its row index to the row and its cells.\r\n *\r\n * @param {Object} oRow - The Row object that should be appended to the current Sheet\r\n * @private\r\n */\r\nSheet.prototype._appendRow = function(oRow) {\r\n\tvar dimension, sSerializedRow;\r\n\r\n\tthis._rowCount++;\r\n\toRow.setReference('' + (this._rowCount));\r\n\r\n\tsSerializedRow = oRow.serialize();\r\n\r\n\t/* Bundle two rows into one string */\r\n\tif (this._rowCount % 2 === 0) {\r\n\t\tsSerializedRow = this.data.childs.pop() + sSerializedRow;\r\n\t}\r\n\r\n\t/*\r\n\t * Serializing the rows would create concatenated strings that are represented by a binary\r\n\t * tree that references all substrings as leaves. This increases the memory usage massively.\r\n\t *\r\n\t * To avoid this string representation we need to convert the concatenated string to a\r\n\t * sequential string by using String#split and Array#join. This reduces memory consumption\r\n\t * and due to less Garbage Collection runs, also the runtime, although there is additional\r\n\t * effort to convert the strings.\r\n\t *\r\n\t * Additional information can be found here:\r\n\t * https://bugs.chromium.org/p/v8/issues/detail?id=2869\r\n\t */\r\n\tthis.data.childs.push((' ' + sSerializedRow).substr(1));\r\n\r\n\t/* Update sheet dimension */\r\n\tdimension = 'A1:' + Row.getColumnReferenceByIndex(this._columns.size() - 1) + this._rowCount;\r\n\r\n\tthis.dimension.reference.value = dimension;\r\n\r\n\tif (this.filter) {\r\n\t\tthis.filter.reference.value = dimension;\r\n\t}\r\n\r\n\r\n};\r\n\r\n/**\r\n * Creates a new group inside the sheet with the given hierarchy\r\n * level. All subsequent data rows will be assigned to this group.\r\n *\r\n * @function createGroup\r\n * @param {string} sName - Name of the group that will be displayed in the group header\r\n * @param {number} nLevel - Hierarchy level that will be used for outlining\r\n */\r\nSheet.prototype.createGroup = function(sName, nLevel) {\r\n\tvar groupHeaderRow;\r\n\r\n\tthis._hierarchyLevel = nLevel;\r\n\tgroupHeaderRow = this._columns.getGroupHeader(sName);\r\n\r\n\tthis._appendRow(groupHeaderRow);\r\n};\r\n\r\n/**\r\n * Requests a row from the ColumnConfiguration containing the given data\r\n * and adds it to the sheetData element of this Sheet.\r\n *\r\n * The maximum row limit is 1,048,576 but the user rather runs out of\r\n * memory than reaching this limit.\r\n *\r\n * @function insert\r\n * @param {Object} oData - Data object to be inserted\r\n */\r\nSheet.prototype.insert = function(oData) {\r\n\tvar nHierarchyLevel;\r\n\r\n\tif (this._rowCount >= Sheet.MAX_ROWS) {\r\n\t\tthrow new Error('Row limit reached.');\r\n\t}\r\n\r\n\tnHierarchyLevel =\r\n\t\tthis._columns.hierarchyLevelProperty ? oData[this._columns.hierarchyLevelProperty] : this._hierarchyLevel;\r\n\r\n\t/* Create row and apply binding */\r\n\tthis._appendRow(this._columns.bind(oData, nHierarchyLevel));\r\n\tthis._setHierarchyDepth(nHierarchyLevel);\r\n};\r\n\r\n/**\r\n * Cleanup hook that gets executed when the XMLFil#serialize function\r\n * is called with the finalize flag.\r\n *\r\n * @private\r\n */\r\nSheet.prototype.cleanup = function() {\r\n\tthis.remove('data');\r\n};\r\n\r\n/**\r\n * Returns the current row count of the Worksheet.\r\n *\r\n * @returns {number} - The amount of rows that are contained in this Worksheet\r\n *\r\n * @public\r\n */\r\nSheet.prototype.getRowCount = function() {\r\n\treturn this._rowCount;\r\n};\r\n\r\nmodule.exports = Sheet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/Sheet.js\n// module id = 9\n// module chunks = 0","/**\r\n * Created by Sebastian Bender on 16.03.2017.\r\n */\r\nvar XMLNode = require('../xml/XMLNode');\r\nvar Cell\t= require('./Cell');\r\n\r\n/**\r\n * The Row is representing a single row according to the Office Open\r\n * XML standard. A Row provides information about its index (line\r\n * number) and can contain several Cell objects.\r\n *\r\n * @class\r\n */\r\nfunction Row() {\r\n\tXMLNode.call(this, Row.metadata);\r\n}\r\n\r\nRow.prototype = Object.create(XMLNode.prototype);\r\nRow.prototype.constructor = Row;\r\n\r\nRow.metadata = {\r\n\ttag: 'row',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'reference',\r\n\t\t\tname: 'r',\r\n\t\t\tvalue: ''\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'spans',\r\n\t\t\tname: 'spans',\r\n\t\t\tvalue: '1:1'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Calculates the Office Open XML Spreadsheet column reference for a\r\n * numeric value. Referring to the standard, the column is described\r\n * as a alphabetical value consisting of at least one uppercase character.\r\n * This function maps these alphabetical representation to numerical\r\n * zero-based indices.\r\n *\r\n * i.E. the column index 27 (which is the 28th column) results in 'AB'\r\n *\r\n * @param {number} nIndex - Numerical index for the requested column\r\n * @returns {string} - The alphabetical column reference for the given index.\r\n */\r\nRow.getColumnReferenceByIndex = function(nIndex) {\r\n\treturn nIndex < 26 ?\r\n\t\tString.fromCharCode(65 + nIndex) :\r\n\t\tRow.getColumnReferenceByIndex(Math.floor(nIndex / 26) - 1) + String.fromCharCode(65 + (nIndex % 26));\r\n};\r\n\r\n\r\n/**\r\n * Update the 'spans' attribute on this particular {@link Row} for\r\n * optimization purposes. This property optimizes the loading and\r\n * rendering in Microsoft Excel.\r\n *\r\n * @private\r\n */\r\nRow.prototype._updateSpans = function() {\r\n\tthis.spans.value = '1:' + this.childs.length;\r\n};\r\n\r\n/**\r\n * Adds the specified {@link Cell} to the current {@link Row}. If the\r\n * current row already has a reference or style, it will propagate\r\n * this information to the newly added Cell.\r\n *\r\n * @param {object} oCell - Instance of Excel.objects.Cell\r\n */\r\nRow.prototype.addCell = function(oCell) {\r\n\tvar count;\r\n\r\n\tif (!oCell || !(oCell instanceof Cell)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tcount = this.childs.push(oCell);\r\n\tthis._updateSpans();\r\n\r\n\t/* Applies the cell reference if row reference is already present */\r\n\tif (this.reference.value) {\r\n\t\toCell.setReference(Row.getColumnReferenceByIndex(count - 1) + this.reference.value);\r\n\t}\r\n\r\n\tif (this.style) {\r\n\t\toCell.setStyle(this.style.value);\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Updates the reference of the current {@link Row}. The Row reference\r\n * represents the line number within the Sheet. It will\r\n * automatically update all assigned Cell references.\r\n *\r\n * @param {string} sReference - Row number within the sheet\r\n */\r\nRow.prototype.setReference = function(sReference) {\r\n\tvar i, reference;\r\n\r\n\treference = typeof sReference == 'number' ? String(sReference) : sReference;\r\n\tif (!reference || !reference.match(/^[1-9]+[0-9]*$/g)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/* Only update if necessary */\r\n\tif (this.reference.value != reference) {\r\n\t\tthis.reference.value = reference;\r\n\t\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\t\tthis.childs[i].setReference(Row.getColumnReferenceByIndex(i) + reference);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Applies the given {@link Style} to the current {@link Row}.\r\n *\r\n * @param {(number|string)} nStyle - A number or string representing the Style id\r\n */\r\nRow.prototype.setStyle = function(nStyle) {\r\n\tvar i, style;\r\n\r\n\tif (!this.style) {\r\n\t\tstyle = this.addAttribute({name: 's'});\r\n\t\tObject.defineProperty(this, 'style', {value: style});\r\n\t}\r\n\r\n\tthis.style.value = nStyle;\r\n\tfor (i = 0; i < this.childs.length; i++) {\r\n\t\tthis.childs[i].setStyle(nStyle);\r\n\t}\r\n};\r\n\r\nmodule.exports = Row;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/Row.js\n// module id = 10\n// module chunks = 0","var Type = require('./Type');\r\nvar Currency = require('./Currency');\r\nvar Alignment = require('../../style/Alignment');\r\n\r\n/**\r\n * The BigNumber class represents string formatted number with\r\n * specific formatting. It provides font and sizing details that\r\n * can be used by the Styles class.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this BigNumber type\r\n * @constructor\r\n */\r\nfunction BigNumber(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.displayUnit = oConfig && typeof oConfig.displayUnit === 'boolean' ? oConfig.displayUnit : true;\r\n\tthis.unit = oConfig ? oConfig.unit : null;\r\n\tthis.unitProperty = oConfig ? oConfig.unitProperty : null;\r\n\tthis.delimiter = oConfig ? oConfig.delimiter : false;\r\n\tthis.scale = oConfig ? oConfig.scale : null;\r\n\r\n\t/**\r\n\t * Due to default text alignment LTR, we need to invert the\r\n\t * alignment so that it reflects the default number alignment\r\n\t */\r\n\tthis.alignment = this.alignment === null ? Alignment.horizontal.RIGHT : Alignment.horizontal.LEFT;\r\n}\r\n\r\nBigNumber.prototype = Object.create(Type.prototype);\r\nBigNumber.prototype.constructor = BigNumber;\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. If a template is configured, it will automatically fill\r\n * the template with the values from the business object and returns\r\n * the processed string.\r\n *\r\n * @param {string} property - Name of the property that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean|null} - The value of the given property after type specific processing.\r\n * Returns null if no value is present or the value cannot be processed by this type.\r\n */\r\nBigNumber.prototype.getValue = function(property, oData) {\r\n\tvar iScale, sResult, sUnit, sValue;\r\n\r\n\tsValue = oData[property];\r\n\r\n\t/* Convert number to string for BigNumber conversion */\r\n\tif (typeof sValue == 'number') {\r\n\t\tsValue = sValue.toString();\r\n\t}\r\n\r\n\t/* The value must be passed as a string containing only numerical characters with an optional decimal separator */\r\n\tif (typeof sValue != 'string' || !sValue.match(/^(-){0,1}[0-9]+(\\.[0-9]+)*$/g)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsUnit = oData[this.unitProperty] || this.unit;\r\n\r\n\t/* Apply fixed scale, only if no unitProperty is provided */\r\n\tif (!this.unitProperty && typeof this.scale === 'number') {\r\n\t\tiScale = this.scale;\r\n\t} else if (this.unitProperty) {\r\n\t\tiScale = Currency.getCurrencyScale(sUnit);\r\n\t}\r\n\r\n\tsResult = this._parseValue(sValue, iScale, this.delimiter);\r\n\r\n\tif (this.displayUnit) {\r\n\t\tsResult += (sUnit ? ' ' + sUnit : '');\r\n\t}\r\n\r\n\treturn sResult;\r\n};\r\n\r\n/**\r\n * Parses a string representation of a numeric value according to the given requirements.\r\n *\r\n * @param {string} sValue - String representation of a numeric value\r\n * @param {number|null} [iScale] - Defines the scale of the numeric value ( >= 0)\r\n * @param {boolean} [bDelimiter] - Defines if thousand delimiters should be visible in the output\r\n * @returns {string} - Parsed representation\r\n * @private\r\n */\r\nBigNumber.prototype._parseValue = function(sValue, iScale, bDelimiter) {\r\n\tvar aSplitted, aInteger, i, sDecimal, sInteger, sSign;\r\n\r\n\taSplitted = sValue.split('.');\r\n\tsInteger = aSplitted[0];\r\n\tsDecimal = aSplitted.length > 1 ? aSplitted[1] : '';\r\n\r\n\t/* Add thousand delimiter to the integer value */\r\n\tif (bDelimiter) {\r\n\r\n\t\t/* Remove sign before inserting the delimiter */\r\n\t\taInteger = sInteger.split('');\r\n\t\tsSign = aInteger[0] === '-' ? aInteger.shift() : '';\r\n\r\n\t\tsInteger = sSign + aInteger.reduceRight(function(accumulator, currentValue) {\r\n\t\t\treturn currentValue + (accumulator.length % 4 == 3 ? ',' + accumulator : accumulator);\r\n\t\t}, '');\r\n\t}\r\n\r\n\tif (typeof iScale === 'number') {\r\n\t\tif (iScale < sDecimal.length) {\r\n\t\t\tsDecimal = sDecimal.substring(0, iScale);\r\n\t\t} else {\r\n\t\t\tfor (i = sDecimal.length; i < iScale; i++) {\r\n\t\t\t\tsDecimal += '0';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn sInteger + (sDecimal ? '.' + sDecimal : '');\r\n};\r\n\r\nmodule.exports = BigNumber;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/BigNumber.js\n// module id = 11\n// module chunks = 0","/**\r\n * The CurrencySettings static object represents settings for the currency data type.\r\n * It provides digits for a specific currency and the default scale.\r\n */\r\nvar CurrencySettings = {};\r\n\r\n/**\r\n * Update the default currency setting with customization.\r\n *\r\n * @param {Object} oConfig - A configuration object that is used to specify the currency settings.\r\n * @param {string} oConfig.defaultScale - A custom settings object that will be used for defining the default scale.\r\n * @param {string} oConfig.customCurrencies - A custom settings object that will be used for defining currency digits.\r\n * @public\r\n * @static\r\n */\r\nCurrencySettings.update = function(oConfig) {\r\n\tvar sCurrency;\r\n\r\n\tif (oConfig) {\r\n\t\t// Update default scale\r\n\t\tif (typeof oConfig.defaultScale === 'number') {\r\n\t\t\tCurrencySettings.DEFAULT_SCALE = oConfig.defaultScale;\r\n\t\t}\r\n\t\t// Update custom currencies\r\n\t\tif (oConfig.customCurrencies) {\r\n\t\t\tfor (sCurrency in oConfig.customCurrencies) {\r\n\t\t\t\tCurrencySettings.DIGITS[sCurrency] = oConfig.customCurrencies[sCurrency].digits;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Defines the display default scale that is used for alignment. This has no effect on the technical scale of currency\r\n * values. It is only used for alignment purposes so that different currencies with different scale are still aligned\r\n * correctly.\r\n *\r\n * @type {number}\r\n */\r\nCurrencySettings.DEFAULT_SCALE = 3;\r\n\r\nCurrencySettings.DIGITS = {\r\n\t'ADP': 0,\r\n\t'AFN': 0,\r\n\t'ALL': 0,\r\n\t'BHD': 3,\r\n\t'BIF': 0,\r\n\t'BYR': 0,\r\n\t'CLF': 4,\r\n\t'CLP': 0,\r\n\t'DEFAULT': 2,\r\n\t'DJF': 0,\r\n\t'ESP': 0,\r\n\t'GNF': 0,\r\n\t'HUF': 0,\r\n\t'IQD': 0,\r\n\t'IRR': 0,\r\n\t'ISK': 0,\r\n\t'ITL': 0,\r\n\t'JOD': 3,\r\n\t'JPY': 0,\r\n\t'KMF': 0,\r\n\t'KPW': 0,\r\n\t'KRW': 0,\r\n\t'KWD': 3,\r\n\t'LAK': 0,\r\n\t'LBP': 0,\r\n\t'LUF': 0,\r\n\t'LYD': 3,\r\n\t'MGA': 0,\r\n\t'MGF': 0,\r\n\t'MMK': 0,\r\n\t'MRO': 0,\r\n\t'OMR': 3,\r\n\t'PYG': 0,\r\n\t'RSD': 0,\r\n\t'RWF': 0,\r\n\t'SLL': 0,\r\n\t'SOS': 0,\r\n\t'STD': 0,\r\n\t'SYP': 0,\r\n\t'TMM': 0,\r\n\t'TND': 3,\r\n\t'TRL': 0,\r\n\t'TWD': 0,\r\n\t'UGX': 0,\r\n\t'UYI': 0,\r\n\t'UYW': 4,\r\n\t'VND': 0,\r\n\t'VUV': 0,\r\n\t'XAF': 0,\r\n\t'XOF': 0,\r\n\t'XPF': 0,\r\n\t'YER': 0,\r\n\t'ZMK': 0,\r\n\t'ZWD': 0\r\n};\r\n\r\nmodule.exports = CurrencySettings;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/CurrencySettings.js\n// module id = 12\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The CalendarDate class represents a date/datetime/time data type.\r\n * It handles the formatting and accepts several options like\r\n * calendar, a custom format string and a subtype.\r\n *\r\n * @param {Object} [oConfig] - A configuration object that is used to specify the formatting\r\n * @param {string} [oConfig.type] - The specific type for this CalendarDate (i.E. date, datetime, time)\r\n * @param {string} [oConfig.format] - A custom format string that will be used as template\r\n * @param {string} [oConfig.calendar] - Specifies the calendar that will be used (default: gregorian)\r\n * @param {string} [oConfig.inputFormat] - Specifies the format of the string formatted date value (uppercase YYYYMMDD)\r\n * @constructor\r\n */\r\nfunction CalendarDate(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.type = oConfig && typeof oConfig.type === 'string' ? oConfig.type.toLowerCase() : null;\r\n\tthis.format = oConfig ? oConfig.format : null;\r\n\tthis.calendar = oConfig ? oConfig.calendar : null;\r\n\tthis.inputFormat = oConfig && typeof oConfig.inputFormat == 'string' ? oConfig.inputFormat.toUpperCase() : null;\r\n}\r\n\r\nCalendarDate.prototype = Object.create(Type.prototype);\r\nCalendarDate.prototype.constructor = CalendarDate;\r\n\r\nCalendarDate.DEFAULT = {\r\n\tnumberFormat: 14\r\n};\r\n\r\nCalendarDate.builtin = {\r\n\t14: 'mm-dd-yy',\r\n\t15: 'd-mmm-yy',\r\n\t16: 'd-mmm',\r\n\t17: 'mmm-yy',\r\n\t18: 'h:mm AM/PM',\r\n\t19: 'h:mm:ss AM/PM',\r\n\t20: 'h:mm',\r\n\t21: 'h:mm:ss',\r\n\t22: 'm/d/yy h:mm',\r\n\t45: 'mm:ss',\r\n\t46: '[h]:mm:ss',\r\n\t47: 'mmss.0'\r\n};\r\n\r\nCalendarDate.oSymbols = {\r\n\t'Y': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCFullYear(sValue);\r\n\t\t}\r\n\t},\r\n\t'M': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCMonth(sValue - 1);\r\n\t\t}\r\n\t},\r\n\t'D': {\r\n\t\tapply: function(sValue, oDate) {\r\n\t\t\toDate.setUTCDate(sValue);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Creates the Style configuration object for this CalendarDate\r\n * according to its configuration.\r\n *\r\n * @return {Object} - Style descriptor object\r\n * @protected\r\n */\r\nCalendarDate.prototype._createConfiguration = function() {\r\n\tvar config, key, template;\r\n\r\n\tconfig = Object.getPrototypeOf(CalendarDate.prototype)._createConfiguration.call(this);\r\n\r\n\tif (!this.type && !this.format && !this.calendar) {\r\n\t\tconfig.numberFormat = CalendarDate.DEFAULT.numberFormat;\r\n\r\n\t\treturn config;\r\n\t}\r\n\r\n\t/* Evaluate type */\r\n\tswitch (this.type) {\r\n\t\tcase 'datetime':\r\n\t\t\ttemplate = CalendarDate.builtin[22];\r\n\t\t\tbreak;\r\n\t\tcase 'time':\r\n\t\t\ttemplate = CalendarDate.builtin[21];\r\n\t\t\tbreak;\r\n\t\tdefault: // Assume 'date' as default\r\n\t\t\ttemplate = CalendarDate.builtin[14];\r\n\t}\r\n\r\n\tif (typeof this.format === 'string') {\r\n\t\ttemplate = this.format.match(/^[dhmsy\\s-,.:/]+(AM\\/PM)?$/) ? this.format : template;\r\n\t}\r\n\r\n\t/* Evaluate calendar */\r\n\tswitch (this.calendar) {\r\n\t\tcase 'islamic':\r\n\t\t\ttemplate = 'b2d mmmm yyyy';\r\n\t\t\tbreak;\r\n\t\tcase 'japanese':\r\n\t\t\ttemplate = '[$-ja-JP]ge.m.d';\r\n\t\t\tbreak;\r\n\t\tdefault: // Gregorian calendar is the default case\r\n\t}\r\n\r\n\tconfig.numberFormat = {\r\n\t\tformat: template\r\n\t};\r\n\r\n\t/* Find possible builtin match */\r\n\tfor (key in CalendarDate.builtin) {\r\n\t\tif (CalendarDate.builtin[key] === template) {\r\n\t\t\tconfig.numberFormat = parseInt(key, 10);\r\n\t\t}\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the value of the given property that is assigned in the line item.\r\n *\r\n * @param {string} sProperty - Name of the property that contains the value\r\n * @param {Object} oData - Line item that contains data\r\n * @return {number|null} - XLSX specific date/time format in days since 30.12.1899\r\n */\r\nCalendarDate.prototype.getValue = function(sProperty, oData) {\r\n\tvar nTimestamp, value;\r\n\r\n\tvalue = oData[sProperty];\r\n\r\n\tif (value === null || typeof value === 'undefined' || value === '') {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/* Date or String, Number wrapper */\r\n\tif (typeof value === 'object') {\r\n\t\tvalue = value.valueOf();\r\n\t}\r\n\r\n\t/* 1. Unix timestamp as number */\r\n\tif (typeof value === 'number') {\r\n\t\tnTimestamp = value;\r\n\t}\r\n\r\n\t/* 2. String based time representation */\r\n\tif (typeof value === 'string') {\r\n\t\tnTimestamp = this._parseStringValue(value);\r\n\t}\r\n\r\n\treturn typeof nTimestamp === 'number' ? CalendarDate._JsDateToExcel(nTimestamp, this.type === 'time') : null;\r\n};\r\n\r\n/**\r\n * Converts a textual date/time representation to a numeric timestamp.\r\n *\r\n * @param {string} sValue - String representation of the date/time\r\n * @return {number|null} - Numeric timestamp\r\n * @private\r\n */\r\nCalendarDate.prototype._parseStringValue = function(sValue) {\r\n\tvar bTimeOnly = this.type === 'time';\r\n\r\n\t/* 1. OData Edm.TimeOfDay */\r\n\tif (bTimeOnly && CalendarDate.timeOfDayRegex.test(sValue)) {\r\n\t\treturn CalendarDate._parseTimeOfDay(sValue);\r\n\t}\r\n\r\n\t/* 2. OData duration string 'PT01H23M45S' */\r\n\tif (bTimeOnly && CalendarDate.odataDurationRegex.test(sValue)) {\r\n\t\treturn CalendarDate._parseODataDuration(sValue);\r\n\t}\r\n\r\n\t/* 3. Pattern formatted date string */\r\n\tif (this.inputFormat && typeof this.inputFormat === 'string') {\r\n\t\treturn CalendarDate._parseStringDate(sValue, this.inputFormat);\r\n\t}\r\n\r\n\t/* 4. OData date string '/Date(1234567890)/' */\r\n\tif (CalendarDate.odataDateRegex.test(sValue)) {\r\n\t\treturn CalendarDate._parseOdataDate(sValue);\r\n\t}\r\n\r\n\t/* 5. DateTimeOffset representation 1986-04-13T01:08:00.000+01:00 */\r\n\tif (CalendarDate.odataDateTimeOffsetRegex.test(sValue)) {\r\n\t\treturn Date.parse(sValue);\r\n\t}\r\n\r\n\t/* 6. Unix timestamp as string */\r\n\tif (typeof nTimestamp !== 'number' && isFinite(sValue)) {\r\n\t\treturn parseInt(sValue, 10);\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\n/** START Copied and adapted from datajs **/\r\n/**\r\n * Extracts the milliseconds if the value is a date/time instance or formatted string.\r\n *\r\n * @param {any} vValue the value (may be <code>undefined</code> or <code>null</code>)\r\n * @return {any} the number of milliseconds or the value itself\r\n */\r\nCalendarDate._parseODataDuration = function(vValue) {\r\n\tvar parts, days, hours, minutes, seconds, ms;\r\n\t// / <summary>Parses a string in xsd:duration format.</summary>\r\n\t// / <param name=\"duration\" type=\"String\">Duration value.</param>\r\n\t// / <remarks>\r\n\t// / This method will return the input, if the input string has a year or a month component.\r\n\t// / </remarks>\r\n\t// / <returns type=\"Object\">Object representing the time</returns>\r\n\r\n\tparts = CalendarDate.odataDurationRegex.exec(vValue);\r\n\r\n\t// Unsupported duration value for Edm.Time OData spec (if year of month is present)\r\n\t/* EDITED\r\n\tif (parts[2] || parts[3]) {\r\n\t\treturn vValue;\r\n\t}\r\n\t */\r\n\r\n\tdays = parseInt(parts[4] || 0, 10);\r\n\thours = parseInt(parts[5] || 0, 10);\r\n\tminutes = parseInt(parts[6] || 0, 10);\r\n\tseconds = parseFloat(parts[7] || 0);\r\n\r\n\tms = parts[8];\r\n\tif (ms) {\r\n\t\t// Parse ms duration value ignoring any precision/scale as that part is anyway ignored by JS Date conversion!\r\n\t\tms = parseFloat('0.' + ms) * 1000;\r\n\t} else {\r\n\t\tms = 0;\r\n\t}\r\n\r\n\tms += (seconds * 1000) + (minutes * 60000) + (hours * 3600000) + (days * 86400000);\r\n\r\n\tif (parts[1] === '-') {\r\n\t\tms = -ms;\r\n\t}\r\n\r\n\treturn ms;\r\n};\r\n\r\nCalendarDate._parseTimeOfDay = function(vValue) {\r\n\tvar parts, hours, minutes, seconds;\r\n\tvar date = new Date(0);\r\n\r\n\tparts = CalendarDate.timeOfDayRegex.exec(vValue);\r\n\thours = parseInt(parts[1] || 0, 10);\r\n\tminutes = parseInt(parts[2] || 0, 10);\r\n\tseconds = parseFloat(parts[3] || 0);\r\n\tdate.setUTCHours(hours, minutes, seconds);\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\n/**\r\n * Parses an OData date string and returns the corresponding timestamp\r\n *\r\n * @param {string} sValue - OData date string i.E. \"/Date(1524141637807)/\"\r\n * @return {number} - Unix timestamp according to OData date including offset\r\n * @private\r\n */\r\nCalendarDate._parseOdataDate = function(sValue) {\r\n\tvar matchArray, date, offset;\r\n\r\n\t/* The RegExp matches up to 4 groups:\r\n\t\t * 0: Full match\r\n\t\t * 1: Timestamp (mandatory)\r\n\t\t * 2: Timezone offset sign [ + | - ] (optional)\r\n\t\t * 3: Timezone offset minutes [0-9]{2,3} (optional)\r\n\t\t */\r\n\tmatchArray = CalendarDate.odataDateRegex.exec(sValue);\r\n\tdate = new Date(parseInt(matchArray[1], 10));\r\n\r\n\tif (matchArray[2] && matchArray[3]) {\r\n\t\toffset = parseInt(matchArray[2] + matchArray[3], 10);\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - offset);\r\n\t}\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\n/* The regular expression corresponds to something like this:\r\n * /Date(123+60)/\r\n *\r\n * This first number is date ticks, the + may be a - and is optional,\r\n * with the second number indicating a timezone offset in minutes.\r\n *\r\n * On the wire, the leading and trailing forward slashes are\r\n * escaped without being required to so the chance of collisions is reduced;\r\n * however, by the time we see the objects, the characters already\r\n * look like regular forward slashes.\r\n*/\r\nCalendarDate.odataDateRegex = /^\\/Date\\((-?\\d+)(\\+|-)?(\\d+)?\\)\\/$/;\r\n\r\n// The captured indices for this expression are:\r\n// 0       - complete input\r\n// 1       - direction\r\n// 2,3,4   - years, months, days\r\n// 5,6,7,8 - hours, minutes, seconds, milliseconds\r\nCalendarDate.odataDurationRegex =\r\n\t/^([+-])?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)(?:\\.(\\d+))?S)?)?/;\r\n\r\n/** END Copied and adapted from datajs */\r\n\r\nCalendarDate.odataDateTimeOffsetRegex = /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2]\\d|3[0-1])T([0-1]\\d|2[0-3])(:[0-5]\\d){2}(\\.\\d{1,3})?(Z|[+\\-](0\\d|1[0-2]):[0-5]\\d)/;\r\n\r\nCalendarDate.dateStringRegex = /([Y]{4,}|[M]{2}|[D]{2})/g;\r\n\r\nCalendarDate.timeOfDayRegex = /^([0-1]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)/;\r\n\r\n/**\r\n * Converts a JavaScript Date timestamp to an Office Open XML date\r\n * representation. Office Open XML date epoch starts at 00.01.1900\r\n * which is 31.12.1899 and is represented as a number of days since\r\n * beginning of the epoch.\r\n *\r\n * The Javascript Date epoch starts at 01.01.1970 and is represented\r\n * as a number of milliseconds before or after the beginning of the\r\n * epoch.\r\n *\r\n * The amount of days between 01.01.1900 and 01.01.1970 is exactly\r\n * 25567. According to the wrong offset in Excel (00.01.1900 instead\r\n * of 01.01.1900) and the known leap year bug in Excel, we need to\r\n * add two additional days.\r\n *\r\n * https://support.microsoft.com/en-us/help/214326/excel-incorrectly-assumes-that-the-year-1900-is-a-leap-year\r\n *\r\n * Time specific information is represented as fraction. This means\r\n * that the value 30.5 represents 30.5 days after the 31.12.1899\r\n * where .5 stands for half a day. A day is defined as 24 hours, so\r\n * half a day means 12 hours since the beginning of the day at\r\n * 00:00:00. If the integer part of the value is greater than 0\r\n * date specific information will be present in the cell.\r\n *\r\n * This also applies for time formatted cells. Although the cell\r\n * only displays the time specific part, the editing bar still\r\n * shows the date specific part. Therefore it is necessary to be\r\n * able to remove the date specific part from the value in the\r\n * XLSX file.\r\n *\r\n *\r\n * @param {number} nTimestamp - JavaScript Date timestamp\r\n * @param {boolean} [bTimeOnly] - Defines whether the date specific part should be kept or removed\r\n * @return {number} - Amount of days since 31.12.1899\r\n * @private\r\n */\r\nCalendarDate._JsDateToExcel = function(nTimestamp, bTimeOnly) {\r\n\tvar offset, nExcelValue;\r\n\r\n\t/* Increase the offset if date is after February 28th 1900 */\r\n\toffset = nTimestamp >= -2203891200000 ? 2 : 1;\r\n\r\n\t/**\r\n\t * Fallback if date is before UTC 31.12.1899 00:00:00\r\n\t * which corresponds to 0 in Excel\r\n\t */\r\n\tnExcelValue = Math.max((nTimestamp / (86400 * 1000)) + (25567 + offset), 0);\r\n\r\n\t/* Remove date specific part in case of type time */\r\n\tif (bTimeOnly) {\r\n\t\tnExcelValue = nExcelValue % 1;\r\n\t}\r\n\r\n\treturn nExcelValue;\r\n};\r\n\r\n/**\r\n * The method parses a given string value according to the provided\r\n * date pattern.\r\n *\r\n * Limitations:\r\n * Currently only the symbols d, m, y are supported which correspond\r\n * to day, month, year.\r\n *\r\n * @param {string} sValue - Date formatted string\r\n * @param {string} sPattern - ISO 8601 pattern that gets applied\r\n * @return {number|null} - UNIX timestamp that represents the parsed date string\r\n * @private\r\n */\r\nCalendarDate._parseStringDate = function(sValue, sPattern) {\r\n\tvar matchArray, date, substring;\r\n\r\n\tdate = new Date(0);\r\n\r\n\tdo {\r\n\t\tmatchArray = CalendarDate.dateStringRegex.exec(sPattern);\r\n\r\n\t\tif (matchArray !== null) {\r\n\t\t\tsubstring = sValue.slice(matchArray.index, matchArray.index + matchArray[0].length);\r\n\r\n\t\t\tCalendarDate.oSymbols[matchArray[0].charAt(0)].apply(parseInt(substring, 10), date);\r\n\t\t}\r\n\t} while (matchArray !== null);\r\n\r\n\treturn date.getTime();\r\n};\r\n\r\nmodule.exports = CalendarDate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/CalendarDate.js\n// module id = 13\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The BooleanType class represents a boolean data type. BooleanType\r\n * data can work in two different ways. The first way is the Office\r\n * Open XML Spreadsheet built-in type that always shows TRUE/FALSE in\r\n * the users locale. This value can easily be used within formulas.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {string} [oConfig.trueValue] - Contains the value that gets displayed if the Boolean is true\r\n * @param {string} [oConfig.falseValue] - Contains the value that gets displayed if the Boolean is false\r\n * @constructor\r\n */\r\nfunction BooleanType(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.trueValue = oConfig ? oConfig.trueValue : null;\r\n\tthis.falseValue = oConfig ? oConfig.falseValue : null;\r\n}\r\n\r\nBooleanType.prototype = Object.create(Type.prototype);\r\nBooleanType.prototype.constructor = BooleanType;\r\n\r\nBooleanType.DEFAULT = {\r\n\tnumberFormat: 0\r\n};\r\n\r\n/**\r\n * This method indicates if the properties trueValue and falseValue\r\n * are configured correctly and the BooleanType supports a custom\r\n * format.\r\n *\r\n * @returns {boolean} - Whether to use a custom formatted BooleanType or the built-in type.\r\n */\r\nBooleanType.prototype.isCustomFormatted = function() {\r\n\treturn !!this.trueValue\r\n\t\t&& typeof this.trueValue === 'string'\r\n\t\t&& !!this.falseValue\r\n\t\t&& typeof this.falseValue === 'string';\r\n};\r\n\r\n/**\r\n * Creates the format according to the provided configuration. If the\r\n * format matches any builtin format, it will return a reference to\r\n * its ID instead of the format.\r\n *\r\n * Both cases can serve the Style class that consumes this information.\r\n *\r\n * @returns {Object} - Configuration object for NumberFormat initialization\r\n * @protected\r\n */\r\nBooleanType.prototype._createConfiguration = function() {\r\n\tvar config;\r\n\r\n\tconfig = Object.getPrototypeOf(BooleanType.prototype)._createConfiguration.call(this);\r\n\tconfig.numberFormat =\r\n\t\tthis.isCustomFormatted() ?\r\n\t\t\t{ format: '\"' + this.trueValue + '\";;\"' + this.falseValue + '\"' } : BooleanType.DEFAULT.numberFormat;\r\n\r\n\treturn config;\r\n};\r\n\r\nmodule.exports = BooleanType;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/BooleanType.js\n// module id = 14\n// module chunks = 0","var Type = require('./Type');\r\nvar Alignment = require('../../style/Alignment');\r\n\r\n/**\r\n * The Text class represents textual information without any\r\n * particular formatting. It provides font and sizing details that\r\n * can be used by the Styles class.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this Text type\r\n * @param {Object} [oConfig.font] - Font configuration object\r\n * @param {number} [oConfig.font.size] - Font size\r\n * @param {string} [oConfig.font.name] - Font name i.E. Arial, Verdana, etc.\r\n * @param {Object} [oConfig.fill] - Cell fill configuration object\r\n * @param {string} [oConfig.fill.color] - Cell fill background color\r\n * @param {string} [oConfig.fill.type] - Cell fill type\r\n * @param {string} [oConfig.template] - Text template for this Type\r\n * @param {string} [oConfig.hierarchyLevel] - Property name that is used for hierarchy level indentation\r\n * @param {boolean} [oConfig.wrap] - Indicates the wrapping behavior of the text cell\r\n * @param {string} [oConfig.inputFormat] - Regular expresion that will be used to identify specific parts of the single property value and further process it with a template\r\n * @constructor\r\n */\r\nfunction Text(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis.font = oConfig ? oConfig.font : null;\r\n\tthis.fill = oConfig ? oConfig.fill : null;\r\n\tthis.template = oConfig ? oConfig.template : null;\r\n\tthis.hierarchyLevel = oConfig ? oConfig.hierarchyLevel : null;\r\n\tthis.wrap = oConfig ? oConfig.wrap : false;\r\n\tthis.inputFormat = oConfig ? oConfig.inputFormat : null;\r\n\r\n\tthis._mStyleIds = {};\r\n}\r\n\r\nText.prototype = Object.create(Type.prototype);\r\nText.prototype.constructor = Text;\r\n\r\nText.DEFAULT = {\r\n\tfont: {\r\n\t\tsize: 11,\r\n\t\tname: 'Arial'\r\n\t}\r\n};\r\n\r\nText.formulaRegex = /^[\\s]*[=+\\-@]/;\r\n\r\n/**\r\n * Ensures that all line breaks use CR + LF.\r\n *\r\n * @param {string} sValue - Text that may contain line breaks\r\n * @return {string} - Initial text with replaced line breaks\r\n */\r\nText.convertLineBreaks = function(sValue) {\r\n\tvar compliantLineBreak = String.fromCharCode(13, 10);\r\n\r\n\treturn sValue.replace(/\\r/g, '').replace(/\\n/g, compliantLineBreak);\r\n};\r\n\r\n/**\r\n * This method creates the XLSX specific style configuration depending on the cell content\r\n *\r\n * @param {Object} oData - Line item that will be used to evaluate the cell content\r\n * @returns {Object} - Style configuration used by the Styles class\r\n * @protected\r\n */\r\nText.prototype._createConfiguration = function(oData) {\r\n\tvar config;\r\n\r\n\tconfig = Object.getPrototypeOf(Text.prototype)._createConfiguration.call(this);\r\n\tconfig.fill = this.fill;\r\n\tconfig.font = this.font;\r\n\r\n\t/* Overwrites existing alignment for a proper indent */\r\n\tif (this.hierarchyLevel) {\r\n\t\tconfig.align = {\r\n\t\t\thorizontal: Alignment.horizontal.LEFT,\r\n\t\t\tindent: 2 * oData[this.hierarchyLevel]\r\n\t\t};\r\n\t}\r\n\r\n\t/* Wrapping can be applied on hierarchies with indentation */\r\n\tif (this.wrap) {\r\n\t\tconfig.align = config.align || {};\r\n\r\n\t\tconfig.align.wrap = this.wrap;\r\n\t}\r\n\r\n\treturn config;\r\n};\r\n\r\n/**\r\n * Returns the assigned ID of the Type specific Style that is\r\n * registered in the Styles class.\r\n *\r\n * @param {Object} oData - Business Object that contains the property for hierarchy levels\r\n * @param {string|number} [sValue] - Explicit cell value that might be used for semantic formatting\r\n * @returns {number} - ID of the registered Style\r\n */\r\nText.prototype.getStyleId = function(oData, sValue) {\r\n\tvar bRequiresPrefix, sIdentifier, oConfig;\r\n\r\n\tif (!oData) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tbRequiresPrefix = sValue && Text.formulaRegex.test(sValue);\r\n\r\n\t/* Handle simple styling without hierarchy information or prefix */\r\n\tif (!this.hierarchyLevel && !bRequiresPrefix) {\r\n\t\treturn Object.getPrototypeOf(Text.prototype).getStyleId.call(this);\r\n\t}\r\n\r\n\t/* Create local identifier to differentiate between cached styleIds */\r\n\tsIdentifier = 'id_' + oData[this.hierarchyLevel] + (bRequiresPrefix ? '_prefix' : '');\r\n\r\n\tif (typeof this._mStyleIds[sIdentifier] === 'undefined') {\r\n\t\toConfig = this._createConfiguration(oData);\r\n\t\toConfig.quotePrefix = bRequiresPrefix;\r\n\t\tthis._mStyleIds[sIdentifier] = this.styles.addStyle(oConfig);\r\n\t}\r\n\r\n\treturn this._mStyleIds[sIdentifier];\r\n};\r\n\r\n/**\r\n * Returns the data value of the business object that is bound by\r\n * this type. If a template is configured, it will automatically fill\r\n * the template with the values from the business object and returns\r\n * the processed string.\r\n *\r\n * @param {string|Array} properties - Name of the property or array of properties that shall be accessed.\r\n * @param {Object} oData - Business object that contains the data.\r\n *\r\n * @returns {string|number|boolean} - The value of the given property after type specific processing.\r\n */\r\nText.prototype.getValue = function(properties, oData) {\r\n\tvar aMatch, reRegEx, sResult, bSkip, sValue, aValues, aInputMatch;\r\n\r\n\tif (!this.template) {\r\n\t\tsValue = typeof properties === 'string' ? oData[properties] : oData[properties[0]];\r\n\r\n\t\tsValue = this.wrap ? Text.convertLineBreaks(sValue) : sValue;\r\n\r\n\t\treturn sValue;\r\n\t}\r\n\r\n\tif (typeof this.inputFormat === 'string') {\r\n\t\taInputMatch = new RegExp(this.inputFormat).exec(oData[properties]);\r\n\r\n\t\t/* Keeps the initial value in case the input does not match the regex pattern */\r\n\t\taValues = Array.isArray(aInputMatch) ? aInputMatch.slice(1) : [oData[properties]];\r\n\t} else {\r\n\t\taValues = properties.reduce(function(acc, property) {\r\n\t\t\tacc.push(oData[property]);\r\n\r\n\t\t\treturn acc;\r\n\t\t}, []);\r\n\t}\r\n\r\n\t// Obtain if the further processing should be skipped due to missing values for the template\r\n\tbSkip = aValues.every(function(value) {\r\n\t\treturn value === null\r\n\t\t\t|| typeof value === 'undefined'\r\n\t\t\t|| (typeof value === 'string' && value === '');\r\n\t});\r\n\r\n\tif (bSkip) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\tsResult = this.template;\r\n\treRegEx = /{([0-9]+)}/g;\r\n\r\n\taMatch = reRegEx.exec(this.template);\r\n\twhile (aMatch !== null) {\r\n\r\n\t\tsValue = aValues[aMatch[1]];\r\n\r\n\t\t// Overwrite empty or undefined values by an empty string\r\n\t\tif (sValue === null || typeof sValue === 'undefined') {\r\n\t\t\tsValue = '';\r\n\t\t}\r\n\r\n\t\t// Replaces the matched placeholder by the indexed property value\r\n\t\tsResult = sResult.replace(aMatch[0], sValue);\r\n\r\n\t\taMatch = reRegEx.exec(this.template);\r\n\t}\r\n\r\n\treturn sResult;\r\n};\r\n\r\nmodule.exports = Text;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Text.js\n// module id = 15\n// module chunks = 0","var App\t\t\t\t\t= require('./objects/App'),\r\n\tContentTypes\t\t= require('./objects/ContentTypes'),\r\n\tCore\t\t\t\t= require('./objects/Core'),\r\n\tRelationships\t\t= require('./objects/Relationships'),\r\n\tSheet\t\t\t\t= require('./data/Sheet'),\r\n\tWorkbook\t\t\t= require('./objects/Workbook'),\r\n\tCurrencySettings\t= require('./binding/type/CurrencySettings');\r\n\r\n/* global JSZip3 */\r\n\r\n/**\r\n * The XLSXBuilder class represents an Office Open XML Spreadsheet\r\n * (Microsoft Excel) that can be used to insert structured and\r\n * formatted data and pack a zipped *.xlsx document.\r\n *\r\n * XLSXBuilder requires JSZip 2.x or 3.x to be present.\r\n *\r\n * @param {(Object[]|string[])} aBinding - Binding configuration that is used for {@link Column} definition\r\n * @param {Object} [oContext] - Context object containing metadata for this particular XLSX\r\n * @param {string} [oContext.application] - Application that created this XLSX\r\n * @param {string} [oContext.version] - Application version that was used to create this XLSX\r\n * @param {string} [oContext.title] - Title of the XLSX document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @param {string} [oContext.sheetName] - The name of the data sheet that will be shown in Excel\r\n * @param {string} [oContext.metaSheetName] - The name of the metadata sheet that will be shown in Excel\r\n * @param {Object[]} [oContext.metainfo] - Optional Metadata that will be displayed in the additional Metadata Sheet\r\n * @param {string} [hierarchyLevel] - Name of the property that contains the hierarchy level of each lime item\r\n * @param {Object} [oCustomConfig] - Custom configuration object that can be used for {@link CurrencySettings} digits\r\n * and other customizations\r\n * @constructor\r\n */\r\nfunction XLSXBuilder(aBinding, oContext, hierarchyLevel, oCustomConfig) {\r\n\tvar aMetadataConfig, i, oMetainfoGroup, sSheetName, sMetadataSheetName;\r\n\r\n\tif (!(aBinding instanceof Array) || !aBinding.length) {\r\n\t\tthrow new Error('No binding provided');\r\n\t}\r\n\r\n\t/* Set default values */\r\n\tsSheetName = 'SAP Document Export';\r\n\tsMetadataSheetName = 'Metadata';\r\n\r\n\tthis.app = new this.objects.App(oContext);\r\n\tthis.core = new this.objects.Core(oContext);\r\n\tthis.workbook = new this.objects.Workbook();\r\n\r\n\t/* Configure currency settings if needed */\r\n\tif (oCustomConfig && oCustomConfig.currencySettings) {\r\n\t\tCurrencySettings.update(oCustomConfig.currencySettings);\r\n\t}\r\n\r\n\t/* Overwrite default Sheet names if maintained */\r\n\tif (oContext) {\r\n\t\tsSheetName = oContext.sheetName ? oContext.sheetName : sSheetName;\r\n\t\tsMetadataSheetName = oContext.metaSheetName ? oContext.metaSheetName : sMetadataSheetName;\r\n\t}\r\n\r\n\tthis.sheet = this.workbook.addSheet(sSheetName, { columns: aBinding, hierarchyLevel: hierarchyLevel });\r\n\tthis.workbook.selectSheet(this.sheet);\r\n\r\n\tif (typeof oContext === 'object' && oContext.metainfo instanceof Array) {\r\n\r\n\t\t/* Define column configuration for metadata sheet */\r\n\t\taMetadataConfig = [\r\n\t\t\t{\r\n\t\t\t\tproperty: 'key',\r\n\t\t\t\tlabel: 'Key',\r\n\t\t\t\twidth: 20\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tproperty: 'value',\r\n\t\t\t\tlabel: 'Value',\r\n\t\t\t\twidth: 20\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\t/* Add optional Metadata Sheet*/\r\n\t\tthis.metadata = this.workbook.addSheet(sMetadataSheetName, { columns: aMetadataConfig, hideHeader: true });\r\n\r\n\t\t/*\r\n\t\t * Add a copy of metadata to the Metadata Sheet. The method\r\n\t\t * #_insertIntoSheet uses Array#shift and would otherwise\r\n\t\t * manipulate the original metadata array.\r\n\t\t */\r\n\t\tfor (i = 0; i < oContext.metainfo.length; i++) {\r\n\t\t\toMetainfoGroup = oContext.metainfo[i];\r\n\r\n\t\t\tthis.metadata.createGroup(oMetainfoGroup.name, 1);\r\n\t\t\tthis._insertIntoSheet(oMetainfoGroup.items.slice(), this.metadata);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nXLSXBuilder.prototype = {\r\n\r\n\tobjects: {\r\n\t\tApp: App,\r\n\t\tContentTypes: ContentTypes,\r\n\t\tCore: Core,\r\n\t\tRelationships: Relationships,\r\n\t\tSheet: Sheet,\r\n\t\tWorkbook: Workbook\r\n\t},\r\n\r\n\t/**\r\n\t * Triggers the packaging process for the Office Open XML\r\n\t * SpreadSheet. You need to call the method insert() first,\r\n\t * otherwise the generated Document will contain no data.\r\n\t *\r\n\t * The method returns a promise to allow the library to work\r\n\t * asynchronously.\r\n\t *\r\n\t * @function build\r\n\t * @returns {object} - Packed zip file as Blob or Nodebuffer, depending on the runtime environment\r\n\t */\r\n\tbuild: function() {\r\n\t\tvar bFinalize, files, zip, i, j, fileConfig, FileType, xmlObject, relation, zipConfig;\r\n\r\n\t\tfiles = [\r\n\t\t\t{\r\n\t\t\t\tname: '[Content_Types].xml',\r\n\t\t\t\tpath: '',\r\n\t\t\t\ttype: this.objects.ContentTypes\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: '.rels',\r\n\t\t\t\tpath: '_rels/',\r\n\t\t\t\ttype: this.objects.Relationships,\r\n\t\t\t\trelationships: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'xl/workbook.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/app.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttarget: 'docProps/core.xml',\r\n\t\t\t\t\t\ttype: 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\tzip = new JSZip3();\r\n\t\tbFinalize = true;\r\n\r\n\t\tfor (i = 0; i < files.length; i++) {\r\n\t\t\tfileConfig = files[i];\r\n\t\t\tFileType = fileConfig.type;\r\n\t\t\txmlObject = new FileType();\r\n\r\n\t\t\tif (xmlObject instanceof this.objects.Relationships) {\r\n\t\t\t\tfor (j = 0; j < fileConfig.relationships.length; j++) {\r\n\t\t\t\t\trelation = fileConfig.relationships[j];\r\n\t\t\t\t\txmlObject.addRelationship(relation.target, relation.type);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tzip.file(fileConfig.path + fileConfig.name, xmlObject.serialize());\r\n\t\t}\r\n\r\n\t\t// Add document metadata\r\n\t\tzip.file(this.app.getAbsolutePath(), this.app.serialize());\r\n\t\tzip.file(this.core.getAbsolutePath(), this.core.serialize());\r\n\r\n\t\t// Add workbook and its related files\r\n\t\tzip.file(this.workbook.getAbsolutePath(), this.workbook.serialize());\r\n\t\tzip.file(this.workbook.getRelationships().getAbsolutePath(), this.workbook.getRelationships().serialize());\r\n\r\n\t\tthis.workbook.getRelatedFiles().forEach(function(file) {\r\n\t\t\tzip.file(file.getAbsolutePath(), file.serialize(bFinalize));\r\n\t\t});\r\n\r\n\t\tzipConfig = {\r\n\t\t\tcompression: 'DEFLATE',\r\n\t\t\ttype: JSZip3.support.nodebuffer ? 'nodebuffer' : 'arraybuffer'\r\n\t\t};\r\n\r\n\t\treturn zip.generateAsync(zipConfig);\r\n\t},\r\n\r\n\t/**\r\n\t * Appends the specified set of data to the Open Document Spreadsheet.\r\n\t * All data will be bound according to the {@link ColumnConfiguration}.\r\n\t *\r\n\t * @function append\r\n\t * @param {(Object[]|Object)} aData - Array of data that gets appended to the Spreadsheet\r\n\t */\r\n\tappend: function(aData) {\r\n\t\tthis._insertIntoSheet(aData, this.sheet);\r\n\t},\r\n\r\n\t/**\r\n\t * Inserts the given data into the specified Sheet. The method will throw an Error if no Sheet is provided.\r\n\t *\r\n\t * @param {Array} aData - Array of business objects that should be inserted\r\n\t * @param {Sheet} oSheet - The Sheet where the data should be inserted into\r\n\t * @private\r\n\t */\r\n\t_insertIntoSheet: function(aData, oSheet) {\r\n\t\tvar array;\r\n\r\n\t\t/* We need to check if param is null or undefined because [null].length results in 1 */\r\n\t\tif (typeof aData === 'undefined' || aData === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tarray = aData instanceof Array ? aData : [aData];\r\n\r\n\t\twhile (array.length) {\r\n\t\t\toSheet.insert(array.shift());\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = XLSXBuilder;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/XLSXBuilder.js\n// module id = 18\n// module chunks = 0","var XMLFile = require('../xml/XMLFile');\r\n\r\n/**\r\n * This class represents the app.xml within the generated Excel. The\r\n * App contains information about the application that created the\r\n * Office Open XML Spreadsheet.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.application] - Application that created this Excel\r\n * @param {string} [oContext.version] - Application version that was used to create this Excel\r\n * @constructor\r\n */\r\nfunction App(oContext) {\r\n\tXMLFile.call(this, App.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.application) {\r\n\t\t\tthis.application.value = oContext.application;\r\n\t\t}\r\n\r\n\t\tif (oContext.version) {\r\n\t\t\tthis.version.value = oContext.version;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nApp.prototype = Object.create(XMLFile.prototype);\r\nApp.prototype.constructor = App;\r\n\r\nApp.metadata = {\r\n\tpath: 'docProps/',\r\n\tfilename: 'app.xml',\r\n\ttag: 'Properties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'vt',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'application',\r\n\t\t\ttag: 'Application',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'DocSecurity',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Company',\r\n\t\t\tvalue: 'SAP SE'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'SharedDoc',\r\n\t\t\tvalue: 'false'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'version',\r\n\t\t\ttag: 'AppVersion',\r\n\t\t\tvalue: '1.85' // Default value, can be overridden\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = App;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/App.js\n// module id = 19\n// module chunks = 0","var XMLElement = require('./XMLElement');\r\n\r\n/**\r\n * The class XMLAttribute is a wrapper for representing XML-like attributes attributes.\r\n * It is mainly used for defining namespaces and namespace-related attributes.\r\n *\r\n * @param {object} oConfig - Object representation of the XMLNode containing at least the tag of the element.\r\n * @param {string} oConfig.name - String representation of the XML tag.\r\n * @param {string} [oConfig.prefix] - Prefix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.suffix] - Suffix of the {@link XMLAttribute} that will be used for XML namespace purposes.\r\n * @param {string} [oConfig.value] - Textual value of the {@link XMLAttribute}.\r\n * @class\r\n * @module xml/XMLAttribute\r\n */\r\nfunction XMLAttribute(oConfig) {\r\n\tXMLElement.call(this, oConfig);\r\n\r\n\tthis.name = oConfig.name ? oConfig.name : '';\r\n\tthis.prefix = oConfig.prefix ? oConfig.prefix : '';\r\n\tthis.suffix = oConfig.suffix ? oConfig.suffix : '';\r\n}\r\n\r\nXMLAttribute.prototype = Object.create(XMLElement.prototype);\r\nXMLAttribute.prototype.constructor = XMLAttribute;\r\n\r\n/**\r\n * Performes a String serialization of the XMLAttribute. The representation is formatted as follows:\r\n * <prefix>:<name>:<suffix>=\"<value>\"\r\n *\r\n * i.E. ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"'\r\n * for { name: 'xmlns', suffix: 'xsi', value: 'http://www.w3.org/2001/XMLSchema-instance' }\r\n *\r\n * Note that the serialized String always comes with a leading whitespace to allow easy concatenation.\r\n *\r\n * @function serialize\r\n * @returns {string} - String representation of the XMLAttribute\r\n */\r\nXMLAttribute.prototype.serialize = function(){\r\n\treturn ' ' + (this.prefix ? this.prefix + ':' : '') + this.name\r\n\t\t+ (this.suffix ? ':' + this.suffix : '') + '=\"' + this.xmlEncode(this.value) + '\"';\r\n};\r\n\r\nmodule.exports = XMLAttribute;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/xml/XMLAttribute.js\n// module id = 20\n// module chunks = 0","var XMLFile = require('../xml/XMLFile');\r\n\r\n/**\r\n * This class represents the [Content_Types].xml within the generated Excel.\r\n *\r\n * @constructor\r\n */\r\nfunction ContentTypes() {\r\n\tXMLFile.call(this, ContentTypes.metadata);\r\n}\r\n\r\nContentTypes.prototype = Object.create(XMLFile.prototype);\r\nContentTypes.prototype.constructor = ContentTypes;\r\n\r\n\r\nContentTypes.FILENAME = '';\r\nContentTypes.metadata = {\r\n\tfilename: '[Content_Types].xml',\r\n\ttag: 'Types',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/content-types'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Default',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'Extension',\r\n\t\t\t\t\tvalue: 'rels'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.relationships+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/workbook.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/worksheets/sheet1.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/styles.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/xl/sharedStrings.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/core.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-package.core-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'Override',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'PartName',\r\n\t\t\t\t\tvalue: '/docProps/app.xml'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'ContentType',\r\n\t\t\t\t\tvalue: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\nmodule.exports = ContentTypes;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/ContentTypes.js\n// module id = 21\n// module chunks = 0","var XMLFile = require('../xml/XMLFile');\r\n\r\n/**\r\n * This class represents the core.xml within the generated Excel. The\r\n * Core contains basic information about the content and the owner of\r\n * the file.\r\n *\r\n * @param {Object} [oContext] - Context object containing metadata for this particular Excel\r\n * @param {string} [oContext.title] - Title of the Excel document\r\n * @param {string} [oContext.modifiedBy] - User context for the exported document\r\n * @constructor\r\n */\r\nfunction Core(oContext) {\r\n\tXMLFile.call(this, Core.metadata);\r\n\r\n\tif (oContext) {\r\n\r\n\t\tif (oContext.title) {\r\n\t\t\tthis.title.value = oContext.title;\r\n\t\t}\r\n\r\n\t\tif (oContext.modifiedBy) {\r\n\t\t\tthis.modifiedBy.value = oContext.modifiedBy;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nCore.prototype = Object.create(XMLFile.prototype);\r\nCore.prototype.constructor = Core;\r\n\r\nCore.metadata = {\r\n\tpath: 'docProps/',\r\n\tfilename: 'core.xml',\r\n\ttag: 'cp:coreProperties',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'cp',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dc',\r\n\t\t\tvalue: 'http://purl.org/dc/elements/1.1/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcterms',\r\n\t\t\tvalue: 'http://purl.org/dc/terms/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'dcmitype',\r\n\t\t\tvalue: 'http://purl.org/dc/dcmitype/'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'xsi',\r\n\t\t\tvalue: 'http://www.w3.org/2001/XMLSchema-instance'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'title',\r\n\t\t\ttag: 'dc:title',\r\n\t\t\tvalue: 'Table Export' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dc:creator',\r\n\t\t\tvalue: 'SAP UI5 Document Export'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cp:keywords',\r\n\t\t\tvalue: 'SAP UI5 EXPORT'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'modifiedBy',\r\n\t\t\ttag: 'cp:lastModifiedBy',\r\n\t\t\tvalue: 'SAP UI5' // Default value, can be overridden\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dcterms:created',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprefix: 'xsi',\r\n\t\t\t\t\tname: 'type',\r\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: new Date().toISOString()\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'modified',\r\n\t\t\ttag: 'dcterms:modified',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tprefix: 'xsi',\r\n\t\t\t\t\tname: 'type',\r\n\t\t\t\t\tvalue: 'dcterms:W3CDTF'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tvalue: new Date().toISOString()\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Updates the state of the Core class and returns the serialized string.\r\n *\r\n * @return {string} - Serialized representation of the Core instance\r\n */\r\nCore.prototype.serialize = function() {\r\n\tthis.modified.value = new Date().toISOString();\r\n\r\n\treturn Object.getPrototypeOf(Core.prototype).serialize.call(this);\r\n};\r\n\r\nmodule.exports = Core;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/Core.js\n// module id = 22\n// module chunks = 0","var ColumnConfiguration\t= require('../binding/ColumnConfiguration'),\r\n\tReferenceNode\t\t= require('./ReferenceNode'),\r\n\tSharedStrings\t\t= require('../data/SharedStrings'),\r\n\tSheet\t\t\t\t= require('../data/Sheet'),\r\n\tStyles\t\t\t\t= require('../style/Styles');\r\n\r\n/**\r\n * This class represents the workbook.xml file within the generated\r\n * Office Open XML Spreadsheet. The workbook is the central element\r\n * of the Office Open XML Spreadsheet that references all the content.\r\n *\r\n * @constructor\r\n */\r\nfunction Workbook() {\r\n\tvar key;\r\n\r\n\tReferenceNode.call(this, Workbook.metadata);\r\n\r\n\t/* Create and register central Styles instance for this workbook */\r\n\tthis._styles = new Styles();\r\n\tthis._styles.setPath(this.getPath());\r\n\tthis.addRelatedFile(this._styles);\r\n\r\n\t/* Create and register central SharedStrings instance for this workbook */\r\n\tthis._sharedStrings = new SharedStrings();\r\n\tthis._sharedStrings.setPath(this.getPath());\r\n\tthis.addRelatedFile(this._sharedStrings);\r\n\r\n\tfor (key in Workbook.RELATIONS) {\r\n\t\tthis._relationships.addRelationship(Workbook.RELATIONS[key].target, Workbook.RELATIONS[key].type);\r\n\t}\r\n\r\n\tthis._registeredSheets = [];\r\n}\r\n\r\nWorkbook.prototype = Object.create(ReferenceNode.prototype);\r\nWorkbook.prototype.constructor = Workbook;\r\n\r\nWorkbook.RELATIONS = {\r\n\tsharedStrings: {\r\n\t\ttarget: 'sharedStrings.xml',\r\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings'\r\n\t},\r\n\tstyles: {\r\n\t\ttarget: 'styles.xml',\r\n\t\ttype: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles'\r\n\t}\r\n};\r\n\r\nWorkbook.metadata = {\r\n\tfilename: 'workbook.xml',\r\n\tpath: 'xl/',\r\n\ttag: 'workbook',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'r',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'bookViews',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'workbookView',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'yWindow',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowWidth',\r\n\t\t\t\t\t\t\tvalue: '22260'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'windowHeight',\r\n\t\t\t\t\t\t\tvalue: '12645'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'sheets',\r\n\t\t\ttag: 'sheets'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'definedNames',\r\n\t\t\ttag: 'definedNames'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds a new {@link Sheet} to this {@link Workbook}\r\n *\r\n * @param {string} sName - Name of the {@link Sheet} that is used as label in Microsoft Excel\r\n * @param {Object} oConfig - The column configuration of this Sheet\r\n * @param {Array} oConfig.columns - Array containing the configuration for each column\r\n * @param {boolean} [oConfig.bHideHeader] - Hides the header row (optional - default: false)\r\n * @returns {Sheet} - The newly added {@link Sheet}\r\n */\r\nWorkbook.prototype.addSheet = function(sName, oConfig) {\r\n\tvar oColumnConfiguration, nCount, sId, oSheet, sSheetFileName;\r\n\r\n\tnCount = this.sheets.childs.length + 1;\r\n\tsSheetFileName = 'sheet' + nCount + '.xml';\r\n\tsId = this._relationships.addRelationship('worksheets/' + sSheetFileName,\r\n\t\t'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet');\r\n\r\n\tthis.sheets.addChild({\r\n\t\ttag: 'sheet',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tid: 'name',\r\n\t\t\t\tname: 'name',\r\n\t\t\t\tvalue: sName\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'sheetId',\r\n\t\t\t\tvalue: '' + nCount\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'id',\r\n\t\t\t\tprefix: 'r',\r\n\t\t\t\tvalue: sId\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n\r\n\toColumnConfiguration = new ColumnConfiguration(oConfig, this._sharedStrings, this._styles);\r\n\toSheet = new Sheet(oColumnConfiguration);\r\n\toSheet.setFileName(sSheetFileName);\r\n\toSheet.setPath(this.getPath() + 'worksheets/');\r\n\r\n\tthis.addRelatedFile(oSheet);\r\n\tthis._registeredSheets.push(oSheet);\r\n\r\n\treturn oSheet;\r\n};\r\n\r\n/**\r\n * Set the given sheet as selected. Unselects all other sheets in the workbook.\r\n *\r\n * @param {Sheet} oSheet - The Sheet object that should be selected\r\n */\r\nWorkbook.prototype.selectSheet = function(oSheet) {\r\n\r\n\tif (!(oSheet instanceof Sheet) || this._registeredSheets.indexOf(oSheet) < 0) {\r\n\t\tthrow new Error('Could not select sheet. Sheet not found.');\r\n\t}\r\n\r\n\t/* Remove selection on all sheets */\r\n\tthis._registeredSheets.forEach(function(sheetElement, index, array) {\r\n\t\tsheetElement.views.defaultView.remove('selected');\r\n\t});\r\n\r\n\t/* Select the particular Sheet */\r\n\toSheet.views.defaultView.addAttribute({\r\n\t\tid: 'selected',\r\n\t\tname: 'tabSelected',\r\n\t\tvalue: '1' // Refers to W3C XML Schema boolean (true)\r\n\t});\r\n};\r\n\r\n/**\r\n * Registers definedNames for sheets that use autoFilter\r\n * functionality before processing the super class serialization.\r\n *\r\n * @returns {string} - The serialized String representation of this workbook\r\n */\r\nWorkbook.prototype.serialize = function() {\r\n\tvar that = this;\r\n\r\n\t/**\r\n\t * Creates the value for the definedName. It automatically\r\n\t * retrieves the dimension of the sheet that is used by the\r\n\t * filter and escapes its representation.\r\n\t *\r\n\t * @param {string} sSheetName - The title of the sheet\r\n\t * @param {Sheet} oSheet - The sheet object containing the filter dimension\r\n\t * @returns {string} - Escaped definedName value\r\n\t * @private\r\n\t */\r\n\tfunction createDefinedName(sSheetName, oSheet) {\r\n\t\tvar sDefinedName, sDimension;\r\n\r\n\t\tsDimension = oSheet.filter.reference.value;\r\n\t\tsDefinedName = /^[a-zA-Z0-9]+$/.test(sSheetName) ? sSheetName : '\\'' + sSheetName + '\\'';\r\n\t\tsDefinedName += '!';\r\n\t\tsDefinedName += sDimension.replace(/([A-Z]+)|(\\d+)/g, function(match) {\r\n\t\t\treturn '$' + match;\r\n\t\t});\r\n\r\n\t\treturn sDefinedName;\r\n\t}\r\n\r\n\t/* Create definedNames before serializing the workbook */\r\n\tthis._registeredSheets.forEach(function(oSheet, iIndex, aArray) {\r\n\t\tvar sSheetName = that.sheets.childs[iIndex].name.value;\r\n\r\n\t\tif (oSheet.filter) {\r\n\t\t\tthat.definedNames.addChild({\r\n\t\t\t\ttag: 'definedName',\r\n\t\t\t\tattributes: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\tvalue: '_xlnm._FilterDatabase'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'localSheetId',\r\n\t\t\t\t\t\tvalue: iIndex\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tname: 'hidden',\r\n\t\t\t\t\t\tvalue: '1'\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\tvalue: createDefinedName(sSheetName, oSheet)\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\treturn Object.getPrototypeOf(Workbook.prototype).serialize.call(this);\r\n};\r\n\r\nmodule.exports = Workbook;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/Workbook.js\n// module id = 23\n// module chunks = 0","var Column\t= require('./Column'),\r\n\tText\t= require('./type/Text'),\r\n\tRow\t\t= require('../data/Row'),\r\n\tCell\t= require('../data/Cell');\r\n\r\n/**\r\n * ColumnConfiguration represents the configuration of all columns within\r\n * one Sheet. The ColumnConfiguration handles the mapping of object\r\n * properties to certain columns,, labeling, type definition and also\r\n * display information like width and alignment.\r\n *\r\n * @param {Object} oConfig -  An configuration object that contains all necessary column definitions\r\n * @param {Object} oConfig.columns -  An array of Column definitions. {@see Column} for further details\r\n * @param {string} [oConfig.hierarchyLevel] -  Name of the property that holds the hierarchy level\r\n * @param {boolean} [oConfig.hideHeader] - Flag that allows to hide the header row\r\n * @param {SharedStrings} oSharedStrings - SharedStrings instance that will be used by all Cells\r\n * @param {Styles} oStyles - Style collection that is used to register Cell or row specific styles\r\n * @module binding/ColumnBinding\r\n * @constructor\r\n */\r\nfunction ColumnConfiguration(oConfig, oSharedStrings, oStyles) {\r\n\tvar aColumns, oColumn, i;\r\n\r\n\tthis.columns = [];\r\n\tthis._row = null;\r\n\tthis.styles = oStyles;\r\n\tthis.sharedStrings = oSharedStrings;\r\n\tthis.hideHeader = oConfig.hideHeader;\r\n\r\n\tObject.defineProperty(this, 'hierarchyLevelProperty', { value: oConfig.hierarchyLevel });\r\n\r\n\taColumns = oConfig.columns;\r\n\r\n\tfor (i = 0; i < aColumns.length; i++) {\r\n\r\n\t\t/* As specified, the hierarchy level indentation will only be applied on the first row */\r\n\t\tif (i == 0) {\r\n\t\t\tif (typeof aColumns[i] === 'string') {\r\n\t\t\t\taColumns[i] = { property: aColumns[i] };\r\n\t\t\t}\r\n\r\n\t\t\taColumns[i].hierarchyLevel = this.hierarchyLevelProperty;\r\n\t\t}\r\n\r\n\t\toColumn = aColumns[i] instanceof Column ? aColumns[i] : new Column(aColumns[i], this.sharedStrings, this.styles);\r\n\t\tthis.columns.push(oColumn);\r\n\t}\r\n}\r\n\r\n/**\r\n * Initializes the objects that are necessary for the binding. This\r\n * components are:\r\n * - a template Row\r\n * - a Cell for each Column\r\n * - a Style for each data type referenced by each Column\r\n *\r\n * @private\r\n */\r\nColumnConfiguration.prototype._initBinding = function() {\r\n\tvar i;\r\n\r\n\tthis._row = new Row();\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis._row.addCell(this.columns[i].getCell());\r\n\t}\r\n};\r\n\r\n\r\n/**\r\n * Creates an new Row and binds the provided data to the Row Cells according to the current ColumnConfiguration.\r\n *\r\n * @param {Object} oData - The data object that has to be bound to the row\r\n * @param {number} nHierarchyLevel - Hierarchy level that will be used for indent and outline\r\n * @returns {Row} - Returns the created Row that contains the provided data\r\n */\r\nColumnConfiguration.prototype.bind = function(oData, nHierarchyLevel) {\r\n\tvar i, normalizedHierarchyLevel;\r\n\r\n\tif (this._row === null) {\r\n\t\tthis._initBinding();\r\n\t}\r\n\r\n\t/* Normalise hierarchy depth to not exceed the maximum depth of 7 */\r\n\tnormalizedHierarchyLevel = Math.min(nHierarchyLevel, 7);\r\n\r\n\t/*\r\n\t * We need to add, update or delete the outline attribute because\r\n\t * we reuse the row object\r\n\t */\r\n\tif (normalizedHierarchyLevel && !this._row.outline) {\r\n\t\tthis._row.addAttribute({\r\n\t\t\tid: 'outline',\r\n\t\t\tname: 'outlineLevel',\r\n\t\t\tvalue: normalizedHierarchyLevel\r\n\t\t});\r\n\t} else if (normalizedHierarchyLevel && this._row.outline) {\r\n\t\tthis._row.outline.value = normalizedHierarchyLevel;\r\n\t} else if (!normalizedHierarchyLevel && this._row.outline) {\r\n\t\tthis._row.remove('outline');\r\n\t}\r\n\r\n\tfor (i = 0; i < this.columns.length; i++) {\r\n\t\tthis.columns[i].bind(oData);\r\n\t}\r\n\r\n\treturn this._row;\r\n};\r\n\r\n\r\n/**\r\n * Creates the header Row according to the current ColumnConfiguration and returns it.\r\n *\r\n * @returns {Row} - Header row according to the ColumnConfiguration\r\n */\r\nColumnConfiguration.prototype.getHeader = function() {\r\n\tvar cell, row, type;\r\n\r\n\tif (this.hideHeader) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F7F7F7'\r\n\t\t}\r\n\t});\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId({}));\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\tthis.columns.forEach(function(column) {\r\n\r\n\t\t/* Create new Cell and assign value */\r\n\t\tcell = new Cell(type, this.sharedStrings);\r\n\t\tcell.setValue('label', column);\r\n\r\n\t\trow.addCell(cell);\r\n\t}.bind(this));\r\n\r\n\treturn row;\r\n};\r\n\r\n/**\r\n *\r\n * @param sGroupName\r\n * @return {Row}\r\n */\r\nColumnConfiguration.prototype.getGroupHeader = function(sGroupName) {\r\n\tvar cell, row, type, data;\r\n\r\n\trow = new Row();\r\n\ttype = new Text({\r\n\t\tfont: {\r\n\t\t\tname: 'Arial',\r\n\t\t\tsize: 11,\r\n\t\t\tbold: true\r\n\t\t},\r\n\t\tfill: {\r\n\t\t\tcolor: 'F2F2F2'\r\n\t\t}\r\n\t});\r\n\tdata = {\r\n\t\tname: sGroupName\r\n\t};\r\n\r\n\t/* Register header style */\r\n\ttype.registerAt(this.styles);\r\n\r\n\trow.setStyle(type.getStyleId(data));\r\n\trow.addAttribute({\r\n\t\tname: 'customFormat',\r\n\t\tvalue: '1'\r\n\t});\r\n\r\n\trow.spans.value = '1:' + this.size();\r\n\r\n\t/* Create new Cell and assign value */\r\n\tcell = new Cell(type, this.sharedStrings);\r\n\tcell.setValue('name', data);\r\n\r\n\trow.addCell(cell);\r\n\r\n\treturn row;\r\n};\r\n\r\n\r\n/**\r\n * Returns the size of the ColumnConfiguration - respectively the\r\n * count of the configured columns.\r\n *\r\n * @returns {number} Count of configured columns\r\n */\r\nColumnConfiguration.prototype.size = function() {\r\n\treturn this.columns.length;\r\n};\r\n\r\nmodule.exports = ColumnConfiguration;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/ColumnConfiguration.js\n// module id = 24\n// module chunks = 0","var BigNumber\t \t= require('../binding/type/BigNumber'),\r\n\tBooleanType \t= require('../binding/type/BooleanType'),\r\n\tCalendarDate \t= require('../binding/type/CalendarDate'),\r\n\tCell\t\t\t= require('../data/Cell'),\r\n\tCurrency \t\t= require('../binding/type/Currency'),\r\n\tEnumeration \t= require('../binding/type/Enumeration'),\r\n\tNumeric \t\t= require('../binding/type/Numeric'),\r\n\tText\t\t \t= require('../binding/type/Text');\r\n\r\n/**\r\n * The Column class represents the field type of columns. It handles\r\n * styling, data types and data binding.\r\n *\r\n * @param {(Object|string)} oData - Data object representing the Column configuration\r\n * @param {string} oData.property - References the data object property that is bound as value for this column\r\n * @param {string} [oData.textAlign] - Optional alignment\r\n * @param {string} [oData.label] - Optional column label that will be shown in the header row\r\n * @param {string} [oData.type] - Optional data type for this column. Default: Column.Type.Text\r\n * @param {string} [oData.width] - Optional width of the column\r\n * @param {SharedStrings} oSharedStrings - SharedStrings instance that will be used by all Cells\r\n * @param {Styles} oStyles - Styles collection that is needed to register each Style a Column uses\r\n * @class\r\n * @module binding/Column\r\n */\r\nfunction Column(oData, oSharedStrings, oStyles) {\r\n\tvar oColumnData;\r\n\r\n\t/* Fallback assignment if only a key is provided */\r\n\toColumnData = typeof oData === 'string' ? {property: oData} : oData;\r\n\tif (!oColumnData || !oColumnData.property) { throw new Error('The property for the column is not defined'); }\r\n\r\n\tthis.property = oColumnData.property;\r\n\tthis.label = oColumnData.label ? oColumnData.label : oColumnData.property;\r\n\tthis.width = oColumnData.width;\r\n\tthis.styles = oStyles;\r\n\tthis.type = this._initType(oColumnData);\r\n\tthis.cell = new Cell(this.type, oSharedStrings);\r\n}\r\n\r\n/**\r\n * Initializes the data type for this Column. Type specific\r\n * formatting information will be evaluated and applied.\r\n *\r\n * @param {Object} oData - Configuration object for this Column that also contains type and formatting information\r\n * @param {string} oData.type - Specifies the data type\r\n * @param {string} [oData.textAlign] - Defines the horizontal alignment\r\n * @param {boolean} [oData.delimiter] - Specifies if a thousands delimiter is shown\r\n * @param {number} [oData.scale] - Specifies the the decimal scale\r\n * @param {string} [oData.calendar] - Specifies the calendar if type is date, datetime or time\r\n * @param {string} [oData.format] - Specifies a custom format if type is date, datetime or time\r\n * @param {string} [oData.unit] - Specifies the UoM if type is number\r\n * @param {string} [oData.unitProperty] - Name of the property that contains the UoM if type is number or currency\r\n * @param {boolean} [oData.displayUnit] - Specifies if the UoM will be shown or not if type is number or currency\r\n * @param {string} [oData.trueValue] - Specifies the displayed value if the boolean type has the value true\r\n * @param {string} [oData.falseValue] - Specifies the displayed value if the boolean type has the value false\r\n * @param {string} [oData.template] - Specifies a template string that can be filled with several properties\r\n * @param {string} [oData.hierarchyLevel] - Specifies the name of the property that contains the hierarchy level\r\n * @param {string} [oData.inputFormat] - Specifies the input format of a string based date\r\n * @param {Object} [oData.valueMap] - Contains a JS object or Map with key value pairs\r\n *\r\n * @returns {Type} - Returns the specific Type object that contains all the formatting\r\n * @private\r\n */\r\nColumn.prototype._initType = function(oData) {\r\n\tvar type, sType;\r\n\r\n\tsType = typeof oData.type === 'string' ? oData.type.toLowerCase() : oData.type;\r\n\r\n\tswitch (sType) {\r\n\t\tcase 'date':\r\n\t\tcase 'datetime':\r\n\t\tcase 'time':\r\n\t\t\ttype = new CalendarDate(oData);\r\n\r\n\t\t\t/* Add \"UTC\" to all columns headers of type datetime to indicate that all timestamps in EXCEL are UTC */\r\n\t\t\tthis.label = sType === 'datetime' ? this.label + ' (UTC)' : this.label;\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'number':\r\n\t\t\ttype = new Numeric(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'currency':\r\n\t\t\ttype = new Currency(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'boolean':\r\n\t\t\ttype = new BooleanType(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'enumeration':\r\n\t\t\ttype = new Enumeration(oData);\r\n\t\t\tbreak;\r\n\t\tcase 'bignumber':\r\n\t\t\ttype = new BigNumber(oData);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\toData.type = 'text';\r\n\r\n\t\t\ttype = new Text(oData);\r\n\t}\r\n\r\n\ttype.registerAt(this.styles);\r\n\r\n\treturn type;\r\n};\r\n\r\n/**\r\n * Returns the Cell object that is referenced by this particular\r\n * Column. Every Column references only one single Cell that gets\r\n * reused for each and every Row.\r\n *\r\n * When binding the actual data to a row, the Cell content, its\r\n * references and its styling get updated and a serialized version\r\n * of the row is stored within the sheet.\r\n *\r\n * @returns {Cell} - The Cell that belongs to this particular Column\r\n */\r\nColumn.prototype.getCell = function() {\r\n\treturn this.cell;\r\n};\r\n\r\n/**\r\n * This method binds the actual business object property to the columns cell.\r\n *\r\n * @param {object} oData - Business object that gets bound to the Cell of this Column.\r\n */\r\nColumn.prototype.bind = function(oData) {\r\n\r\n\t/*\r\n\t * Due to the fact that Cell#setValue updates the Style depending\r\n\t * on the actual Cell value (i.E. Unit of Measurement for\r\n\t * Currencies), we need to provide the original business object\r\n\t * so that the Cell knows the whole business object instead of\r\n\t * just the value of its particular property.\r\n\t */\r\n\tthis.cell.setValue(this.property, oData);\r\n};\r\n\r\nmodule.exports = Column;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/Column.js\n// module id = 25\n// module chunks = 0","var Type = require('./Type');\r\n\r\n/**\r\n * The Enumeration class represents an enumeration data type.\r\n * The Enumeration allows to assign particular values for\r\n * corresponding keys.\r\n *\r\n * @param {Object} [oConfig] - Configuration object for this numeric representation\r\n * @param {Object} [oData.valueMap] - Contains a JS object or Map with key value pairs\r\n * @constructor\r\n */\r\nfunction Enumeration(oConfig) {\r\n\tType.call(this, oConfig);\r\n\r\n\tthis._valueMap = oConfig && oConfig.valueMap ? oConfig.valueMap : {};\r\n}\r\n\r\nEnumeration.prototype = Object.create(Type.prototype);\r\nEnumeration.prototype.constructor = Enumeration;\r\n\r\n/**\r\n * Returns the mapped value for the key that is present in the\r\n * business object.\r\n *\r\n * @param {string} sProperty - Name of the property that contains the key\r\n * @param {Object} oData - Business object that contains the data\r\n * @returns {string} - The value of the given property after type specific processing\r\n * @protected\r\n */\r\nEnumeration.prototype.getValue = function(sProperty, oData) {\r\n\tvar key, result;\r\n\r\n\tkey = oData[sProperty];\r\n\tresult = this._valueMap instanceof Map ? this._valueMap.get(key) : this._valueMap[key];\r\n\r\n\treturn result || '';\r\n};\r\n\r\nmodule.exports = Enumeration;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/binding/type/Enumeration.js\n// module id = 26\n// module chunks = 0","var XMLFile\t\t\t= require('../xml/XMLFile'),\r\n\tRelationships\t= require('./Relationships');\r\n\r\n/**\r\n * This class represents the a Office Open XML Spreadsheet object\r\n * that is related to other objects via Relationships. The object\r\n * manages its Relationships by itself to encapsulate the complexity.\r\n *\r\n * A ReferenceNode also provides information about its path so that\r\n * all relationships that are connected to this ReferenceNode are are\r\n * relative to its path.\r\n *\r\n * @param {Object} oConfig - Configuration object that is used by the super class XMLFile\r\n * @constructor\r\n */\r\nfunction ReferenceNode(oConfig) {\r\n\tXMLFile.call(this, oConfig);\r\n\r\n\tthis._relatedFiles = [];\r\n\tthis._relationships = new Relationships(this);\r\n\r\n\tthis.addRelatedFile(this._relationships);\r\n}\r\n\r\nReferenceNode.prototype = Object.create(XMLFile.prototype);\r\nReferenceNode.prototype.constructor = ReferenceNode;\r\n\r\n\r\nReferenceNode.prototype.addRelatedFile = function(oXMLFile) {\r\n\tif (!(oXMLFile instanceof XMLFile)) {\r\n\t\tthrow new Error('A related file must be of type XMLFile');\r\n\t}\r\n\r\n\tthis._relatedFiles.push(oXMLFile);\r\n};\r\n\r\nReferenceNode.prototype.getRelationships = function() {\r\n\treturn this._relationships;\r\n};\r\n\r\n/**\r\n * Returns an Array of {@link XMLFile} objects that are reference by\r\n * this {@link ReferenceNode}. The method provides a flat copy of the\r\n * original data to avoid manipulation.\r\n *\r\n * @returns {Array} Array containing referenced files\r\n */\r\nReferenceNode.prototype.getRelatedFiles = function() {\r\n\treturn this._relatedFiles.slice();\r\n};\r\n\r\nmodule.exports = ReferenceNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/objects/ReferenceNode.js\n// module id = 27\n// module chunks = 0","var XMLFile\t\t = require('../xml/XMLFile'),\r\n\tSharedString\t= require('./SharedString');\r\n\r\n/**\r\n * The SharedStrings class represents the list of shared String\r\n * objects that is used in the Office Open XMl Spreadsheet. The\r\n * SharedStrings object reduces redundancy within the data by\r\n * providing a reference to unique Strings instead of repeating\r\n * them.\r\n *\r\n * Due to the fact that the Strings are shared within the whole\r\n * workbook, each instance of the document export only has one\r\n * single instance of SharedString and therefore it uses the\r\n * Singleton pattern to ensure this.\r\n *\r\n * @class\r\n */\r\nfunction SharedStrings() {\r\n\tXMLFile.call(this, SharedStrings.metadata);\r\n\r\n\tObject.defineProperty(this, 'map', {value: new Map(), writable: false});\r\n\tObject.defineProperty(this, '_shared', {value: new SharedString(''), writable: false});\r\n\r\n\tSharedStrings.instance = this;\r\n}\r\n\r\nSharedStrings.prototype = Object.create(XMLFile.prototype);\r\nSharedStrings.prototype.constructor = SharedStrings;\r\n\r\n/**\r\n * Retrieves the Singleton instance of SharedStrings. If no instance is present, it will create one.\r\n *\r\n * @function\r\n * @returns {object} - Singleton instance\r\n */\r\nSharedStrings.getInstance = function() {\r\n\tif (!SharedStrings.instance) {\r\n\t\tSharedStrings.instance = new SharedStrings();\r\n\t}\r\n\r\n\treturn SharedStrings.instance;\r\n};\r\n\r\nSharedStrings.metadata = {\r\n\tfilename: 'sharedStrings.xml',\r\n\ttag: 'sst',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'count',\r\n\t\t\tname: 'count',\r\n\t\t\tvalue: 0\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'uniqueCount',\r\n\t\t\tname : 'uniqueCount',\r\n\t\t\tvalue: 0\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Adds the specified string value to the set of SharedStrings. The\r\n * method creates a SharedString proxy object that contains\r\n * information about the string itself as well as its index. The\r\n * index is zero-based and can be used for referencing within Cell\r\n * objects.\r\n *\r\n * @function insert\r\n * @param {string} sValue - The string that has to be inserted\r\n * @return {object} - The SharedString instance that represents the provided string value\r\n */\r\nSharedStrings.prototype.insert = function(sValue) {\r\n\tvar index;\r\n\r\n\tthis.count.value = this.count.value + 1;\r\n\r\n\tif (this.map.has(sValue)) {\r\n\t\treturn this.map.get(sValue);\r\n\t}\r\n\r\n\tthis._shared.setValue(sValue);\r\n\tindex = this.map.size;\r\n\tthis.map.set(sValue, index);\r\n\r\n\t/* The SharedString needs to be added to the child nodes as well for serialization purposes */\r\n\tthis.childs.push(this._shared.serialize());\r\n\tthis.uniqueCount.value = this.childs.length;\r\n\r\n\treturn index;\r\n};\r\n\r\n/**\r\n * Cleanup hook that gets executed when the XMLFile#serialize function\r\n * is called with the finalize flag.\r\n *\r\n * @private\r\n */\r\nSharedStrings.prototype.cleanup = function() {\r\n\tthis.map.clear();\r\n};\r\n\r\nmodule.exports = SharedStrings;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/SharedStrings.js\n// module id = 28\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The SharedString class represents each shared String within the\r\n * SharedStrings file.\r\n *\r\n * @param {string} sValue - The String that gets represented by this SharedString object\r\n * @class\r\n */\r\nfunction SharedString(sValue) {\r\n\tXMLNode.call(this, SharedString.metadata);\r\n\r\n\tthis.setValue(sValue);\r\n}\r\n\r\nSharedString.prototype = Object.create(XMLNode.prototype);\r\nSharedString.prototype.constructor = SharedString;\r\n\r\n// eslint-disable-next-line no-control-regex, max-len\r\nSharedString.controlCharacterTestRegex = /[\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0B\\x0C\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F]/m;\r\n// eslint-disable-next-line no-control-regex, max-len\r\nSharedString.controlCharacterReplaceRegex = /[\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0B\\x0C\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F]/gm;\r\n\r\nSharedString.metadata = {\r\n\ttag: 'si',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'text',\r\n\t\t\ttag: 't'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Replaces XML incompatible control characters with their corresponding Office Open XML escape sequence.\r\n *\r\n * @param {string} sValue - String that contains ASCII control characters\r\n * @returns {string} - Escaped string\r\n * @private\r\n */\r\nSharedString._escapeControlCharacters = function(sValue) {\r\n\tvar sCharHex;\r\n\r\n\treturn sValue.replace(SharedString.controlCharacterReplaceRegex, function(sMatch) {\r\n\t\tsCharHex = sMatch.codePointAt(0).toString(16).toUpperCase();\r\n\r\n\t\t/* Works only with control characters in ASCII range - do NOT use with Emojis */\r\n\t\treturn '_x00' + (sCharHex.length === 1 ? '0' : '') + sCharHex + '_';\r\n\t});\r\n};\r\n\r\n/**\r\n * Assigns the given value to the current SharedString instance.\r\n *\r\n * @function\r\n * @param {string} sValue - The string value that should be added\r\n */\r\nSharedString.prototype.setValue = function(sValue) {\r\n\r\n\tif (SharedString.controlCharacterTestRegex.test(sValue)) {\r\n\t\tsValue = SharedString._escapeControlCharacters(sValue);\r\n\t}\r\n\r\n\tif (sValue && typeof sValue == 'string') {\r\n\t\tthis.text.value = sValue;\r\n\t} else {\r\n\r\n\t\t/**\r\n\t\t * There are other implementations for creating a string\r\n\t\t * representation out of a number that might be more\r\n\t\t * convenient like new String(number).toString() or\r\n\t\t * number.toString() but '' + number is the best performing.\r\n\t\t */\r\n\t\tthis.text.value = '' + sValue;\r\n\t}\r\n};\r\n\r\n/**\r\n * Serializes the XMLNode and transforms the concatenated string into a sequential string.\r\n * @return {string} - String representation of the SharedString\r\n *\r\n * @override\r\n */\r\nSharedString.prototype.serialize = function() {\r\n\tvar sSerialized;\r\n\r\n\tsSerialized = Object.getPrototypeOf(SharedString.prototype).serialize.call(this);\r\n\r\n\treturn (' ' + sSerialized).substr(1);\r\n};\r\n\r\nmodule.exports = SharedString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/data/SharedString.js\n// module id = 29\n// module chunks = 0","var XMLFile\t\t\t= require('../xml/XMLFile'),\r\n\tStyle\t\t\t= require('./Style'),\r\n\tFont\t\t\t= require('./Font'),\r\n\tFill\t\t\t= require('./Fill'),\r\n\tBorder\t\t\t= require('./Border'),\r\n\tNumberFormat\t= require('./NumberFormat');\r\n\r\n/**\r\n *\r\n * @class\r\n * @module style/Styles\r\n */\r\nfunction Styles() {\r\n\tXMLFile.call(this, Styles.metadata);\r\n\r\n\t/* Microsoft Excel fix - specific fill that needs to be present */\r\n\tthis.addFill({ type: 'none' }); // Add a default fill at index 0\r\n\tthis.addFill({ type: 'gray125' }); // Needs to have index 1\r\n\tthis.addStyle(Style.DEFAULT); // Apply base style to feed the hard-coded cellStyles and cellStyleXfs\r\n}\r\n\r\nStyles.prototype = Object.create(XMLFile.prototype);\r\nStyles.prototype.constructor = Styles;\r\n\r\nStyles.metadata = {\r\n\tfilename: 'styles.xml',\r\n\ttag: 'styleSheet',\r\n\troot: true,\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'mc',\r\n\t\t\tvalue: 'http://schemas.openxmlformats.org/markup-compatibility/2006'\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t,\r\n\t\t{\r\n\t\t\tname: 'mc',\r\n\t\t\tsuffix: 'Ignorable',\r\n\t\t\tvalue: 'x14ac x16r2 xr'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'x14ac',\r\n\t\t\tvalue: 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'x16r2',\r\n\t\t\tvalue: 'http://schemas.microsoft.com/office/spreadsheetml/2015/02/main'\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: 'xmlns',\r\n\t\t\tsuffix: 'xr',\r\n\t\t\tvalue: 'http://schemas.microsoft.com/office/spreadsheetml/2014/revision'\r\n\t\t}\r\n\t\t*/\r\n\t],\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'numberFormats',\r\n\t\t\ttag: 'numFmts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fonts',\r\n\t\t\ttag: 'fonts',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fills',\r\n\t\t\ttag: 'fills',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'borders',\r\n\t\t\ttag: 'borders',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyleXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'xf',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'numFmtId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fontId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'fillId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'borderId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'cellXfs',\r\n\t\t\ttag: 'cellXfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'count',\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'cellStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttag: 'cellStyle',\r\n\t\t\t\t\tattributes: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'name',\r\n\t\t\t\t\t\t\tvalue: 'Normal'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'xfId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: 'builtinId',\r\n\t\t\t\t\t\t\tvalue: '0'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'dxfs',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'tableStyles',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'count',\r\n\t\t\t\t\tvalue: 0\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultTableStyle',\r\n\t\t\t\t\tvalue: 'TableStyleMedium2'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'defaultPivotStyle',\r\n\t\t\t\t\tvalue: 'PivotStyleLight16'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n\r\n/**\r\n * Adds the specified Style to the Styles class according to the\r\n * Style configuration. The method will return a Style object that\r\n * references Font, Fill, Border and an optional NumberFormat. If\r\n * some of the referenced Font, Fill, Border or NumberFormat objects\r\n * are not present yet, it will create them automatically, otherwise\r\n * it will re-use existing ones.\r\n *\r\n * The method ensures that particular Style combinations exist only\r\n * once and there are no duplicates.\r\n *\r\n * @param {Object} oData - Configuration object that defines the Style information\r\n * @param {Object} [oData.font] - Configuration object that defines the Font information\r\n * @param {string} [oData.font.name] - Name of the used Font i.E. 'Arial'\r\n * @param {string} [oData.font.size] - Preferred Font size i.E. '12'\r\n * @param {boolean} [oData.font.bold] - Defines the Font weight\r\n * @param {Object} [oData.fill] - Configuration object that defines the Fill information\r\n * @param {string} [oData.fill.color] - HEX string defining the color of the cell fill\r\n * @param {string} [oData.fill.type] - Defines the type of the fill i.E. 'none' or 'solid'\r\n * @param {Object} [oData.border] - Configuration object that defines the Border information\r\n * @param {Object|number} [oData.numberFormat] - Configuration object that defines the NumberFormat information\r\n * @param {string} [oData.numberFormat.format] - Formatting template that will be used\r\n * @param {Object} [oData.align] - Defines the text alignment within the cell\r\n * @param {string} [oData.align.horizontal] - Horizontal alignment\r\n * @param {string} [oData.align.vertical] - Vertical alignment\r\n * @param {number} [oData.align.indent] - Cell indentation\r\n * @param {boolean} [oData.quotePrefix] - Defines whether the style configuration should add a quotePrefix attribute\r\n * @returns {number} - The ID of the unique Style object that needs to be referenced\r\n */\r\nStyles.prototype.addStyle = function(oData) {\r\n\tvar style, fontId, fillId, borderId, numberFormatId;\r\n\r\n\t/* Add Font, Fill, Border and NumberFormat if needed */\r\n\tfontId = this.addFont(oData.font);\r\n\tfillId = this.addFill(oData.fill);\r\n\tborderId = this.addBorder(oData.border);\r\n\r\n\t/* Fallback to avoid custom NumberFormats that won't be used if oData.numberFormat is undefined */\r\n\tif (typeof oData.numberFormat === 'undefined') {\r\n\t\toData.numberFormat = 0;\r\n\t}\r\n\r\n\tnumberFormatId =\r\n\t\tNumberFormat._isBuiltin(oData.numberFormat) ? oData.numberFormat : this.addNumberFormat(oData.numberFormat);\r\n\r\n\t/* Create temporary Style */\r\n\tstyle = new Style();\r\n\r\n\tstyle.setFontId(fontId);\r\n\tstyle.setFillId(fillId);\r\n\tstyle.getBorderId(borderId);\r\n\tstyle.setNumberFormatId(numberFormatId);\r\n\tstyle.setAlignment(oData.align);\r\n\tstyle.setQuotePrefix(oData.quotePrefix);\r\n\r\n\t/* Add Style if not already present */\r\n\treturn this._addToAggregation(style, this.cellXfs);\r\n};\r\n\r\n\r\n/**\r\n * Adds the specific item to the provided aggregation. This Method\r\n * should only be called by the library itself due to possible\r\n * failures. It automatically updates the count within the XML\r\n * representation of this aggregation.\r\n *\r\n * This method should only be used for Font, Fill, Border or\r\n * NumberFormat objects.\r\n *\r\n * @param {Font|Fill|Border|NumberFormat|Style} oNewItem - The item that needs to be appended to the aggregation\r\n * @param {Array} aAggregation - An array that represents the aggregation\r\n * @returns {number} - The zero-based index of the element after it was inserted\r\n * @private\r\n */\r\nStyles.prototype._addToAggregation = function(oNewItem, aAggregation) {\r\n\tvar count, i;\r\n\r\n\ti = -1;\r\n\r\n\taAggregation.childs.forEach(function(existingItem, index, array) {\r\n\t\tif (existingItem.equals(oNewItem)) {\r\n\t\t\ti = index;\r\n\t\t}\r\n\t});\r\n\r\n\tif (i === -1) {\r\n\t\taAggregation.addChild(oNewItem);\r\n\t\tcount = aAggregation.childs.length;\r\n\r\n\t\taAggregation.count.value = count;\r\n\t\ti = count - 1;\r\n\t}\r\n\r\n\treturn i;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a RGB color to the Styles collection that is\r\n * referenced by several Styles.\r\n *\r\n * If this particular color is already present, it will not add it a\r\n * second time.\r\n *\r\n * @param {string} sHexColor - HEX string representing a RGB color\r\n */\r\nStyles.prototype.addColor = function(sHexColor) {\r\n\tvar alreadyPresent;\r\n\r\n\tif (!this.colors) {\r\n\t\tthis.addChild({\r\n\t\t\tid: 'colors',\r\n\t\t\ttag: 'colors',\r\n\t\t\tproperties: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'mru',\r\n\t\t\t\t\ttag: 'mruColors'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\talreadyPresent = this.colors.mru.childs.some(function(color) {\r\n\t\treturn color.rgb.value === 'FF' + sHexColor;\r\n\t});\r\n\r\n\tif (alreadyPresent) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.colors.mru.addChild({\r\n\t\ttag: 'color',\r\n\t\tattributes: [\r\n\t\t\t{\r\n\t\t\t\tid: 'rgb',\r\n\t\t\t\tname: 'rgb',\r\n\t\t\t\tvalue: 'FF' + sHexColor\r\n\t\t\t}\r\n\t\t]\r\n\t});\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Font to the Styles collection that can be\r\n * referenced by several Styles. The Font is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Font is already present, it will not add it a\r\n * second time. This ensures that each referenced Font is unique\r\n * according to the criteria of Font#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Font.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @returns {number} - The index of this Font used for reference by Style objects\r\n */\r\nStyles.prototype.addFont = function(oData) {\r\n\tvar oFont = new Font(oData);\r\n\r\n\treturn this._addToAggregation(oFont, this.fonts);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Fill to the Styles collection that can be\r\n * referenced by several Styles. The Fill is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Fill is already present, it will not add it a\r\n * second time. This ensures that each referenced Fill is unique\r\n * according to the criteria of Fill#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Fill.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @returns {number} - The index of this Fill used for reference by Style objects\r\n */\r\nStyles.prototype.addFill = function(oData) {\r\n\tvar index, oFill;\r\n\r\n\toFill = new Fill(oData);\r\n\r\n\tindex = this._addToAggregation(oFill, this.fills);\r\n\r\n\tif (oFill.getFill() !== null) {\r\n\t\tthis.addColor(oFill.getFill());\r\n\t}\r\n\r\n\treturn index;\r\n};\r\n\r\n\r\n/**\r\n * This method adds a Border to the Styles collection that can be\r\n * referenced by several Styles. The Border is instantiated according\r\n * to the provided configuration object.\r\n *\r\n * If this particular Border is already present, it will not add it a\r\n * second time. This ensures that each referenced Border is unique\r\n * according to the criteria of Border#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * Border.\r\n *\r\n * @param {Object} oData - Configuration object for this Border\r\n * @returns {number} - The index of this Border used for reference by Style objects\r\n */\r\nStyles.prototype.addBorder = function(oData) {\r\n\tvar oBorder = new Border(oData);\r\n\r\n\treturn this._addToAggregation(oBorder, this.borders);\r\n};\r\n\r\n\r\n/**\r\n * This method adds a NumberFormat to the Styles collection that can\r\n * be referenced by several Styles. The NumberFormat is instantiated\r\n * according to the provided configuration object.\r\n *\r\n * If this particular NumberFormat is already present, it will not\r\n * add it a second time. This ensures that each referenced\r\n * NumberFormat is unique according to the criteria of\r\n * NumberFormat#equals.\r\n *\r\n * The method returns the index which deals as an identifier for this\r\n * NumberFormat.\r\n *\r\n * @param {Object} oData - Configuration object for this NumberFormat\r\n * @returns {number} - The index of this NumberFormat used for reference by Style objects\r\n */\r\nStyles.prototype.addNumberFormat = function(oData) {\r\n\tvar index, numberFormat;\r\n\r\n\tnumberFormat = new NumberFormat(oData);\r\n\tindex = this._addToAggregation(numberFormat, this.numberFormats);\r\n\r\n\tnumberFormat.setId(NumberFormat.ID_OFFSET + index);\r\n\r\n\treturn numberFormat.getId();\r\n};\r\n\r\nmodule.exports = Styles;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Styles.js\n// module id = 30\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\nvar Alignment = require('./Alignment');\r\n\r\n/**\r\n * Represents a particular Style within the Office Open XML Spreadsheet.\r\n * Instances of this type will be created by the Styles Class after\r\n * registering a new Style.\r\n *\r\n * @constructor\r\n */\r\nfunction Style() {\r\n\tXMLNode.call(this, Style.metadata);\r\n}\r\n\r\nStyle.prototype = Object.create(XMLNode.prototype);\r\nStyle.prototype.constructor = Style;\r\n\r\nStyle.metadata = {\r\n\ttag: 'xf',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'numberFormat',\r\n\t\t\tname: 'numFmtId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'font',\r\n\t\t\tname: 'fontId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\tname: 'fillId',\r\n\t\t\tvalue: '0'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'border',\r\n\t\t\tname: 'borderId',\r\n\t\t\tvalue: '0'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nStyle.DEFAULT = {\r\n\tfont: {\r\n\t\tname: 'Arial',\r\n\t\tsize: 11,\r\n\t\tfamily: '2',\r\n\t\tcolor: '1',\r\n\t\tbold: false\r\n\t},\r\n\tfill: {\r\n\t\ttype: 'none'\r\n\t}\r\n};\r\n\r\nStyle.prototype.getAlignment = function() {\r\n\treturn this.alignment ? this.alignment : null;\r\n};\r\n\r\nStyle.prototype.getFontId = function() {\r\n\treturn this.font.value;\r\n};\r\n\r\nStyle.prototype.getFillId = function() {\r\n\treturn this.fill.value;\r\n};\r\n\r\nStyle.prototype.getBorderId = function() {\r\n\treturn this.border.value;\r\n};\r\n\r\nStyle.prototype.getNumberFormatId = function() {\r\n\treturn this.numberFormat.value;\r\n};\r\n\r\nStyle.prototype.hasQuotePrefix = function() {\r\n\treturn 'quotePrefix' in this;\r\n};\r\n\r\n/**\r\n * Applies the alignment to the Style. The alignment must match the\r\n * predefined options of <code>Alignment</code> as far as it is not\r\n * null. Other values will be ignored.\r\n *\r\n * The value <code>null</code> will delete the current alignment.\r\n *\r\n * @param {Object} oAlign - Alignment configuration that gets applied or null\r\n * @param {string} [oAlign.horizontal] - Horizontal alignment\r\n * @param {string} [oAlign.vertical] - Vertical alignment\r\n * @param {number} [oAlign.indent] - Cell indentation\r\n */\r\nStyle.prototype.setAlignment = function(oAlign) {\r\n\tvar alignment, alignProperty;\r\n\r\n\talignProperty = 'alignment';\r\n\r\n\t// Removes the applyAlignment automatically when sAlign is null\r\n\tthis._apply(oAlign, 'Alignment');\r\n\r\n\tif (typeof oAlign === 'undefined' || oAlign === null) {\r\n\t\tthis.remove(alignProperty);\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!(alignProperty in this)) {\r\n\t\talignment = new Alignment();\r\n\r\n\t\tthis.addChild(alignment);\r\n\t\tObject.defineProperty(this, alignProperty, {value: alignment, writable: false, configurable: true});\r\n\t}\r\n\r\n\tthis[alignProperty].setHorizontalAlignment(oAlign.horizontal);\r\n\tthis[alignProperty].setVerticalAlignment(oAlign.vertical);\r\n\tthis[alignProperty].setWrapText(oAlign.wrap);\r\n\tthis[alignProperty].setIndent(oAlign.indent);\r\n};\r\n\r\nStyle.prototype.setFontId = function(nFontId) {\r\n\tthis._apply(nFontId, 'Font');\r\n\r\n\tthis.font.value = nFontId;\r\n};\r\n\r\nStyle.prototype.setFillId = function(nFillId) {\r\n\tthis._apply(nFillId, 'Fill');\r\n\r\n\tthis.fill.value = nFillId;\r\n};\r\n\r\nStyle.prototype.setBorderId = function(sBorderId) {\r\n\tthis.border.value = sBorderId;\r\n};\r\n\r\nStyle.prototype.setNumberFormatId = function(nNumFmtId) {\r\n\tthis._apply(nNumFmtId, 'NumberFormat');\r\n\r\n\tthis.numberFormat.value = nNumFmtId;\r\n};\r\n\r\nStyle.prototype.setQuotePrefix = function(bQuotePrefix) {\r\n\tvar sAttributeName = 'quotePrefix';\r\n\r\n\tif (bQuotePrefix && !this.hasQuotePrefix()) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: sAttributeName,\r\n\t\t\tname: sAttributeName,\r\n\t\t\tvalue: '1'\r\n\t\t});\r\n\t} else if (!bQuotePrefix && this.hasQuotePrefix()) {\r\n\t\tthis.remove(sAttributeName);\r\n\t}\r\n};\r\n\r\nStyle.prototype._apply = function(nId, sType) {\r\n\tvar applyProperty = 'apply' + sType;\r\n\r\n\tthis.remove(applyProperty);\r\n\r\n\tif (nId) {\r\n\t\tthis.addAttribute({\r\n\t\t\tid: applyProperty,\r\n\t\t\tname: applyProperty,\r\n\t\t\tvalue: '1'\r\n\t\t});\r\n\t}\r\n};\r\n\r\nStyle.prototype.equals = function(oStyle) {\r\n\tif (!(oStyle instanceof Style)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFontId() === oStyle.getFontId()\r\n\t\t&& this.getFillId() === oStyle.getFillId()\r\n\t\t&& this.getBorderId() === oStyle.getBorderId()\r\n\t\t&& this.getNumberFormatId() === oStyle.getNumberFormatId()\r\n\t\t&& this.hasQuotePrefix() === oStyle.hasQuotePrefix()\r\n\t\t&& ( (!this.alignment && !oStyle.alignment) || (this.alignment && this.alignment.equals(oStyle.alignment)) );\r\n};\r\n\r\nmodule.exports = Style;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Style.js\n// module id = 31\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The Font class represents a Font configuration within an Office\r\n * Open XML Spreadsheet.\r\n *\r\n * @param {Object} oData - Configuration object for this Font\r\n * @param {boolean} [oData.bold] - Boolean value indicating if the Font should be bold\r\n * @param {string} [oData.name] - The name of the font that gets used by this Font object i.E. Arial, Verdana, etc.\r\n * @param {number|String} [oData.size] - The font size that is been used\r\n * @param {number} [oData.family] - The font family reference {@see getFamily}\r\n * @constructor\r\n */\r\nfunction Font(oData) {\r\n\tXMLNode.call(this, Font.metadata);\r\n\r\n\tif (oData && oData instanceof Object) {\r\n\t\tthis.setName(oData.name)\r\n\t\t\t.setSize(oData.size)\r\n\t\t\t.setFamily(oData.family)\r\n\t\t\t.setBold(!!oData.bold);\r\n\t}\r\n}\r\n\r\nFont.prototype = Object.create(XMLNode.prototype);\r\nFont.prototype.constructor = Font;\r\n\r\nFont.DEFAULT_SIZE = 11;\r\nFont.DEFAULT_NAME = 'Arial';\r\n\r\nFont.metadata = {\r\n\ttag: 'font',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'size',\r\n\t\t\ttag: 'sz',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_SIZE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'color',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'theme',\r\n\t\t\t\t\tvalue: '1'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'name',\r\n\t\t\ttag: 'name',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: Font.DEFAULT_NAME\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'family',\r\n\t\t\ttag: 'family',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'valueAttribute',\r\n\t\t\t\t\tname: 'val',\r\n\t\t\t\t\tvalue: 2\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Font is equal to the given parameter.\r\n *\r\n * @param {Font} oFont - The Font to compare with\r\n * @return {boolean} - Returns true if both Font objects contain the same configuration.\r\n */\r\nFont.prototype.equals = function(oFont) {\r\n\tif (!(oFont instanceof Font)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getName() == oFont.getName()\r\n\t\t&& this.getSize() == oFont.getSize()\r\n\t\t&& this.isBold() == oFont.isBold()\r\n\t\t&& this.getColor() == oFont.getColor()\r\n\t\t&& this.getFamily() == oFont.getFamily();\r\n};\r\n\r\n/**\r\n * Returns whether the Font will be displayed bold or not.\r\n *\r\n * @returns {boolean} - Returns true if the Font is bold\r\n */\r\nFont.prototype.isBold = function() {\r\n\treturn !!this.bold;\r\n};\r\n\r\n/**\r\n * Returns the size of this Font.\r\n *\r\n * @returns {number} - The size of the Font\r\n */\r\nFont.prototype.getSize = function() {\r\n\treturn this.size.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the name of this Font. I.E. Arial, Calibri, etc.\r\n *\r\n * @returns {string} - The name of the Font\r\n */\r\nFont.prototype.getName = function() {\r\n\treturn this.name.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the color reference of this Font.\r\n *\r\n * @returns {string} - The color as HEX string\r\n */\r\nFont.prototype.getColor = function() {\r\n\treturn this.color.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * Returns the Font family reference of this Font. The reference is\r\n * defined within the Office Open XML specification.\r\n * 1 : Roman (Times New Roman, SAP-icons)\r\n * 2 : Swiss (Arial, Calibri, Segoe UI, Tahoma, Verdana)\r\n * 3 : Modern\r\n * 4 : Script\r\n * 5 : Decorative\r\n * 6-14 : Reserved for future use\r\n *\r\n * @returns {number} - The Font family ID\r\n */\r\nFont.prototype.getFamily = function() {\r\n\treturn this.family.valueAttribute.value;\r\n};\r\n\r\n/**\r\n * This method can be used to set the Font to bold or not.\r\n *\r\n * @param {boolean} bBold - A boolean value that indicates if the Font should be bold or not\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setBold = function(bBold) {\r\n\tvar boldProperty = 'bold';\r\n\r\n\t/* Early return if bold status is already correct */\r\n\tif (bBold === !!this[boldProperty]) {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tif (bBold) {\r\n\t\tthis.addChild({\r\n\t\t\tid: boldProperty,\r\n\t\t\ttag: 'b'\r\n\t\t});\r\n\t} else {\r\n\t\tthis.remove(boldProperty);\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * This method is used to set the Font family reference for the used font.\r\n *\r\n * @see {@link getFamily}\r\n * @param {number} nFamily - Number that references the Font family\r\n * @returns {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setFamily = function(nFamily) {\r\n\r\n\tif (nFamily > 0 && nFamily < 15) {\r\n\t\tthis.family.valueAttribute.value = nFamily;\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font name to this object.\r\n *\r\n * @param {string} sName - Name of the font i.E. Arial, Calibri, etc.\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setName = function(sName) {\r\n\tif (sName && typeof sName === 'string') {\r\n\t\tthis.name.valueAttribute.value = sName;\r\n\t}\r\n\r\n\t/*\r\n\t * If the font name is Calibri we need to add another child node:\r\n\t *\r\n\t *\t{\r\n\t *\t\ttag: 'scheme',\r\n\t *\t\tattributes: [\r\n\t *\t\t\t{\r\n\t *\t\t\t\tname: 'val',\r\n\t *\t\t\t\tvalue: 'minor'\r\n\t *\t\t\t}\r\n\t *\t\t]\r\n\t *\t}\r\n\t */\r\n\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Assigns the given font size to this object.\r\n *\r\n * @param {number} nSize - Textual representation of the font size\r\n * @return {Font} - Returns the current Font object for chaining\r\n */\r\nFont.prototype.setSize = function(nSize) {\r\n\r\n\t/* Check preconditions */\r\n\tif (typeof nSize !== 'number' || isNaN(nSize) || nSize < 1 || nSize > 96) {\r\n\t\tthrow new Error('The size ' + nSize + ' is not supported.');\r\n\t}\r\n\r\n\tthis.size.valueAttribute.value = nSize;\r\n\r\n\treturn this;\r\n};\r\n\r\nmodule.exports = Font;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Font.js\n// module id = 32\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This Class represents a background fill of cells within the Office\r\n * Open Spreadsheet document. The Fill accepts a configuration object\r\n * which might have either an \"color\" or an \"type\" property.\r\n *\r\n * @param {Object} oData - Configuration object for this Fill\r\n * @param {string} [oData.color] - HEX string defining the colored fill\r\n * @param {string} [oData.type] - Color independent fill type\r\n * @constructor\r\n */\r\nfunction Fill(oData) {\r\n\tXMLNode.call(this, Fill.metadata);\r\n\r\n\tif (oData) {\r\n\t\tif (oData.color) {\r\n\t\t\tthis.setFill(oData.color);\r\n\t\t} else if (oData.type) {\r\n\t\t\tthis.setType(oData.type);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nFill.prototype = Object.create(XMLNode.prototype);\r\nFill.prototype.constructor = Fill;\r\n\r\nFill.DEFAULT_TYPE = 'none';\r\n\r\nFill.metadata = {\r\n\ttag: 'fill',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\tid: 'fill',\r\n\t\t\ttag: 'patternFill',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'type',\r\n\t\t\t\t\tname: 'patternType',\r\n\t\t\t\t\tvalue: Fill.DEFAULT_TYPE\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Fill is equal to the one that was provided.\r\n *\r\n * @param {Fill} oFill - The Fill that gets compared to the current Fill\r\n * @returns {boolean} - Returns true if the compared objects are of the same type and contain the same color fill\r\n */\r\nFill.prototype.equals = function(oFill) {\r\n\tif (!(oFill instanceof Fill)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getType() === oFill.getType()\r\n\t\t&& this.getFill() === oFill.getFill();\r\n};\r\n\r\n/**\r\n * Returns the color of the current Fill.\r\n *\r\n * @returns {string|null} - String containing the color HEX color of the Fill or null of no color is assigned\r\n */\r\nFill.prototype.getFill = function() {\r\n\r\n\t/* The opacity needs to be removed before returning the HEX color */\r\n\treturn this.fill.childs.length ? this.fill.color.rgb.value.substring(2) : null;\r\n};\r\n\r\nFill.prototype.setFill = function(sColor) {\r\n\tthis.reset();\r\n\r\n\tif (sColor && typeof sColor === 'string' && /^[A-Fa-f0-9]{6}$/.test(sColor)) {\r\n\t\tthis.fill.type.value = 'solid';\r\n\r\n\t\t/**\r\n\t\t * Apply the provided color as forground color of the\r\n\t\t * background. We add 'FF' in front of the HEX-color\r\n\t\t * for opacity.\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\tid: 'color',\r\n\t\t\ttag: 'fgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'rgb',\r\n\t\t\t\t\tname: 'rgb',\r\n\t\t\t\t\tvalue: 'FF' + sColor\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * Add default background layer which will be used once the\r\n\t\t * foreground color uses transparency\r\n\t\t */\r\n\t\tthis.fill.addChild({\r\n\t\t\ttag: 'bgColor',\r\n\t\t\tattributes: [\r\n\t\t\t\t{\r\n\t\t\t\t\tname: 'indexed',\r\n\t\t\t\t\tvalue: '64'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/**\r\n * Returns the current Fill type.\r\n *\r\n * @returns {string} - Current Fill type\r\n */\r\nFill.prototype.getType = function() {\r\n\treturn this.fill.type.value;\r\n};\r\n\r\n/**\r\n * Assigns the given type as Fill type. The Fill will be reset to\r\n * default before the type is applied.\r\n *\r\n * @param {string} sType - Type that needs to be assigned\r\n */\r\nFill.prototype.setType = function(sType) {\r\n\tthis.reset();\r\n\r\n\tthis.fill.type.value = sType;\r\n};\r\n\r\n/**\r\n * Resets the current fill to avoid side effects that might occur\r\n * when the fill is modified.\r\n */\r\nFill.prototype.reset = function() {\r\n\tthis.fill.type.value = 'none';\r\n\tthis.fill.childs.length = 0;\r\n};\r\n\r\nmodule.exports = Fill;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Fill.js\n// module id = 33\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * This class represents border configuration for Office Open XML Spreadsheets.\r\n * @constructor\r\n */\r\nfunction Border() {\r\n\tXMLNode.call(this, Border.metadata);\r\n}\r\n\r\nBorder.prototype = Object.create(XMLNode.prototype);\r\nBorder.prototype.constructor = Border;\r\n\r\nBorder.metadata = {\r\n\ttag: 'border',\r\n\tproperties: [\r\n\t\t{\r\n\t\t\ttag: 'left'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'right'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'top'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'bottom'\r\n\t\t},\r\n\t\t{\r\n\t\t\ttag: 'diagonal'\r\n\t\t}\r\n\t]\r\n};\r\n\r\n/**\r\n * Checks if the current Border is equal to the given parameter.\r\n *\r\n * @param {Border} oBorder - Border that get's compared to the current one\r\n * @return {boolean} - Returns true if both Borders have the same configuration\r\n */\r\nBorder.prototype.equals = function(oBorder) {\r\n\r\n\t/**\r\n\t * Once it is a Border object we always return true because we\r\n\t * don't provide more than one border type\r\n\t */\r\n\treturn oBorder instanceof Border;\r\n};\r\n\r\nmodule.exports = Border;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/Border.js\n// module id = 34\n// module chunks = 0","var XMLNode = require('../xml/XMLNode');\r\n\r\n/**\r\n * The NumberFormat class is used to store custom formatting for\r\n * numeric values. In addition to a variety of built-in formats that\r\n * cannot be used as identifier for a particular format, the user can\r\n * create up to 250 different number formats.\r\n *\r\n * (https://support.office.com/en-us/article/Excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3)\r\n *\r\n * @param {Object} oData - Configuration object that is used for initialization\r\n * @param {string} oData.format - Custom format that will be applied\r\n * @constructor\r\n */\r\nfunction NumberFormat(oData) {\r\n\tXMLNode.call(this, NumberFormat.metadata);\r\n\r\n\tthis.format.value = oData && oData.format ? oData.format : NumberFormat.DEFAULT;\r\n}\r\n\r\nNumberFormat.prototype = Object.create(XMLNode.prototype);\r\nNumberFormat.prototype.constructor = NumberFormat;\r\n\r\nNumberFormat.metadata = {\r\n\ttag: 'numFmt',\r\n\tattributes: [\r\n\t\t{\r\n\t\t\tid: 'formatId',\r\n\t\t\tname: 'numFmtId'\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 'format',\r\n\t\t\tname: 'formatCode'\r\n\t\t}\r\n\t]\r\n};\r\n\r\nNumberFormat.BUILTIN_IDS = [ 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15,\r\n\t16, 17, 18, 19, 20, 21, 22, 37, 38, 39, 40, 45, 46, 47, 48, 49 ];\r\nNumberFormat.ID_OFFSET = 164;\r\nNumberFormat.DEFAULT = '#,##0.00';\r\n\r\n/**\r\n * This method returns the ID of this NumberFormat. If there was no\r\n * ID assigned yet, it will return undefined.\r\n *\r\n * @returns {number} - The ID of this NumberFormat\r\n */\r\nNumberFormat.prototype.getId = function() {\r\n\treturn this.formatId.value;\r\n};\r\n\r\n\r\n/**\r\n * Returns the format of this NumberFormat as a string.\r\n *\r\n * @returns {string} - The format template that gets applied\r\n */\r\nNumberFormat.prototype.getFormat = function() {\r\n\treturn this.format.value;\r\n};\r\n\r\n\r\n/**\r\n * Assigns the provided ID to the current NumberFormat.\r\n *\r\n * @param {number|string} sId - The ID of this NumberFormat that can be referenced\r\n */\r\nNumberFormat.prototype.setId = function(sId) {\r\n\tvar iId = typeof sId === 'number' ? sId : parseInt(sId, 10);\r\n\r\n\t/* Checks if NaN, below zero or builtin ID */\r\n\tif (isNaN(iId) || iId < 0 || NumberFormat._isBuiltin(iId)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tthis.formatId.value = sId;\r\n};\r\n\r\n\r\n/**\r\n * Sets a specific format.\r\n *\r\n * @param {string} sFormat - The format that gets applied by this NumberFormat\r\n */\r\nNumberFormat.prototype.setFormat = function(sFormat) {\r\n\tthis.format.value = sFormat;\r\n};\r\n\r\n\r\n/**\r\n * Checks if a given ID is a builtin ID or not. Builtin IDs cannot be used for custom NumberFormats.\r\n *\r\n * @param {number} iId - ID that needs to be checked if it is a builtin ID\r\n *\r\n * @returns {boolean} - Returns true if the provided ID is a builtin ID that cannot be used\r\n * @private\r\n */\r\nNumberFormat._isBuiltin = function(iId) {\r\n\treturn NumberFormat.BUILTIN_IDS.indexOf(iId) > -1;\r\n};\r\n\r\n\r\n/**\r\n * Compares another NumberFormat to the current one. This method will\r\n * match NumberFormat objects by its format regardless of their ID.\r\n *\r\n * @param {NumberFormat} oNumberFormat - The NumberFormat to compare with\r\n * @returns {boolean} - Returns true if the format template is equal to the one from the compared object\r\n */\r\nNumberFormat.prototype.equals = function(oNumberFormat) {\r\n\tif (!(oNumberFormat instanceof NumberFormat)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn this.getFormat() === oNumberFormat.getFormat();\r\n};\r\n\r\nmodule.exports = NumberFormat;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./core/xlsx/src/style/NumberFormat.js\n// module id = 35\n// module chunks = 0"],"sourceRoot":""}